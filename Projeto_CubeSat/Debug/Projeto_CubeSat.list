
Projeto_CubeSat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012278  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021d8  08012478  08012478  00013478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014650  08014650  000161f0  2**0
                  CONTENTS
  4 .ARM          00000008  08014650  08014650  00015650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014658  08014658  000161f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014658  08014658  00015658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801465c  0801465c  0001565c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08014660  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000076f8  200001f0  08014850  000161f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200078e8  08014850  000168e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000161f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000280f1  00000000  00000000  0001621e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005558  00000000  00000000  0003e30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002080  00000000  00000000  00043868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001947  00000000  00000000  000458e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd04  00000000  00000000  0004722f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ace3  00000000  00000000  00074f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e612  00000000  00000000  0009fc16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ae228  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a90  00000000  00000000  001ae26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001b7cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f0 	.word	0x200001f0
 800021c:	00000000 	.word	0x00000000
 8000220:	08012460 	.word	0x08012460

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f4 	.word	0x200001f4
 800023c:	08012460 	.word	0x08012460

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <Barometer_Init>:
static BMP280_HandleTypedef bmp280;
static bool initialized = false;
static bool is_bme280 = false;

bool Barometer_Init(I2C_HandleTypeDef* i2c_handle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    printf("Initializing barometer...\r\n");
 8000688:	4822      	ldr	r0, [pc, #136]	@ (8000714 <Barometer_Init+0x94>)
 800068a:	f00f faf3 	bl	800fc74 <puts>

    bmp280_init_default_params(&bmp280.params);
 800068e:	4822      	ldr	r0, [pc, #136]	@ (8000718 <Barometer_Init+0x98>)
 8000690:	f001 fd0b 	bl	80020aa <bmp280_init_default_params>
    bmp280.addr = BMP280_I2C_ADDRESS_0;
 8000694:	4b21      	ldr	r3, [pc, #132]	@ (800071c <Barometer_Init+0x9c>)
 8000696:	2276      	movs	r2, #118	@ 0x76
 8000698:	849a      	strh	r2, [r3, #36]	@ 0x24
    bmp280.i2c = i2c_handle;//&hi2c2;
 800069a:	4a20      	ldr	r2, [pc, #128]	@ (800071c <Barometer_Init+0x9c>)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6293      	str	r3, [r2, #40]	@ 0x28

    for (int attempt = 0; attempt < 5; attempt++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	e02a      	b.n	80006fc <Barometer_Init+0x7c>
    {
        if (bmp280_init(&bmp280, &bmp280.params)) {
 80006a6:	491c      	ldr	r1, [pc, #112]	@ (8000718 <Barometer_Init+0x98>)
 80006a8:	481c      	ldr	r0, [pc, #112]	@ (800071c <Barometer_Init+0x9c>)
 80006aa:	f001 fe78 	bl	800239e <bmp280_init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d019      	beq.n	80006e8 <Barometer_Init+0x68>
            initialized = true;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <Barometer_Init+0xa0>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
            is_bme280 = (bmp280.id == BME280_CHIP_ID);
 80006ba:	4b18      	ldr	r3, [pc, #96]	@ (800071c <Barometer_Init+0x9c>)
 80006bc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80006c0:	2b60      	cmp	r3, #96	@ 0x60
 80006c2:	bf0c      	ite	eq
 80006c4:	2301      	moveq	r3, #1
 80006c6:	2300      	movne	r3, #0
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <Barometer_Init+0xa4>)
 80006cc:	701a      	strb	r2, [r3, #0]
            printf("BMP280 identified: %s\r\n", is_bme280 ? "BME280" : "BMP280");
 80006ce:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <Barometer_Init+0xa4>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <Barometer_Init+0x5a>
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <Barometer_Init+0xa8>)
 80006d8:	e000      	b.n	80006dc <Barometer_Init+0x5c>
 80006da:	4b14      	ldr	r3, [pc, #80]	@ (800072c <Barometer_Init+0xac>)
 80006dc:	4619      	mov	r1, r3
 80006de:	4814      	ldr	r0, [pc, #80]	@ (8000730 <Barometer_Init+0xb0>)
 80006e0:	f00f fa60 	bl	800fba4 <iprintf>
            return true;
 80006e4:	2301      	movs	r3, #1
 80006e6:	e010      	b.n	800070a <Barometer_Init+0x8a>
        }

        printf("Failed to initialize barometer. Trying again...\r\n");
 80006e8:	4812      	ldr	r0, [pc, #72]	@ (8000734 <Barometer_Init+0xb4>)
 80006ea:	f00f fac3 	bl	800fc74 <puts>
        osDelay(1000);
 80006ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006f2:	f00b f991 	bl	800ba18 <osDelay>
    for (int attempt = 0; attempt < 5; attempt++)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3301      	adds	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b04      	cmp	r3, #4
 8000700:	ddd1      	ble.n	80006a6 <Barometer_Init+0x26>
    }

    printf("Error: wasn't possible to initialize barometer.\r\n");
 8000702:	480d      	ldr	r0, [pc, #52]	@ (8000738 <Barometer_Init+0xb8>)
 8000704:	f00f fab6 	bl	800fc74 <puts>
    return false;
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	08012478 	.word	0x08012478
 8000718:	20000238 	.word	0x20000238
 800071c:	2000020c 	.word	0x2000020c
 8000720:	20000240 	.word	0x20000240
 8000724:	20000241 	.word	0x20000241
 8000728:	08012494 	.word	0x08012494
 800072c:	0801249c 	.word	0x0801249c
 8000730:	080124a4 	.word	0x080124a4
 8000734:	080124bc 	.word	0x080124bc
 8000738:	080124f0 	.word	0x080124f0
 800073c:	00000000 	.word	0x00000000

08000740 <Barometer_Read>:

bool Barometer_Read(BarometerData* out)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	float pressure, temperature, humidity;

    if (!initialized) {
 8000748:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <Barometer_Read+0xb0>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	f083 0301 	eor.w	r3, r3, #1
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d004      	beq.n	8000760 <Barometer_Read+0x20>
        printf("Error: barometer is not initialized.\r\n");
 8000756:	4827      	ldr	r0, [pc, #156]	@ (80007f4 <Barometer_Read+0xb4>)
 8000758:	f00f fa8c 	bl	800fc74 <puts>
        return false;
 800075c:	2300      	movs	r3, #0
 800075e:	e038      	b.n	80007d2 <Barometer_Read+0x92>
    }

    if (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	f107 0214 	add.w	r2, r7, #20
 8000768:	f107 0110 	add.w	r1, r7, #16
 800076c:	4822      	ldr	r0, [pc, #136]	@ (80007f8 <Barometer_Read+0xb8>)
 800076e:	f002 fa7f 	bl	8002c70 <bmp280_read_float>
 8000772:	4603      	mov	r3, r0
 8000774:	f083 0301 	eor.w	r3, r3, #1
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d004      	beq.n	8000788 <Barometer_Read+0x48>
        printf("Error trying to read from barometer.\r\n");
 800077e:	481f      	ldr	r0, [pc, #124]	@ (80007fc <Barometer_Read+0xbc>)
 8000780:	f00f fa78 	bl	800fc74 <puts>
        return false;
 8000784:	2300      	movs	r3, #0
 8000786:	e024      	b.n	80007d2 <Barometer_Read+0x92>
    }

    out->pressure = pressure;
 8000788:	697a      	ldr	r2, [r7, #20]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	601a      	str	r2, [r3, #0]
    out->temperature = temperature;
 800078e:	693a      	ldr	r2, [r7, #16]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	605a      	str	r2, [r3, #4]
    out->humidity = humidity;
 8000794:	68fa      	ldr	r2, [r7, #12]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	609a      	str	r2, [r3, #8]
    out->altitude = 44330.0 * (1.0 - pow((pressure / SEA_LEVEL_PRESSURE), 0.1903));
 800079a:	ed97 7a05 	vldr	s14, [r7, #20]
 800079e:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000800 <Barometer_Read+0xc0>
 80007a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007aa:	ed9f 1b0d 	vldr	d1, [pc, #52]	@ 80007e0 <Barometer_Read+0xa0>
 80007ae:	eeb0 0b47 	vmov.f64	d0, d7
 80007b2:	f011 fb91 	bl	8011ed8 <pow>
 80007b6:	eeb0 7b40 	vmov.f64	d7, d0
 80007ba:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80007be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80007c2:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80007e8 <Barometer_Read+0xa8>
 80007c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	ed83 7b04 	vstr	d7, [r3, #16]

    return true;
 80007d0:	2301      	movs	r3, #1
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	f3af 8000 	nop.w
 80007e0:	1a36e2eb 	.word	0x1a36e2eb
 80007e4:	3fc85bc0 	.word	0x3fc85bc0
 80007e8:	00000000 	.word	0x00000000
 80007ec:	40e5a540 	.word	0x40e5a540
 80007f0:	20000240 	.word	0x20000240
 80007f4:	08012524 	.word	0x08012524
 80007f8:	2000020c 	.word	0x2000020c
 80007fc:	0801254c 	.word	0x0801254c
 8000800:	47c63e00 	.word	0x47c63e00

08000804 <SDCard_Init>:

static FATFS FatFs;
static FIL file;

bool SDCard_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	return (f_mount(&FatFs, "", 1) == FR_OK);
 8000808:	2201      	movs	r2, #1
 800080a:	4906      	ldr	r1, [pc, #24]	@ (8000824 <SDCard_Init+0x20>)
 800080c:	4806      	ldr	r0, [pc, #24]	@ (8000828 <SDCard_Init+0x24>)
 800080e:	f00a fb73 	bl	800aef8 <f_mount>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
}
 800081e:	4618      	mov	r0, r3
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	08012574 	.word	0x08012574
 8000828:	20000244 	.word	0x20000244

0800082c <SDCard_WriteLine>:

bool SDCard_WriteLine(const char* filename, const char* line)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
	if (f_open(&file, filename, FA_WRITE | FA_OPEN_APPEND) != FR_OK)
 8000836:	2232      	movs	r2, #50	@ 0x32
 8000838:	6879      	ldr	r1, [r7, #4]
 800083a:	4810      	ldr	r0, [pc, #64]	@ (800087c <SDCard_WriteLine+0x50>)
 800083c:	f00a fba2 	bl	800af84 <f_open>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SDCard_WriteLine+0x1e>
		return false;
 8000846:	2300      	movs	r3, #0
 8000848:	e014      	b.n	8000874 <SDCard_WriteLine+0x48>

	UINT bw;
	FRESULT res = f_write(&file, line, strlen(line), &bw);
 800084a:	6838      	ldr	r0, [r7, #0]
 800084c:	f7ff fd48 	bl	80002e0 <strlen>
 8000850:	4602      	mov	r2, r0
 8000852:	f107 0308 	add.w	r3, r7, #8
 8000856:	6839      	ldr	r1, [r7, #0]
 8000858:	4808      	ldr	r0, [pc, #32]	@ (800087c <SDCard_WriteLine+0x50>)
 800085a:	f00a fd4d 	bl	800b2f8 <f_write>
 800085e:	4603      	mov	r3, r0
 8000860:	73fb      	strb	r3, [r7, #15]
	f_close(&file);
 8000862:	4806      	ldr	r0, [pc, #24]	@ (800087c <SDCard_WriteLine+0x50>)
 8000864:	f00a ff3b 	bl	800b6de <f_close>

	if(res == FR_OK)
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d101      	bne.n	8000872 <SDCard_WriteLine+0x46>
	{
		return true;
 800086e:	2301      	movs	r3, #1
 8000870:	e000      	b.n	8000874 <SDCard_WriteLine+0x48>
	}
	else
	{
		return false;
 8000872:	2300      	movs	r3, #0
	}
}
 8000874:	4618      	mov	r0, r3
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000474 	.word	0x20000474

08000880 <SDCard_ClearFile>:

bool SDCard_ClearFile(const char* filename)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    if (f_open(&file, filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8000888:	220a      	movs	r2, #10
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	4807      	ldr	r0, [pc, #28]	@ (80008ac <SDCard_ClearFile+0x2c>)
 800088e:	f00a fb79 	bl	800af84 <f_open>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SDCard_ClearFile+0x1c>
        return false;
 8000898:	2300      	movs	r3, #0
 800089a:	e003      	b.n	80008a4 <SDCard_ClearFile+0x24>

    f_close(&file);
 800089c:	4803      	ldr	r0, [pc, #12]	@ (80008ac <SDCard_ClearFile+0x2c>)
 800089e:	f00a ff1e 	bl	800b6de <f_close>
    return true;
 80008a2:	2301      	movs	r3, #1
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000474 	.word	0x20000474

080008b0 <SDCard_Deinit>:

void SDCard_Deinit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	f_mount(NULL, "", 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	4903      	ldr	r1, [pc, #12]	@ (80008c4 <SDCard_Deinit+0x14>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f00a fb1d 	bl	800aef8 <f_mount>
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	08012574 	.word	0x08012574

080008c8 <LoggerService_LogBMPData>:
#include "cmsis_os.h"

static void FormatLogLine(char* buffer, size_t len, float p, float t, double a);

bool LoggerService_LogBMPData(const BarometerData data)
{
 80008c8:	b084      	sub	sp, #16
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b0a2      	sub	sp, #136	@ 0x88
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	f107 0c90 	add.w	ip, r7, #144	@ 0x90
 80008d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	char line[128];
	FormatLogLine(line, sizeof(line), data.pressure, data.temperature, data.altitude);
 80008d8:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 80008dc:	ed97 6a25 	vldr	s12, [r7, #148]	@ 0x94
 80008e0:	ed97 7b28 	vldr	d7, [r7, #160]	@ 0xa0
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	eeb0 1b47 	vmov.f64	d1, d7
 80008ea:	eef0 0a46 	vmov.f32	s1, s12
 80008ee:	eeb0 0a66 	vmov.f32	s0, s13
 80008f2:	2180      	movs	r1, #128	@ 0x80
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f81d 	bl	8000934 <FormatLogLine>

	bool success =  SDCard_WriteLine("bmp_log.txt", line);
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4619      	mov	r1, r3
 80008fe:	4807      	ldr	r0, [pc, #28]	@ (800091c <LoggerService_LogBMPData+0x54>)
 8000900:	f7ff ff94 	bl	800082c <SDCard_WriteLine>
 8000904:	4603      	mov	r3, r0
 8000906:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

	return success;
 800090a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800090e:	4618      	mov	r0, r3
 8000910:	3788      	adds	r7, #136	@ 0x88
 8000912:	46bd      	mov	sp, r7
 8000914:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr
 800091c:	08012578 	.word	0x08012578

08000920 <LoggerService_ClearBmpLogFile>:
			data.x, data.y, data.z);
	return SDCard_WriteLine("gyro_log.txt", line);
}

bool LoggerService_ClearBmpLogFile()
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	return SDCard_ClearFile("bmp_log.txt");
 8000924:	4802      	ldr	r0, [pc, #8]	@ (8000930 <LoggerService_ClearBmpLogFile+0x10>)
 8000926:	f7ff ffab 	bl	8000880 <SDCard_ClearFile>
 800092a:	4603      	mov	r3, r0
}
 800092c:	4618      	mov	r0, r3
 800092e:	bd80      	pop	{r7, pc}
 8000930:	08012578 	.word	0x08012578

08000934 <FormatLogLine>:

static void FormatLogLine(char* buffer, size_t len, float p, float t, double a)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	@ 0x30
 8000938:	af06      	add	r7, sp, #24
 800093a:	6178      	str	r0, [r7, #20]
 800093c:	6139      	str	r1, [r7, #16]
 800093e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000942:	edc7 0a02 	vstr	s1, [r7, #8]
 8000946:	ed87 1b00 	vstr	d1, [r7]
    snprintf(buffer, len, "P=%.2f,T=%.2f,A=%.2f\r\n", p, t, a);
 800094a:	edd7 7a03 	vldr	s15, [r7, #12]
 800094e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000952:	edd7 6a02 	vldr	s13, [r7, #8]
 8000956:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800095a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800095e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000962:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000966:	ed8d 7b00 	vstr	d7, [sp]
 800096a:	4a04      	ldr	r2, [pc, #16]	@ (800097c <FormatLogLine+0x48>)
 800096c:	6939      	ldr	r1, [r7, #16]
 800096e:	6978      	ldr	r0, [r7, #20]
 8000970:	f00f f822 	bl	800f9b8 <sniprintf>
}
 8000974:	bf00      	nop
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	08012604 	.word	0x08012604

08000980 <_write>:
bool ReadBarometer();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	e00a      	b.n	80009a8 <_write+0x28>
		HAL_UART_Transmit(&huart3, (uint8_t*) &ptr[DataIdx], 1, 100);
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	68ba      	ldr	r2, [r7, #8]
 8000996:	18d1      	adds	r1, r2, r3
 8000998:	2364      	movs	r3, #100	@ 0x64
 800099a:	2201      	movs	r2, #1
 800099c:	4807      	ldr	r0, [pc, #28]	@ (80009bc <_write+0x3c>)
 800099e:	f006 fd19 	bl	80073d4 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	3301      	adds	r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697a      	ldr	r2, [r7, #20]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	dbf0      	blt.n	8000992 <_write+0x12>

	return len;
 80009b0:	687b      	ldr	r3, [r7, #4]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000858 	.word	0x20000858

080009c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c4:	f002 f9a0 	bl	8002d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c8:	f000 f8f4 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009cc:	f000 fb18 	bl	8001000 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009d0:	f000 fae6 	bl	8000fa0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80009d4:	f000 fa1c 	bl	8000e10 <MX_TIM3_Init>
  MX_I2C2_Init();
 80009d8:	f000 f95e 	bl	8000c98 <MX_I2C2_Init>
  MX_SPI2_Init();
 80009dc:	f000 f9da 	bl	8000d94 <MX_SPI2_Init>
  MX_TIM4_Init();
 80009e0:	f000 fa66 	bl	8000eb0 <MX_TIM4_Init>
  MX_FATFS_Init();
 80009e4:	f008 f804 	bl	80089f0 <MX_FATFS_Init>
  MX_SPI1_Init();
 80009e8:	f000 f996 	bl	8000d18 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Barometer_Init(&hi2c2);
 80009ec:	484a      	ldr	r0, [pc, #296]	@ (8000b18 <main+0x158>)
 80009ee:	f7ff fe47 	bl	8000680 <Barometer_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 80009f2:	484a      	ldr	r0, [pc, #296]	@ (8000b1c <main+0x15c>)
 80009f4:	f005 fac8 	bl	8005f88 <HAL_TIM_Base_Start_IT>
  if (!SDCard_Init()) {
 80009f8:	f7ff ff04 	bl	8000804 <SDCard_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	f083 0301 	eor.w	r3, r3, #1
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d003      	beq.n	8000a10 <main+0x50>
      printf("Failed to initialize SD card\r\n");
 8000a08:	4845      	ldr	r0, [pc, #276]	@ (8000b20 <main+0x160>)
 8000a0a:	f00f f933 	bl	800fc74 <puts>
 8000a0e:	e002      	b.n	8000a16 <main+0x56>
  } else {
      printf("SD card initialized\r\n");
 8000a10:	4844      	ldr	r0, [pc, #272]	@ (8000b24 <main+0x164>)
 8000a12:	f00f f92f 	bl	800fc74 <puts>
  }
  HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 8000a16:	2201      	movs	r2, #1
 8000a18:	4943      	ldr	r1, [pc, #268]	@ (8000b28 <main+0x168>)
 8000a1a:	4844      	ldr	r0, [pc, #272]	@ (8000b2c <main+0x16c>)
 8000a1c:	f006 fd63 	bl	80074e6 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a20:	f00a feea 	bl	800b7f8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  sdMutexHandle = osMutexNew(NULL);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f00b f825 	bl	800ba74 <osMutexNew>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4a40      	ldr	r2, [pc, #256]	@ (8000b30 <main+0x170>)
 8000a2e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  loggerQueueHandle  		 = osMessageQueueNew(10, sizeof(BarometerData), NULL);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2118      	movs	r1, #24
 8000a34:	200a      	movs	r0, #10
 8000a36:	f00b f965 	bl	800bd04 <osMessageQueueNew>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4a3d      	ldr	r2, [pc, #244]	@ (8000b34 <main+0x174>)
 8000a3e:	6013      	str	r3, [r2, #0]
  commQueueHandle    		 = osMessageQueueNew(10, sizeof(CommMessage), NULL);
 8000a40:	2200      	movs	r2, #0
 8000a42:	21a0      	movs	r1, #160	@ 0xa0
 8000a44:	200a      	movs	r0, #10
 8000a46:	f00b f95d 	bl	800bd04 <osMessageQueueNew>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	4a3a      	ldr	r2, [pc, #232]	@ (8000b38 <main+0x178>)
 8000a4e:	6013      	str	r3, [r2, #0]
  uartQueueHandle 	 		 = osMessageQueueNew(10, sizeof(UartMessage), NULL);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2180      	movs	r1, #128	@ 0x80
 8000a54:	200a      	movs	r0, #10
 8000a56:	f00b f955 	bl	800bd04 <osMessageQueueNew>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4a37      	ldr	r2, [pc, #220]	@ (8000b3c <main+0x17c>)
 8000a5e:	6013      	str	r3, [r2, #0]
  commandQueueHandle 		 = osMessageQueueNew(10, sizeof(char), NULL);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2101      	movs	r1, #1
 8000a64:	200a      	movs	r0, #10
 8000a66:	f00b f94d 	bl	800bd04 <osMessageQueueNew>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	4a34      	ldr	r2, [pc, #208]	@ (8000b40 <main+0x180>)
 8000a6e:	6013      	str	r3, [r2, #0]
  criticalCommandQueueHandle = osMessageQueueNew(10, sizeof(char), NULL);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2101      	movs	r1, #1
 8000a74:	200a      	movs	r0, #10
 8000a76:	f00b f945 	bl	800bd04 <osMessageQueueNew>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	4a31      	ldr	r2, [pc, #196]	@ (8000b44 <main+0x184>)
 8000a7e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a80:	4a31      	ldr	r2, [pc, #196]	@ (8000b48 <main+0x188>)
 8000a82:	2100      	movs	r1, #0
 8000a84:	4831      	ldr	r0, [pc, #196]	@ (8000b4c <main+0x18c>)
 8000a86:	f00a ff21 	bl	800b8cc <osThreadNew>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4a30      	ldr	r2, [pc, #192]	@ (8000b50 <main+0x190>)
 8000a8e:	6013      	str	r3, [r2, #0]

  /* creation of BaroTask */
  BaroTaskHandle = osThreadNew(StartBaroTask, NULL, &BaroTask_attributes);
 8000a90:	4a30      	ldr	r2, [pc, #192]	@ (8000b54 <main+0x194>)
 8000a92:	2100      	movs	r1, #0
 8000a94:	4830      	ldr	r0, [pc, #192]	@ (8000b58 <main+0x198>)
 8000a96:	f00a ff19 	bl	800b8cc <osThreadNew>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4a2f      	ldr	r2, [pc, #188]	@ (8000b5c <main+0x19c>)
 8000a9e:	6013      	str	r3, [r2, #0]

  /* creation of LoggerTask */
  LoggerTaskHandle = osThreadNew(StartLoggerTask, NULL, &LoggerTask_attributes);
 8000aa0:	4a2f      	ldr	r2, [pc, #188]	@ (8000b60 <main+0x1a0>)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	482f      	ldr	r0, [pc, #188]	@ (8000b64 <main+0x1a4>)
 8000aa6:	f00a ff11 	bl	800b8cc <osThreadNew>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4a2e      	ldr	r2, [pc, #184]	@ (8000b68 <main+0x1a8>)
 8000aae:	6013      	str	r3, [r2, #0]

  /* creation of CommTask */
  CommTaskHandle = osThreadNew(StartCommTask, NULL, &CommTask_attributes);
 8000ab0:	4a2e      	ldr	r2, [pc, #184]	@ (8000b6c <main+0x1ac>)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	482e      	ldr	r0, [pc, #184]	@ (8000b70 <main+0x1b0>)
 8000ab6:	f00a ff09 	bl	800b8cc <osThreadNew>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4a2d      	ldr	r2, [pc, #180]	@ (8000b74 <main+0x1b4>)
 8000abe:	6013      	str	r3, [r2, #0]

  /* creation of BuzzerTask */
  BuzzerTaskHandle = osThreadNew(StartBuzzerTask, NULL, &BuzzerTask_attributes);
 8000ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8000b78 <main+0x1b8>)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	482d      	ldr	r0, [pc, #180]	@ (8000b7c <main+0x1bc>)
 8000ac6:	f00a ff01 	bl	800b8cc <osThreadNew>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4a2c      	ldr	r2, [pc, #176]	@ (8000b80 <main+0x1c0>)
 8000ace:	6013      	str	r3, [r2, #0]

  /* creation of CommandTask */
  CommandTaskHandle = osThreadNew(StartCommandTask, NULL, &CommandTask_attributes);
 8000ad0:	4a2c      	ldr	r2, [pc, #176]	@ (8000b84 <main+0x1c4>)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	482c      	ldr	r0, [pc, #176]	@ (8000b88 <main+0x1c8>)
 8000ad6:	f00a fef9 	bl	800b8cc <osThreadNew>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4a2b      	ldr	r2, [pc, #172]	@ (8000b8c <main+0x1cc>)
 8000ade:	6013      	str	r3, [r2, #0]

  /* creation of CriticalCommand */
  CriticalCommandHandle = osThreadNew(StartCriticalCommandTask, NULL, &CriticalCommand_attributes);
 8000ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8000b90 <main+0x1d0>)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	482b      	ldr	r0, [pc, #172]	@ (8000b94 <main+0x1d4>)
 8000ae6:	f00a fef1 	bl	800b8cc <osThreadNew>
 8000aea:	4603      	mov	r3, r0
 8000aec:	4a2a      	ldr	r2, [pc, #168]	@ (8000b98 <main+0x1d8>)
 8000aee:	6013      	str	r3, [r2, #0]

  /* creation of GyroTask */
  GyroTaskHandle = osThreadNew(StartGyroTask, NULL, &GyroTask_attributes);
 8000af0:	4a2a      	ldr	r2, [pc, #168]	@ (8000b9c <main+0x1dc>)
 8000af2:	2100      	movs	r1, #0
 8000af4:	482a      	ldr	r0, [pc, #168]	@ (8000ba0 <main+0x1e0>)
 8000af6:	f00a fee9 	bl	800b8cc <osThreadNew>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4a29      	ldr	r2, [pc, #164]	@ (8000ba4 <main+0x1e4>)
 8000afe:	6013      	str	r3, [r2, #0]

  /* creation of AccTask */
  AccTaskHandle = osThreadNew(StartAccTask, NULL, &AccTask_attributes);
 8000b00:	4a29      	ldr	r2, [pc, #164]	@ (8000ba8 <main+0x1e8>)
 8000b02:	2100      	movs	r1, #0
 8000b04:	4829      	ldr	r0, [pc, #164]	@ (8000bac <main+0x1ec>)
 8000b06:	f00a fee1 	bl	800b8cc <osThreadNew>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4a28      	ldr	r2, [pc, #160]	@ (8000bb0 <main+0x1f0>)
 8000b0e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b10:	f00a fea6 	bl	800b860 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <main+0x154>
 8000b18:	200006a4 	.word	0x200006a4
 8000b1c:	200007c0 	.word	0x200007c0
 8000b20:	08012688 	.word	0x08012688
 8000b24:	080126a8 	.word	0x080126a8
 8000b28:	2000091c 	.word	0x2000091c
 8000b2c:	20000858 	.word	0x20000858
 8000b30:	20000918 	.word	0x20000918
 8000b34:	20000904 	.word	0x20000904
 8000b38:	20000908 	.word	0x20000908
 8000b3c:	2000090c 	.word	0x2000090c
 8000b40:	20000910 	.word	0x20000910
 8000b44:	20000914 	.word	0x20000914
 8000b48:	0801284c 	.word	0x0801284c
 8000b4c:	08001521 	.word	0x08001521
 8000b50:	200008e0 	.word	0x200008e0
 8000b54:	08012870 	.word	0x08012870
 8000b58:	08001531 	.word	0x08001531
 8000b5c:	200008e4 	.word	0x200008e4
 8000b60:	08012894 	.word	0x08012894
 8000b64:	08001569 	.word	0x08001569
 8000b68:	200008e8 	.word	0x200008e8
 8000b6c:	080128b8 	.word	0x080128b8
 8000b70:	080015dd 	.word	0x080015dd
 8000b74:	200008ec 	.word	0x200008ec
 8000b78:	080128dc 	.word	0x080128dc
 8000b7c:	08001701 	.word	0x08001701
 8000b80:	200008f0 	.word	0x200008f0
 8000b84:	08012900 	.word	0x08012900
 8000b88:	08001791 	.word	0x08001791
 8000b8c:	200008f4 	.word	0x200008f4
 8000b90:	08012924 	.word	0x08012924
 8000b94:	080017f9 	.word	0x080017f9
 8000b98:	200008f8 	.word	0x200008f8
 8000b9c:	08012948 	.word	0x08012948
 8000ba0:	0800185d 	.word	0x0800185d
 8000ba4:	200008fc 	.word	0x200008fc
 8000ba8:	0801296c 	.word	0x0801296c
 8000bac:	080018c9 	.word	0x080018c9
 8000bb0:	20000900 	.word	0x20000900

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b094      	sub	sp, #80	@ 0x50
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	2234      	movs	r2, #52	@ 0x34
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f00f f85e 	bl	800fc84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bd8:	f003 fa26 	bl	8004028 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8000c90 <SystemClock_Config+0xdc>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be0:	4a2b      	ldr	r2, [pc, #172]	@ (8000c90 <SystemClock_Config+0xdc>)
 8000be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be8:	4b29      	ldr	r3, [pc, #164]	@ (8000c90 <SystemClock_Config+0xdc>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bf4:	4b27      	ldr	r3, [pc, #156]	@ (8000c94 <SystemClock_Config+0xe0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bfc:	4a25      	ldr	r2, [pc, #148]	@ (8000c94 <SystemClock_Config+0xe0>)
 8000bfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	4b23      	ldr	r3, [pc, #140]	@ (8000c94 <SystemClock_Config+0xe0>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c14:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c22:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c24:	2304      	movs	r3, #4
 8000c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000c28:	2360      	movs	r3, #96	@ 0x60
 8000c2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c30:	2302      	movs	r3, #2
 8000c32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 fa53 	bl	80040e8 <HAL_RCC_OscConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c48:	f000 fe74 	bl	8001934 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c4c:	f003 f9fc 	bl	8004048 <HAL_PWREx_EnableOverDrive>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c56:	f000 fe6d 	bl	8001934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5a:	230f      	movs	r3, #15
 8000c5c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	2103      	movs	r1, #3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f003 fce4 	bl	8004644 <HAL_RCC_ClockConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c82:	f000 fe57 	bl	8001934 <Error_Handler>
  }
}
 8000c86:	bf00      	nop
 8000c88:	3750      	adds	r7, #80	@ 0x50
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40007000 	.word	0x40007000

08000c98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d10 <MX_I2C2_Init+0x78>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d14 <MX_I2C2_Init+0x7c>)
 8000ca6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cae:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000cba:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cd2:	480e      	ldr	r0, [pc, #56]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000cd4:	f002 fb84 	bl	80033e0 <HAL_I2C_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cde:	f000 fe29 	bl	8001934 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4809      	ldr	r0, [pc, #36]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000ce6:	f003 f907 	bl	8003ef8 <HAL_I2CEx_ConfigAnalogFilter>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000cf0:	f000 fe20 	bl	8001934 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_I2C2_Init+0x74>)
 8000cf8:	f003 f949 	bl	8003f8e <HAL_I2CEx_ConfigDigitalFilter>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d02:	f000 fe17 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200006a4 	.word	0x200006a4
 8000d10:	40005800 	.word	0x40005800
 8000d14:	20303e5d 	.word	0x20303e5d

08000d18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <MX_SPI1_Init+0x74>)
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d90 <MX_SPI1_Init+0x78>)
 8000d20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <MX_SPI1_Init+0x74>)
 8000d24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d2a:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <MX_SPI1_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d30:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <MX_SPI1_Init+0x74>)
 8000d32:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000d36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d38:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <MX_SPI1_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <MX_SPI1_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d44:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_SPI1_Init+0x74>)
 8000d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <MX_SPI1_Init+0x74>)
 8000d4e:	2238      	movs	r2, #56	@ 0x38
 8000d50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <MX_SPI1_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <MX_SPI1_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <MX_SPI1_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d64:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <MX_SPI1_Init+0x74>)
 8000d66:	2207      	movs	r2, #7
 8000d68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <MX_SPI1_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <MX_SPI1_Init+0x74>)
 8000d72:	2208      	movs	r2, #8
 8000d74:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_SPI1_Init+0x74>)
 8000d78:	f004 fae4 	bl	8005344 <HAL_SPI_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d82:	f000 fdd7 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200006f8 	.word	0x200006f8
 8000d90:	40013000 	.word	0x40013000

08000d94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d98:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e0c <MX_SPI2_Init+0x78>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000da0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000da4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000da6:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dac:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000dae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000db2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000db4:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dba:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000dc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dc6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000dca:	2230      	movs	r2, #48	@ 0x30
 8000dcc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000de0:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000de2:	2207      	movs	r2, #7
 8000de4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000dee:	2208      	movs	r2, #8
 8000df0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000df4:	f004 faa6 	bl	8005344 <HAL_SPI_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000dfe:	f000 fd99 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2000075c 	.word	0x2000075c
 8000e0c:	40003800 	.word	0x40003800

08000e10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea8 <MX_TIM3_Init+0x98>)
 8000e30:	4a1e      	ldr	r2, [pc, #120]	@ (8000eac <MX_TIM3_Init+0x9c>)
 8000e32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000;
 8000e34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <MX_TIM3_Init+0x98>)
 8000e36:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000e3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <MX_TIM3_Init+0x98>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1500;
 8000e42:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <MX_TIM3_Init+0x98>)
 8000e44:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000e48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <MX_TIM3_Init+0x98>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e50:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <MX_TIM3_Init+0x98>)
 8000e52:	2280      	movs	r2, #128	@ 0x80
 8000e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e56:	4814      	ldr	r0, [pc, #80]	@ (8000ea8 <MX_TIM3_Init+0x98>)
 8000e58:	f005 f83e 	bl	8005ed8 <HAL_TIM_Base_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000e62:	f000 fd67 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	4619      	mov	r1, r3
 8000e72:	480d      	ldr	r0, [pc, #52]	@ (8000ea8 <MX_TIM3_Init+0x98>)
 8000e74:	f005 fcf8 	bl	8006868 <HAL_TIM_ConfigClockSource>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000e7e:	f000 fd59 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	@ (8000ea8 <MX_TIM3_Init+0x98>)
 8000e90:	f006 f9a6 	bl	80071e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000e9a:	f000 fd4b 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	3720      	adds	r7, #32
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200007c0 	.word	0x200007c0
 8000eac:	40000400 	.word	0x40000400

08000eb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	@ 0x38
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]
 8000ede:	615a      	str	r2, [r3, #20]
 8000ee0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8000f9c <MX_TIM4_Init+0xec>)
 8000ee6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000eea:	220f      	movs	r2, #15
 8000eec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eee:	4b2a      	ldr	r3, [pc, #168]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000ef4:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000ef6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000efa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efc:	4b26      	ldr	r3, [pc, #152]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f02:	4b25      	ldr	r3, [pc, #148]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f08:	4823      	ldr	r0, [pc, #140]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000f0a:	f004 ffe5 	bl	8005ed8 <HAL_TIM_Base_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000f14:	f000 fd0e 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f22:	4619      	mov	r1, r3
 8000f24:	481c      	ldr	r0, [pc, #112]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000f26:	f005 fc9f 	bl	8006868 <HAL_TIM_ConfigClockSource>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000f30:	f000 fd00 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f34:	4818      	ldr	r0, [pc, #96]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000f36:	f005 f89f 	bl	8006078 <HAL_TIM_PWM_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000f40:	f000 fcf8 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4619      	mov	r1, r3
 8000f52:	4811      	ldr	r0, [pc, #68]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000f54:	f006 f944 	bl	80071e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000f5e:	f000 fce9 	bl	8001934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f62:	2360      	movs	r3, #96	@ 0x60
 8000f64:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f72:	463b      	mov	r3, r7
 8000f74:	2200      	movs	r2, #0
 8000f76:	4619      	mov	r1, r3
 8000f78:	4807      	ldr	r0, [pc, #28]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000f7a:	f005 fb61 	bl	8006640 <HAL_TIM_PWM_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000f84:	f000 fcd6 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f88:	4803      	ldr	r0, [pc, #12]	@ (8000f98 <MX_TIM4_Init+0xe8>)
 8000f8a:	f000 fe4d 	bl	8001c28 <HAL_TIM_MspPostInit>

}
 8000f8e:	bf00      	nop
 8000f90:	3738      	adds	r7, #56	@ 0x38
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2000080c 	.word	0x2000080c
 8000f9c:	40000800 	.word	0x40000800

08000fa0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fa6:	4a15      	ldr	r2, [pc, #84]	@ (8000ffc <MX_USART3_UART_Init+0x5c>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fe4:	f006 f9a8 	bl	8007338 <HAL_UART_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fee:	f000 fca1 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000858 	.word	0x20000858
 8000ffc:	40004800 	.word	0x40004800

08001000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08c      	sub	sp, #48	@ 0x30
 8001004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	4b81      	ldr	r3, [pc, #516]	@ (800121c <MX_GPIO_Init+0x21c>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4a80      	ldr	r2, [pc, #512]	@ (800121c <MX_GPIO_Init+0x21c>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4b7e      	ldr	r3, [pc, #504]	@ (800121c <MX_GPIO_Init+0x21c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	61bb      	str	r3, [r7, #24]
 800102c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800102e:	4b7b      	ldr	r3, [pc, #492]	@ (800121c <MX_GPIO_Init+0x21c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a7a      	ldr	r2, [pc, #488]	@ (800121c <MX_GPIO_Init+0x21c>)
 8001034:	f043 0320 	orr.w	r3, r3, #32
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b78      	ldr	r3, [pc, #480]	@ (800121c <MX_GPIO_Init+0x21c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0320 	and.w	r3, r3, #32
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001046:	4b75      	ldr	r3, [pc, #468]	@ (800121c <MX_GPIO_Init+0x21c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a74      	ldr	r2, [pc, #464]	@ (800121c <MX_GPIO_Init+0x21c>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b72      	ldr	r3, [pc, #456]	@ (800121c <MX_GPIO_Init+0x21c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b6f      	ldr	r3, [pc, #444]	@ (800121c <MX_GPIO_Init+0x21c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a6e      	ldr	r2, [pc, #440]	@ (800121c <MX_GPIO_Init+0x21c>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b6c      	ldr	r3, [pc, #432]	@ (800121c <MX_GPIO_Init+0x21c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	4b69      	ldr	r3, [pc, #420]	@ (800121c <MX_GPIO_Init+0x21c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	4a68      	ldr	r2, [pc, #416]	@ (800121c <MX_GPIO_Init+0x21c>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6313      	str	r3, [r2, #48]	@ 0x30
 8001082:	4b66      	ldr	r3, [pc, #408]	@ (800121c <MX_GPIO_Init+0x21c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108e:	4b63      	ldr	r3, [pc, #396]	@ (800121c <MX_GPIO_Init+0x21c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a62      	ldr	r2, [pc, #392]	@ (800121c <MX_GPIO_Init+0x21c>)
 8001094:	f043 0308 	orr.w	r3, r3, #8
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b60      	ldr	r3, [pc, #384]	@ (800121c <MX_GPIO_Init+0x21c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010a6:	4b5d      	ldr	r3, [pc, #372]	@ (800121c <MX_GPIO_Init+0x21c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a5c      	ldr	r2, [pc, #368]	@ (800121c <MX_GPIO_Init+0x21c>)
 80010ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b5a      	ldr	r3, [pc, #360]	@ (800121c <MX_GPIO_Init+0x21c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|SD_CS_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f244 0183 	movw	r1, #16515	@ 0x4083
 80010c4:	4856      	ldr	r0, [pc, #344]	@ (8001220 <MX_GPIO_Init+0x220>)
 80010c6:	f002 f959 	bl	800337c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2140      	movs	r1, #64	@ 0x40
 80010ce:	4855      	ldr	r0, [pc, #340]	@ (8001224 <MX_GPIO_Init+0x224>)
 80010d0:	f002 f954 	bl	800337c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4619      	mov	r1, r3
 80010ea:	484f      	ldr	r0, [pc, #316]	@ (8001228 <MX_GPIO_Init+0x228>)
 80010ec:	f001 ff9a 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010f0:	2332      	movs	r3, #50	@ 0x32
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001100:	230b      	movs	r3, #11
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4847      	ldr	r0, [pc, #284]	@ (8001228 <MX_GPIO_Init+0x228>)
 800110c:	f001 ff8a 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001110:	2386      	movs	r3, #134	@ 0x86
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111c:	2303      	movs	r3, #3
 800111e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001120:	230b      	movs	r3, #11
 8001122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	4840      	ldr	r0, [pc, #256]	@ (800122c <MX_GPIO_Init+0x22c>)
 800112c:	f001 ff7a 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin SD_CS_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|SD_CS_Pin|LD3_Pin|LD2_Pin;
 8001130:	f244 0383 	movw	r3, #16515	@ 0x4083
 8001134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	4835      	ldr	r0, [pc, #212]	@ (8001220 <MX_GPIO_Init+0x220>)
 800114a:	f001 ff6b 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800114e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001160:	230b      	movs	r3, #11
 8001162:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	482d      	ldr	r0, [pc, #180]	@ (8001220 <MX_GPIO_Init+0x220>)
 800116c:	f001 ff5a 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001170:	2340      	movs	r3, #64	@ 0x40
 8001172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	4827      	ldr	r0, [pc, #156]	@ (8001224 <MX_GPIO_Init+0x224>)
 8001188:	f001 ff4c 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800118c:	2380      	movs	r3, #128	@ 0x80
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4619      	mov	r1, r3
 800119e:	4821      	ldr	r0, [pc, #132]	@ (8001224 <MX_GPIO_Init+0x224>)
 80011a0:	f001 ff40 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011a4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011b6:	230a      	movs	r3, #10
 80011b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4619      	mov	r1, r3
 80011c0:	481a      	ldr	r0, [pc, #104]	@ (800122c <MX_GPIO_Init+0x22c>)
 80011c2:	f001 ff2f 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	4814      	ldr	r0, [pc, #80]	@ (800122c <MX_GPIO_Init+0x22c>)
 80011dc:	f001 ff22 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011e0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011f2:	230b      	movs	r3, #11
 80011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4809      	ldr	r0, [pc, #36]	@ (8001224 <MX_GPIO_Init+0x224>)
 80011fe:	f001 ff11 	bl	8003024 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2105      	movs	r1, #5
 8001206:	2028      	movs	r0, #40	@ 0x28
 8001208:	f001 fe50 	bl	8002eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800120c:	2028      	movs	r0, #40	@ 0x28
 800120e:	f001 fe69 	bl	8002ee4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001212:	bf00      	nop
 8001214:	3730      	adds	r7, #48	@ 0x30
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40020400 	.word	0x40020400
 8001224:	40021800 	.word	0x40021800
 8001228:	40020800 	.word	0x40020800
 800122c:	40020000 	.word	0x40020000

08001230 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	static GPIO_PinState led_state = GPIO_PIN_RESET;

	if (htim->Instance == TIM3) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a2d      	ldr	r2, [pc, #180]	@ (80012f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d153      	bne.n	80012ea <HAL_TIM_PeriodElapsedCallback+0xba>

		led_state = (led_state == GPIO_PIN_RESET) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8001242:	4b2d      	ldr	r3, [pc, #180]	@ (80012f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	bf0c      	ite	eq
 800124a:	2301      	moveq	r3, #1
 800124c:	2300      	movne	r3, #0
 800124e:	b2db      	uxtb	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	4b29      	ldr	r3, [pc, #164]	@ (80012f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001254:	701a      	strb	r2, [r3, #0]

		switch(sat_location)
 8001256:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b03      	cmp	r3, #3
 800125c:	d02e      	beq.n	80012bc <HAL_TIM_PeriodElapsedCallback+0x8c>
 800125e:	2b03      	cmp	r3, #3
 8001260:	dc43      	bgt.n	80012ea <HAL_TIM_PeriodElapsedCallback+0xba>
 8001262:	2b01      	cmp	r3, #1
 8001264:	d002      	beq.n	800126c <HAL_TIM_PeriodElapsedCallback+0x3c>
 8001266:	2b02      	cmp	r3, #2
 8001268:	d013      	beq.n	8001292 <HAL_TIM_PeriodElapsedCallback+0x62>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, led_state);
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, led_state);
				  break;
		  }
	}
}
 800126a:	e03e      	b.n	80012ea <HAL_TIM_PeriodElapsedCallback+0xba>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, led_state);
 800126c:	4b22      	ldr	r3, [pc, #136]	@ (80012f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001276:	4822      	ldr	r0, [pc, #136]	@ (8001300 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001278:	f002 f880 	bl	800337c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	2180      	movs	r1, #128	@ 0x80
 8001280:	481f      	ldr	r0, [pc, #124]	@ (8001300 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001282:	f002 f87b 	bl	800337c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2101      	movs	r1, #1
 800128a:	481d      	ldr	r0, [pc, #116]	@ (8001300 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800128c:	f002 f876 	bl	800337c <HAL_GPIO_WritePin>
				  break;
 8001290:	e02b      	b.n	80012ea <HAL_TIM_PeriodElapsedCallback+0xba>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, led_state);
 8001292:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800129c:	4818      	ldr	r0, [pc, #96]	@ (8001300 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800129e:	f002 f86d 	bl	800337c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, led_state);
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	2180      	movs	r1, #128	@ 0x80
 80012aa:	4815      	ldr	r0, [pc, #84]	@ (8001300 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80012ac:	f002 f866 	bl	800337c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2101      	movs	r1, #1
 80012b4:	4812      	ldr	r0, [pc, #72]	@ (8001300 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80012b6:	f002 f861 	bl	800337c <HAL_GPIO_WritePin>
				  break;
 80012ba:	e016      	b.n	80012ea <HAL_TIM_PeriodElapsedCallback+0xba>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, led_state);
 80012bc:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012c6:	480e      	ldr	r0, [pc, #56]	@ (8001300 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80012c8:	f002 f858 	bl	800337c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, led_state);
 80012cc:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	2180      	movs	r1, #128	@ 0x80
 80012d4:	480a      	ldr	r0, [pc, #40]	@ (8001300 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80012d6:	f002 f851 	bl	800337c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, led_state);
 80012da:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	2101      	movs	r1, #1
 80012e2:	4807      	ldr	r0, [pc, #28]	@ (8001300 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80012e4:	f002 f84a 	bl	800337c <HAL_GPIO_WritePin>
				  break;
 80012e8:	bf00      	nop
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40000400 	.word	0x40000400
 80012f8:	2000091d 	.word	0x2000091d
 80012fc:	20000001 	.word	0x20000001
 8001300:	40020400 	.word	0x40020400

08001304 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_pin == USER_Btn_Pin)
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001314:	d10d      	bne.n	8001332 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		if(sat_location < 3)
 8001316:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d806      	bhi.n	800132c <HAL_GPIO_EXTI_Callback+0x28>
			sat_location++;
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001328:	701a      	strb	r2, [r3, #0]
		else
			sat_location = 1;
	}
}
 800132a:	e002      	b.n	8001332 <HAL_GPIO_EXTI_Callback+0x2e>
			sat_location = 1;
 800132c:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <HAL_GPIO_EXTI_Callback+0x3c>)
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000001 	.word	0x20000001

08001344 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a13      	ldr	r2, [pc, #76]	@ (80013a0 <HAL_UART_RxCpltCallback+0x5c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d11f      	bne.n	8001396 <HAL_UART_RxCpltCallback+0x52>
	{
		switch(rx_byte)
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <HAL_UART_RxCpltCallback+0x60>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b72      	cmp	r3, #114	@ 0x72
 800135c:	d006      	beq.n	800136c <HAL_UART_RxCpltCallback+0x28>
 800135e:	2b72      	cmp	r3, #114	@ 0x72
 8001360:	dc14      	bgt.n	800138c <HAL_UART_RxCpltCallback+0x48>
 8001362:	2b62      	cmp	r3, #98	@ 0x62
 8001364:	d002      	beq.n	800136c <HAL_UART_RxCpltCallback+0x28>
 8001366:	2b65      	cmp	r3, #101	@ 0x65
 8001368:	d008      	beq.n	800137c <HAL_UART_RxCpltCallback+0x38>
 800136a:	e00f      	b.n	800138c <HAL_UART_RxCpltCallback+0x48>
		{
			case 'r': //read bpm
			case 'b': //buzzer
				osMessageQueuePut(criticalCommandQueueHandle, &rx_byte, 0, 0);
 800136c:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <HAL_UART_RxCpltCallback+0x64>)
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	2300      	movs	r3, #0
 8001372:	2200      	movs	r2, #0
 8001374:	490b      	ldr	r1, [pc, #44]	@ (80013a4 <HAL_UART_RxCpltCallback+0x60>)
 8001376:	f00a fd4b 	bl	800be10 <osMessageQueuePut>
				break;
 800137a:	e007      	b.n	800138c <HAL_UART_RxCpltCallback+0x48>
			case 'e': // erase log
				osMessageQueuePut(commandQueueHandle, &rx_byte, 0, 0);
 800137c:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <HAL_UART_RxCpltCallback+0x68>)
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	2300      	movs	r3, #0
 8001382:	2200      	movs	r2, #0
 8001384:	4907      	ldr	r1, [pc, #28]	@ (80013a4 <HAL_UART_RxCpltCallback+0x60>)
 8001386:	f00a fd43 	bl	800be10 <osMessageQueuePut>
				break;
 800138a:	bf00      	nop
		}

		HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 800138c:	2201      	movs	r2, #1
 800138e:	4905      	ldr	r1, [pc, #20]	@ (80013a4 <HAL_UART_RxCpltCallback+0x60>)
 8001390:	4807      	ldr	r0, [pc, #28]	@ (80013b0 <HAL_UART_RxCpltCallback+0x6c>)
 8001392:	f006 f8a8 	bl	80074e6 <HAL_UART_Receive_IT>
	}
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40004800 	.word	0x40004800
 80013a4:	2000091c 	.word	0x2000091c
 80013a8:	20000914 	.word	0x20000914
 80013ac:	20000910 	.word	0x20000910
 80013b0:	20000858 	.word	0x20000858

080013b4 <ReadBarometer>:

bool ReadBarometer()
{
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b0ae      	sub	sp, #184	@ 0xb8
 80013b8:	af00      	add	r7, sp, #0
	  CommMessage msg;
	  BarometerData data;
	  if (!Barometer_Read(&data)) {
 80013ba:	463b      	mov	r3, r7
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f9bf 	bl	8000740 <Barometer_Read>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f083 0301 	eor.w	r3, r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <ReadBarometer+0x1e>
		  return false;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e01a      	b.n	8001408 <ReadBarometer+0x54>
	  }

	  msg.type = MSG_TYPE_BAROMETER;
 80013d2:	2300      	movs	r3, #0
 80013d4:	763b      	strb	r3, [r7, #24]
	  msg.payload.baro = data;
 80013d6:	f107 0420 	add.w	r4, r7, #32
 80013da:	463d      	mov	r5, r7
 80013dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013e4:	e884 0003 	stmia.w	r4, {r0, r1}
	  osMessageQueuePut(commQueueHandle, &msg, 0, 0);
 80013e8:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <ReadBarometer+0x5c>)
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	f107 0118 	add.w	r1, r7, #24
 80013f0:	2300      	movs	r3, #0
 80013f2:	2200      	movs	r2, #0
 80013f4:	f00a fd0c 	bl	800be10 <osMessageQueuePut>
	  osMessageQueuePut(loggerQueueHandle, &data, 0, 0);
 80013f8:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <ReadBarometer+0x60>)
 80013fa:	6818      	ldr	r0, [r3, #0]
 80013fc:	4639      	mov	r1, r7
 80013fe:	2300      	movs	r3, #0
 8001400:	2200      	movs	r2, #0
 8001402:	f00a fd05 	bl	800be10 <osMessageQueuePut>
	  return true;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	37b8      	adds	r7, #184	@ 0xb8
 800140c:	46bd      	mov	sp, r7
 800140e:	bdb0      	pop	{r4, r5, r7, pc}
 8001410:	20000908 	.word	0x20000908
 8001414:	20000904 	.word	0x20000904

08001418 <ReadAccelerometer>:

bool ReadAccelerometer() //m/s^2
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0a8      	sub	sp, #160	@ 0xa0
 800141c:	af00      	add	r7, sp, #0
	CommMessage msg;
	msg.type = MSG_TYPE_ACCEL;
 800141e:	2301      	movs	r3, #1
 8001420:	703b      	strb	r3, [r7, #0]

	switch(sat_location)
 8001422:	4b16      	ldr	r3, [pc, #88]	@ (800147c <ReadAccelerometer+0x64>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b03      	cmp	r3, #3
 8001428:	d014      	beq.n	8001454 <ReadAccelerometer+0x3c>
 800142a:	2b03      	cmp	r3, #3
 800142c:	dc1a      	bgt.n	8001464 <ReadAccelerometer+0x4c>
 800142e:	2b01      	cmp	r3, #1
 8001430:	d002      	beq.n	8001438 <ReadAccelerometer+0x20>
 8001432:	2b02      	cmp	r3, #2
 8001434:	d007      	beq.n	8001446 <ReadAccelerometer+0x2e>
 8001436:	e015      	b.n	8001464 <ReadAccelerometer+0x4c>
	{
		case 1:  // Em terra
			msg.payload.accel.x = 0.01f; // ruído
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <ReadAccelerometer+0x68>)
 800143a:	60bb      	str	r3, [r7, #8]
			msg.payload.accel.y = 0.02f; // ruído
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <ReadAccelerometer+0x6c>)
 800143e:	60fb      	str	r3, [r7, #12]
			msg.payload.accel.z = 9.80f; // gravidade da terra
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <ReadAccelerometer+0x70>)
 8001442:	613b      	str	r3, [r7, #16]
			break;
 8001444:	e00e      	b.n	8001464 <ReadAccelerometer+0x4c>

		case 2:  // Lançamento
			msg.payload.accel.x = 0.10f;  // vibração do foguete
 8001446:	4b11      	ldr	r3, [pc, #68]	@ (800148c <ReadAccelerometer+0x74>)
 8001448:	60bb      	str	r3, [r7, #8]
			msg.payload.accel.y = 0.05f;  // vibração do foguete
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <ReadAccelerometer+0x78>)
 800144c:	60fb      	str	r3, [r7, #12]
			msg.payload.accel.z = 30.00f; // aceleração para escapar da gravidade
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <ReadAccelerometer+0x7c>)
 8001450:	613b      	str	r3, [r7, #16]
			break;
 8001452:	e007      	b.n	8001464 <ReadAccelerometer+0x4c>

		case 3:  // Órbita
			msg.payload.accel.x = 0.01f; // ruído
 8001454:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <ReadAccelerometer+0x68>)
 8001456:	60bb      	str	r3, [r7, #8]
			msg.payload.accel.y = 0.01f; // ruído
 8001458:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <ReadAccelerometer+0x68>)
 800145a:	60fb      	str	r3, [r7, #12]
			msg.payload.accel.z = 0.00f; // microgravidade
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
			break;
 8001462:	bf00      	nop
	}

	osMessageQueuePut(commQueueHandle, &msg, 0, 0);
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <ReadAccelerometer+0x80>)
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	4639      	mov	r1, r7
 800146a:	2300      	movs	r3, #0
 800146c:	2200      	movs	r2, #0
 800146e:	f00a fccf 	bl	800be10 <osMessageQueuePut>
	return true;
 8001472:	2301      	movs	r3, #1
}
 8001474:	4618      	mov	r0, r3
 8001476:	37a0      	adds	r7, #160	@ 0xa0
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000001 	.word	0x20000001
 8001480:	3c23d70a 	.word	0x3c23d70a
 8001484:	3ca3d70a 	.word	0x3ca3d70a
 8001488:	411ccccd 	.word	0x411ccccd
 800148c:	3dcccccd 	.word	0x3dcccccd
 8001490:	3d4ccccd 	.word	0x3d4ccccd
 8001494:	41f00000 	.word	0x41f00000
 8001498:	20000908 	.word	0x20000908

0800149c <ReadGyroscope>:

bool ReadGyroscope() // º/s
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b0a8      	sub	sp, #160	@ 0xa0
 80014a0:	af00      	add	r7, sp, #0
	CommMessage msg;
	msg.type = MSG_TYPE_GYRO;
 80014a2:	2302      	movs	r3, #2
 80014a4:	703b      	strb	r3, [r7, #0]

	switch(sat_location)
 80014a6:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <ReadGyroscope+0x68>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d016      	beq.n	80014dc <ReadGyroscope+0x40>
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	dc1c      	bgt.n	80014ec <ReadGyroscope+0x50>
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d002      	beq.n	80014bc <ReadGyroscope+0x20>
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d009      	beq.n	80014ce <ReadGyroscope+0x32>
 80014ba:	e017      	b.n	80014ec <ReadGyroscope+0x50>
	{
		case 1:  // Em terra
			msg.payload.gyro.x = 0.00f; // estático
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
			msg.payload.gyro.y = 0.00f; // estático
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
			msg.payload.gyro.z = 0.01f; // ruído
 80014c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <ReadGyroscope+0x6c>)
 80014ca:	613b      	str	r3, [r7, #16]
			break;
 80014cc:	e00e      	b.n	80014ec <ReadGyroscope+0x50>

		case 2:  // Lançamento
			msg.payload.gyro.x = 0.10f; // vibrações do foguete
 80014ce:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <ReadGyroscope+0x70>)
 80014d0:	60bb      	str	r3, [r7, #8]
			msg.payload.gyro.y = 0.05f; // vibrações do foguete
 80014d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <ReadGyroscope+0x74>)
 80014d4:	60fb      	str	r3, [r7, #12]
			msg.payload.gyro.z = 0.20f; // giro leve durante o lançamento
 80014d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <ReadGyroscope+0x78>)
 80014d8:	613b      	str	r3, [r7, #16]
			break;
 80014da:	e007      	b.n	80014ec <ReadGyroscope+0x50>

		case 3:  // Órbita
			msg.payload.gyro.x = 0.50f; // rotação lenta natural
 80014dc:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80014e0:	60bb      	str	r3, [r7, #8]
			msg.payload.gyro.y = 0.30f; // rotação lenta natural
 80014e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <ReadGyroscope+0x7c>)
 80014e4:	60fb      	str	r3, [r7, #12]
			msg.payload.gyro.z = 0.20f; // rotação lenta natural
 80014e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <ReadGyroscope+0x78>)
 80014e8:	613b      	str	r3, [r7, #16]
			break;
 80014ea:	bf00      	nop
	}

	osMessageQueuePut(commQueueHandle, &msg, 0, 0);
 80014ec:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <ReadGyroscope+0x80>)
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	4639      	mov	r1, r7
 80014f2:	2300      	movs	r3, #0
 80014f4:	2200      	movs	r2, #0
 80014f6:	f00a fc8b 	bl	800be10 <osMessageQueuePut>
	return true;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	37a0      	adds	r7, #160	@ 0xa0
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000001 	.word	0x20000001
 8001508:	3c23d70a 	.word	0x3c23d70a
 800150c:	3dcccccd 	.word	0x3dcccccd
 8001510:	3d4ccccd 	.word	0x3d4ccccd
 8001514:	3e4ccccd 	.word	0x3e4ccccd
 8001518:	3e99999a 	.word	0x3e99999a
 800151c:	20000908 	.word	0x20000908

08001520 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001528:	2001      	movs	r0, #1
 800152a:	f00a fa75 	bl	800ba18 <osDelay>
 800152e:	e7fb      	b.n	8001528 <StartDefaultTask+0x8>

08001530 <StartBaroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBaroTask */
void StartBaroTask(void *argument)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBaroTask */
  /* Infinite loop */
  for(;;)
  {
	  if(!ReadBarometer())
 8001538:	f7ff ff3c 	bl	80013b4 <ReadBarometer>
 800153c:	4603      	mov	r3, r0
 800153e:	f083 0301 	eor.w	r3, r3, #1
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <StartBaroTask+0x28>
	  {
		  printf("Failed to read from barometer.\r\n");
 8001548:	4806      	ldr	r0, [pc, #24]	@ (8001564 <StartBaroTask+0x34>)
 800154a:	f00e fb93 	bl	800fc74 <puts>
		  osDelay(1000);
 800154e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001552:	f00a fa61 	bl	800ba18 <osDelay>
		  continue;
 8001556:	e003      	b.n	8001560 <StartBaroTask+0x30>
	  }

	  osDelay(5000);
 8001558:	f241 3088 	movw	r0, #5000	@ 0x1388
 800155c:	f00a fa5c 	bl	800ba18 <osDelay>
	  if(!ReadBarometer())
 8001560:	e7ea      	b.n	8001538 <StartBaroTask+0x8>
 8001562:	bf00      	nop
 8001564:	080126c0 	.word	0x080126c0

08001568 <StartLoggerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggerTask */
void StartLoggerTask(void *argument)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	@ 0x28
 800156c:	af02      	add	r7, sp, #8
 800156e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLoggerTask */
  /* Infinite loop */
    BarometerData data;
	for(;;)
	{
		if(osMessageQueueGet(loggerQueueHandle, &data, NULL, osWaitForever) == osOK)
 8001570:	4b17      	ldr	r3, [pc, #92]	@ (80015d0 <StartLoggerTask+0x68>)
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	f107 0108 	add.w	r1, r7, #8
 8001578:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800157c:	2200      	movs	r2, #0
 800157e:	f00a fcbb 	bl	800bef8 <osMessageQueueGet>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d11e      	bne.n	80015c6 <StartLoggerTask+0x5e>
		{
			if (osMutexAcquire(sdMutexHandle, osWaitForever) == osOK)
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <StartLoggerTask+0x6c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001590:	4618      	mov	r0, r3
 8001592:	f00a fb09 	bl	800bba8 <osMutexAcquire>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d111      	bne.n	80015c0 <StartLoggerTask+0x58>
			{
				LoggerService_LogBMPData(data);
 800159c:	466a      	mov	r2, sp
 800159e:	f107 0318 	add.w	r3, r7, #24
 80015a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015a6:	e882 0003 	stmia.w	r2, {r0, r1}
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015b0:	f7ff f98a 	bl	80008c8 <LoggerService_LogBMPData>
				osMutexRelease(sdMutexHandle);
 80015b4:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <StartLoggerTask+0x6c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f00a fb53 	bl	800bc64 <osMutexRelease>
 80015be:	e002      	b.n	80015c6 <StartLoggerTask+0x5e>
			}
			else
			{
				printf("Erro: mutex inválido ou corrompido!\n");
 80015c0:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <StartLoggerTask+0x70>)
 80015c2:	f00e fb57 	bl	800fc74 <puts>
			}

		}
		//UBaseType_t highWaterMark = uxTaskGetStackHighWaterMark(NULL);
		//printf("LoggerTask stack remaining: %lu bytes\r\n", highWaterMark * sizeof(StackType_t));
		osDelay(1);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f00a fa26 	bl	800ba18 <osDelay>
		if(osMessageQueueGet(loggerQueueHandle, &data, NULL, osWaitForever) == osOK)
 80015cc:	e7d0      	b.n	8001570 <StartLoggerTask+0x8>
 80015ce:	bf00      	nop
 80015d0:	20000904 	.word	0x20000904
 80015d4:	20000918 	.word	0x20000918
 80015d8:	080126e0 	.word	0x080126e0

080015dc <StartCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommTask */
void StartCommTask(void *argument)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0b0      	sub	sp, #192	@ 0xc0
 80015e0:	af06      	add	r7, sp, #24
 80015e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommTask */
  /* Infinite loop */
	CommMessage msg;
	for(;;)
	{
		if (osMessageQueueGet(commQueueHandle, &msg, NULL, osWaitForever) == osOK)
 80015e4:	4b40      	ldr	r3, [pc, #256]	@ (80016e8 <StartCommTask+0x10c>)
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	f107 0108 	add.w	r1, r7, #8
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015f0:	2200      	movs	r2, #0
 80015f2:	f00a fc81 	bl	800bef8 <osMessageQueueGet>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d171      	bne.n	80016e0 <StartCommTask+0x104>
		{
			switch(msg.type)
 80015fc:	7a3b      	ldrb	r3, [r7, #8]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d03a      	beq.n	8001678 <StartCommTask+0x9c>
 8001602:	2b02      	cmp	r3, #2
 8001604:	dc53      	bgt.n	80016ae <StartCommTask+0xd2>
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <StartCommTask+0x34>
 800160a:	2b01      	cmp	r3, #1
 800160c:	d019      	beq.n	8001642 <StartCommTask+0x66>
 800160e:	e04e      	b.n	80016ae <StartCommTask+0xd2>
			{
				case MSG_TYPE_BAROMETER:
					snprintf(msg.message, sizeof(msg.message),
						"Pressure=%.2f Pa, Temperature=%.2f °C, Altitude=%.2f m\r\n",
						msg.payload.baro.pressure,
 8001610:	edd7 7a04 	vldr	s15, [r7, #16]
					snprintf(msg.message, sizeof(msg.message),
 8001614:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
						msg.payload.baro.temperature,
 8001618:	edd7 6a05 	vldr	s13, [r7, #20]
					snprintf(msg.message, sizeof(msg.message),
 800161c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001620:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001624:	f107 0108 	add.w	r1, r7, #8
 8001628:	f101 0020 	add.w	r0, r1, #32
 800162c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001630:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001634:	ed8d 7b00 	vstr	d7, [sp]
 8001638:	4a2c      	ldr	r2, [pc, #176]	@ (80016ec <StartCommTask+0x110>)
 800163a:	2180      	movs	r1, #128	@ 0x80
 800163c:	f00e f9bc 	bl	800f9b8 <sniprintf>
						msg.payload.baro.altitude);
					break;
 8001640:	e03e      	b.n	80016c0 <StartCommTask+0xe4>

				case MSG_TYPE_ACCEL:
					snprintf(msg.message, sizeof(msg.message),
						"ACC: X=%.2f Y=%.2f Z=%.2f\r\n",
						msg.payload.accel.x,
 8001642:	edd7 7a04 	vldr	s15, [r7, #16]
					snprintf(msg.message, sizeof(msg.message),
 8001646:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
						msg.payload.accel.y,
 800164a:	edd7 6a05 	vldr	s13, [r7, #20]
					snprintf(msg.message, sizeof(msg.message),
 800164e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
						msg.payload.accel.z);
 8001652:	edd7 5a06 	vldr	s11, [r7, #24]
					snprintf(msg.message, sizeof(msg.message),
 8001656:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	3320      	adds	r3, #32
 8001660:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001664:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001668:	ed8d 7b00 	vstr	d7, [sp]
 800166c:	4a20      	ldr	r2, [pc, #128]	@ (80016f0 <StartCommTask+0x114>)
 800166e:	2180      	movs	r1, #128	@ 0x80
 8001670:	4618      	mov	r0, r3
 8001672:	f00e f9a1 	bl	800f9b8 <sniprintf>
					break;
 8001676:	e023      	b.n	80016c0 <StartCommTask+0xe4>

				case MSG_TYPE_GYRO:
					snprintf(msg.message, sizeof(msg.message),
						"GYRO: X=%.2f Y=%.2f Z=%.2f\r\n",
						msg.payload.gyro.x,
 8001678:	edd7 7a04 	vldr	s15, [r7, #16]
					snprintf(msg.message, sizeof(msg.message),
 800167c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
						msg.payload.gyro.y,
 8001680:	edd7 6a05 	vldr	s13, [r7, #20]
					snprintf(msg.message, sizeof(msg.message),
 8001684:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
						msg.payload.gyro.z);
 8001688:	edd7 5a06 	vldr	s11, [r7, #24]
					snprintf(msg.message, sizeof(msg.message),
 800168c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	3320      	adds	r3, #32
 8001696:	ed8d 5b04 	vstr	d5, [sp, #16]
 800169a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800169e:	ed8d 7b00 	vstr	d7, [sp]
 80016a2:	4a14      	ldr	r2, [pc, #80]	@ (80016f4 <StartCommTask+0x118>)
 80016a4:	2180      	movs	r1, #128	@ 0x80
 80016a6:	4618      	mov	r0, r3
 80016a8:	f00e f986 	bl	800f9b8 <sniprintf>
					break;
 80016ac:	e008      	b.n	80016c0 <StartCommTask+0xe4>

				default:
					snprintf(msg.message, sizeof(msg.message), "Unknown message\r\n");
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	3320      	adds	r3, #32
 80016b4:	4a10      	ldr	r2, [pc, #64]	@ (80016f8 <StartCommTask+0x11c>)
 80016b6:	2180      	movs	r1, #128	@ 0x80
 80016b8:	4618      	mov	r0, r3
 80016ba:	f00e f97d 	bl	800f9b8 <sniprintf>
					break;
 80016be:	bf00      	nop
			}

			HAL_UART_Transmit(&huart3, (uint8_t*)msg.message, strlen(msg.message), 100);
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	3320      	adds	r3, #32
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe fe0a 	bl	80002e0 <strlen>
 80016cc:	4603      	mov	r3, r0
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	f103 0120 	add.w	r1, r3, #32
 80016d8:	2364      	movs	r3, #100	@ 0x64
 80016da:	4808      	ldr	r0, [pc, #32]	@ (80016fc <StartCommTask+0x120>)
 80016dc:	f005 fe7a 	bl	80073d4 <HAL_UART_Transmit>
		}
		//UBaseType_t highWaterMark = uxTaskGetStackHighWaterMark(NULL);
		//printf("CommTask stack remaining: %lu bytes\r\n", highWaterMark * sizeof(StackType_t));
		osDelay(1);
 80016e0:	2001      	movs	r0, #1
 80016e2:	f00a f999 	bl	800ba18 <osDelay>
		if (osMessageQueueGet(commQueueHandle, &msg, NULL, osWaitForever) == osOK)
 80016e6:	e77d      	b.n	80015e4 <StartCommTask+0x8>
 80016e8:	20000908 	.word	0x20000908
 80016ec:	08012708 	.word	0x08012708
 80016f0:	08012744 	.word	0x08012744
 80016f4:	08012760 	.word	0x08012760
 80016f8:	08012780 	.word	0x08012780
 80016fc:	20000858 	.word	0x20000858

08001700 <StartBuzzerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBuzzerTask */
void StartBuzzerTask(void *argument)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBuzzerTask */
	printf("BuzzerTask initialized\r\n");
 8001708:	481d      	ldr	r0, [pc, #116]	@ (8001780 <StartBuzzerTask+0x80>)
 800170a:	f00e fab3 	bl	800fc74 <puts>
	uint32_t beep_interval = 1000;
 800170e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001712:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  switch(sat_location)
 8001714:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <StartBuzzerTask+0x84>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d00e      	beq.n	800173a <StartBuzzerTask+0x3a>
 800171c:	2b03      	cmp	r3, #3
 800171e:	dc10      	bgt.n	8001742 <StartBuzzerTask+0x42>
 8001720:	2b01      	cmp	r3, #1
 8001722:	d002      	beq.n	800172a <StartBuzzerTask+0x2a>
 8001724:	2b02      	cmp	r3, #2
 8001726:	d004      	beq.n	8001732 <StartBuzzerTask+0x32>
 8001728:	e00b      	b.n	8001742 <StartBuzzerTask+0x42>
	  {
		  case 1:
			  beep_interval = 1000;
 800172a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172e:	60fb      	str	r3, [r7, #12]
			  break;
 8001730:	e007      	b.n	8001742 <StartBuzzerTask+0x42>
		  case 2:
			  beep_interval = 500;
 8001732:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001736:	60fb      	str	r3, [r7, #12]
			  break;
 8001738:	e003      	b.n	8001742 <StartBuzzerTask+0x42>
		  case 3:
			  beep_interval = 2000;
 800173a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800173e:	60fb      	str	r3, [r7, #12]
			  break;
 8001740:	bf00      	nop
	  }

	  if(buzzer_enabled)
 8001742:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <StartBuzzerTask+0x88>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d011      	beq.n	8001770 <StartBuzzerTask+0x70>
	  {
		  // Liga o buzzer com duty cycle de 50%
		  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800174c:	2100      	movs	r1, #0
 800174e:	480f      	ldr	r0, [pc, #60]	@ (800178c <StartBuzzerTask+0x8c>)
 8001750:	f004 fcf4 	bl	800613c <HAL_TIM_PWM_Start>
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, htim4.Init.Period / 2);
 8001754:	4b0d      	ldr	r3, [pc, #52]	@ (800178c <StartBuzzerTask+0x8c>)
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <StartBuzzerTask+0x8c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	0852      	lsrs	r2, r2, #1
 800175e:	635a      	str	r2, [r3, #52]	@ 0x34

		  osDelay(200); // Som por 200ms
 8001760:	20c8      	movs	r0, #200	@ 0xc8
 8001762:	f00a f959 	bl	800ba18 <osDelay>

		  // Desliga o som (mantém PWM ativo, mas duty = 0)
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <StartBuzzerTask+0x8c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2200      	movs	r2, #0
 800176c:	635a      	str	r2, [r3, #52]	@ 0x34
 800176e:	e003      	b.n	8001778 <StartBuzzerTask+0x78>
	  }
	  else
	  {
		  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001770:	2100      	movs	r1, #0
 8001772:	4806      	ldr	r0, [pc, #24]	@ (800178c <StartBuzzerTask+0x8c>)
 8001774:	f004 fddc 	bl	8006330 <HAL_TIM_PWM_Stop>
	  }

	  osDelay(beep_interval);
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f00a f94d 	bl	800ba18 <osDelay>
	  switch(sat_location)
 800177e:	e7c9      	b.n	8001714 <StartBuzzerTask+0x14>
 8001780:	08012794 	.word	0x08012794
 8001784:	20000001 	.word	0x20000001
 8001788:	20000000 	.word	0x20000000
 800178c:	2000080c 	.word	0x2000080c

08001790 <StartCommandTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommandTask */
void StartCommandTask(void *argument)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandTask */
  /* Infinite loop */
  for(;;)
  {
	  uint8_t command;
	  if(osMessageQueueGet(commandQueueHandle, &command, NULL, osWaitForever) == osOK)
 8001798:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <StartCommandTask+0x5c>)
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	f107 010f 	add.w	r1, r7, #15
 80017a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017a4:	2200      	movs	r2, #0
 80017a6:	f00a fba7 	bl	800bef8 <osMessageQueueGet>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d118      	bne.n	80017e2 <StartCommandTask+0x52>
	  {
		    switch(command)
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	2b65      	cmp	r3, #101	@ 0x65
 80017b4:	d115      	bne.n	80017e2 <StartCommandTask+0x52>
			{
				case 'e': // erase log
					if (osMutexAcquire(sdMutexHandle, osWaitForever) == osOK)
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <StartCommandTask+0x60>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017be:	4618      	mov	r0, r3
 80017c0:	f00a f9f2 	bl	800bba8 <osMutexAcquire>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d107      	bne.n	80017da <StartCommandTask+0x4a>
					{
						LoggerService_ClearBmpLogFile();
 80017ca:	f7ff f8a9 	bl	8000920 <LoggerService_ClearBmpLogFile>
						osMutexRelease(sdMutexHandle);
 80017ce:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <StartCommandTask+0x60>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f00a fa46 	bl	800bc64 <osMutexRelease>
					else
					{
						printf("Erro: mutex inválido ou corrompido!\n");
					}

					break;
 80017d8:	e002      	b.n	80017e0 <StartCommandTask+0x50>
						printf("Erro: mutex inválido ou corrompido!\n");
 80017da:	4806      	ldr	r0, [pc, #24]	@ (80017f4 <StartCommandTask+0x64>)
 80017dc:	f00e fa4a 	bl	800fc74 <puts>
					break;
 80017e0:	bf00      	nop
			}
	  }

	  osDelay(1);
 80017e2:	2001      	movs	r0, #1
 80017e4:	f00a f918 	bl	800ba18 <osDelay>
  {
 80017e8:	e7d6      	b.n	8001798 <StartCommandTask+0x8>
 80017ea:	bf00      	nop
 80017ec:	20000910 	.word	0x20000910
 80017f0:	20000918 	.word	0x20000918
 80017f4:	080126e0 	.word	0x080126e0

080017f8 <StartCriticalCommandTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCriticalCommandTask */
void StartCriticalCommandTask(void *argument)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {
	  uint8_t command;
	  if(osMessageQueueGet(criticalCommandQueueHandle, &command, NULL, osWaitForever) == osOK)
 8001800:	4b14      	ldr	r3, [pc, #80]	@ (8001854 <StartCriticalCommandTask+0x5c>)
 8001802:	6818      	ldr	r0, [r3, #0]
 8001804:	f107 010f 	add.w	r1, r7, #15
 8001808:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800180c:	2200      	movs	r2, #0
 800180e:	f00a fb73 	bl	800bef8 <osMessageQueueGet>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d118      	bne.n	800184a <StartCriticalCommandTask+0x52>
	  {
		  switch(command)
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	2b62      	cmp	r3, #98	@ 0x62
 800181c:	d004      	beq.n	8001828 <StartCriticalCommandTask+0x30>
 800181e:	2b72      	cmp	r3, #114	@ 0x72
 8001820:	d113      	bne.n	800184a <StartCriticalCommandTask+0x52>
		  {
	  		  case 'r': //read bpm
	  			  ReadBarometer();
 8001822:	f7ff fdc7 	bl	80013b4 <ReadBarometer>
	  			  break;
 8001826:	e010      	b.n	800184a <StartCriticalCommandTask+0x52>
			  case 'b': //buzzer
				  buzzer_enabled = !buzzer_enabled;
 8001828:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <StartCriticalCommandTask+0x60>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	bf14      	ite	ne
 8001832:	2301      	movne	r3, #1
 8001834:	2300      	moveq	r3, #0
 8001836:	b2db      	uxtb	r3, r3
 8001838:	f083 0301 	eor.w	r3, r3, #1
 800183c:	b2db      	uxtb	r3, r3
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <StartCriticalCommandTask+0x60>)
 8001846:	701a      	strb	r2, [r3, #0]
				  break;
 8001848:	bf00      	nop
		  }
	  }

    osDelay(1);
 800184a:	2001      	movs	r0, #1
 800184c:	f00a f8e4 	bl	800ba18 <osDelay>
  {
 8001850:	e7d6      	b.n	8001800 <StartCriticalCommandTask+0x8>
 8001852:	bf00      	nop
 8001854:	20000914 	.word	0x20000914
 8001858:	20000000 	.word	0x20000000

0800185c <StartGyroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGyroTask */

	uint32_t gyro_interval = 10000;
 8001864:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001868:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	for(;;)
	{
		switch(sat_location)
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <StartGyroTask+0x64>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d00e      	beq.n	8001890 <StartGyroTask+0x34>
 8001872:	2b03      	cmp	r3, #3
 8001874:	dc10      	bgt.n	8001898 <StartGyroTask+0x3c>
 8001876:	2b01      	cmp	r3, #1
 8001878:	d002      	beq.n	8001880 <StartGyroTask+0x24>
 800187a:	2b02      	cmp	r3, #2
 800187c:	d004      	beq.n	8001888 <StartGyroTask+0x2c>
 800187e:	e00b      	b.n	8001898 <StartGyroTask+0x3c>
		{
		  case 1:
			  gyro_interval = 10000;
 8001880:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001884:	60fb      	str	r3, [r7, #12]
			  break;
 8001886:	e007      	b.n	8001898 <StartGyroTask+0x3c>
		  case 2:
			  gyro_interval = 5000;
 8001888:	f241 3388 	movw	r3, #5000	@ 0x1388
 800188c:	60fb      	str	r3, [r7, #12]
			  break;
 800188e:	e003      	b.n	8001898 <StartGyroTask+0x3c>
		  case 3:
			  gyro_interval = 1000;
 8001890:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001894:	60fb      	str	r3, [r7, #12]
			  break;
 8001896:	bf00      	nop
		}

		if(!ReadGyroscope())
 8001898:	f7ff fe00 	bl	800149c <ReadGyroscope>
 800189c:	4603      	mov	r3, r0
 800189e:	f083 0301 	eor.w	r3, r3, #1
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d007      	beq.n	80018b8 <StartGyroTask+0x5c>
		{
			printf("Failed to read from gyroscope.\r\n");
 80018a8:	4806      	ldr	r0, [pc, #24]	@ (80018c4 <StartGyroTask+0x68>)
 80018aa:	f00e f9e3 	bl	800fc74 <puts>
			osDelay(1000);
 80018ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018b2:	f00a f8b1 	bl	800ba18 <osDelay>
			continue;
 80018b6:	e002      	b.n	80018be <StartGyroTask+0x62>
		}

		osDelay(gyro_interval);
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f00a f8ad 	bl	800ba18 <osDelay>
		switch(sat_location)
 80018be:	e7d4      	b.n	800186a <StartGyroTask+0xe>
 80018c0:	20000001 	.word	0x20000001
 80018c4:	080127ac 	.word	0x080127ac

080018c8 <StartAccTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccTask */
void StartAccTask(void *argument)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccTask */
	uint32_t acc_interval = 10000;
 80018d0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80018d4:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	for(;;)
	{
		switch(sat_location)
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <StartAccTask+0x64>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d00e      	beq.n	80018fc <StartAccTask+0x34>
 80018de:	2b03      	cmp	r3, #3
 80018e0:	dc10      	bgt.n	8001904 <StartAccTask+0x3c>
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d002      	beq.n	80018ec <StartAccTask+0x24>
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d004      	beq.n	80018f4 <StartAccTask+0x2c>
 80018ea:	e00b      	b.n	8001904 <StartAccTask+0x3c>
		{
		  case 1:
			  acc_interval = 5000;
 80018ec:	f241 3388 	movw	r3, #5000	@ 0x1388
 80018f0:	60fb      	str	r3, [r7, #12]
			  break;
 80018f2:	e007      	b.n	8001904 <StartAccTask+0x3c>
		  case 2:
			  acc_interval = 1000;
 80018f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018f8:	60fb      	str	r3, [r7, #12]
			  break;
 80018fa:	e003      	b.n	8001904 <StartAccTask+0x3c>
		  case 3:
			  acc_interval = 10000;
 80018fc:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001900:	60fb      	str	r3, [r7, #12]
			  break;
 8001902:	bf00      	nop
		}

		if(!ReadAccelerometer())
 8001904:	f7ff fd88 	bl	8001418 <ReadAccelerometer>
 8001908:	4603      	mov	r3, r0
 800190a:	f083 0301 	eor.w	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d007      	beq.n	8001924 <StartAccTask+0x5c>
		{
			printf("Failed to read from acelerometer.\r\n");
 8001914:	4806      	ldr	r0, [pc, #24]	@ (8001930 <StartAccTask+0x68>)
 8001916:	f00e f9ad 	bl	800fc74 <puts>
			osDelay(1000);
 800191a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800191e:	f00a f87b 	bl	800ba18 <osDelay>
			continue;
 8001922:	e002      	b.n	800192a <StartAccTask+0x62>
		}

		osDelay(acc_interval);
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f00a f877 	bl	800ba18 <osDelay>
		switch(sat_location)
 800192a:	e7d4      	b.n	80018d6 <StartAccTask+0xe>
 800192c:	20000001 	.word	0x20000001
 8001930:	080127cc 	.word	0x080127cc

08001934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001938:	b672      	cpsid	i
}
 800193a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  SDCard_Deinit();
 800193c:	f7fe ffb8 	bl	80008b0 <SDCard_Deinit>
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <Error_Handler+0xc>

08001944 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <HAL_MspInit+0x4c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	4a10      	ldr	r2, [pc, #64]	@ (8001990 <HAL_MspInit+0x4c>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001954:	6413      	str	r3, [r2, #64]	@ 0x40
 8001956:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <HAL_MspInit+0x4c>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <HAL_MspInit+0x4c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	4a0a      	ldr	r2, [pc, #40]	@ (8001990 <HAL_MspInit+0x4c>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800196c:	6453      	str	r3, [r2, #68]	@ 0x44
 800196e:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <HAL_MspInit+0x4c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	210f      	movs	r1, #15
 800197e:	f06f 0001 	mvn.w	r0, #1
 8001982:	f001 fa93 	bl	8002eac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800

08001994 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b0ae      	sub	sp, #184	@ 0xb8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2290      	movs	r2, #144	@ 0x90
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f00e f965 	bl	800fc84 <memset>
  if(hi2c->Instance==I2C2)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a21      	ldr	r2, [pc, #132]	@ (8001a44 <HAL_I2C_MspInit+0xb0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d13b      	bne.n	8001a3c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019c8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019ca:	2300      	movs	r3, #0
 80019cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	4618      	mov	r0, r3
 80019d4:	f003 f88e 	bl	8004af4 <HAL_RCCEx_PeriphCLKConfig>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80019de:	f7ff ffa9 	bl	8001934 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019e2:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <HAL_I2C_MspInit+0xb4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	4a18      	ldr	r2, [pc, #96]	@ (8001a48 <HAL_I2C_MspInit+0xb4>)
 80019e8:	f043 0320 	orr.w	r3, r3, #32
 80019ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ee:	4b16      	ldr	r3, [pc, #88]	@ (8001a48 <HAL_I2C_MspInit+0xb4>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	f003 0320 	and.w	r3, r3, #32
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019fa:	2303      	movs	r3, #3
 80019fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a00:	2312      	movs	r3, #18
 8001a02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a12:	2304      	movs	r3, #4
 8001a14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a18:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480b      	ldr	r0, [pc, #44]	@ (8001a4c <HAL_I2C_MspInit+0xb8>)
 8001a20:	f001 fb00 	bl	8003024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a24:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <HAL_I2C_MspInit+0xb4>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	4a07      	ldr	r2, [pc, #28]	@ (8001a48 <HAL_I2C_MspInit+0xb4>)
 8001a2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <HAL_I2C_MspInit+0xb4>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001a3c:	bf00      	nop
 8001a3e:	37b8      	adds	r7, #184	@ 0xb8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40005800 	.word	0x40005800
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40021400 	.word	0x40021400

08001a50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08e      	sub	sp, #56	@ 0x38
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b98 <HAL_SPI_MspInit+0x148>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d144      	bne.n	8001afc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a72:	4b4a      	ldr	r3, [pc, #296]	@ (8001b9c <HAL_SPI_MspInit+0x14c>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	4a49      	ldr	r2, [pc, #292]	@ (8001b9c <HAL_SPI_MspInit+0x14c>)
 8001a78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a7e:	4b47      	ldr	r3, [pc, #284]	@ (8001b9c <HAL_SPI_MspInit+0x14c>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a86:	623b      	str	r3, [r7, #32]
 8001a88:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	4b44      	ldr	r3, [pc, #272]	@ (8001b9c <HAL_SPI_MspInit+0x14c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a43      	ldr	r2, [pc, #268]	@ (8001b9c <HAL_SPI_MspInit+0x14c>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b41      	ldr	r3, [pc, #260]	@ (8001b9c <HAL_SPI_MspInit+0x14c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	61fb      	str	r3, [r7, #28]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8001b9c <HAL_SPI_MspInit+0x14c>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4a3d      	ldr	r2, [pc, #244]	@ (8001b9c <HAL_SPI_MspInit+0x14c>)
 8001aa8:	f043 0308 	orr.w	r3, r3, #8
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aae:	4b3b      	ldr	r3, [pc, #236]	@ (8001b9c <HAL_SPI_MspInit+0x14c>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	61bb      	str	r3, [r7, #24]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001aba:	2360      	movs	r3, #96	@ 0x60
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aca:	2305      	movs	r3, #5
 8001acc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4832      	ldr	r0, [pc, #200]	@ (8001ba0 <HAL_SPI_MspInit+0x150>)
 8001ad6:	f001 faa5 	bl	8003024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ada:	2380      	movs	r3, #128	@ 0x80
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aea:	2305      	movs	r3, #5
 8001aec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af2:	4619      	mov	r1, r3
 8001af4:	482b      	ldr	r0, [pc, #172]	@ (8001ba4 <HAL_SPI_MspInit+0x154>)
 8001af6:	f001 fa95 	bl	8003024 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001afa:	e049      	b.n	8001b90 <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a29      	ldr	r2, [pc, #164]	@ (8001ba8 <HAL_SPI_MspInit+0x158>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d144      	bne.n	8001b90 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b06:	4b25      	ldr	r3, [pc, #148]	@ (8001b9c <HAL_SPI_MspInit+0x14c>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	4a24      	ldr	r2, [pc, #144]	@ (8001b9c <HAL_SPI_MspInit+0x14c>)
 8001b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b12:	4b22      	ldr	r3, [pc, #136]	@ (8001b9c <HAL_SPI_MspInit+0x14c>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b9c <HAL_SPI_MspInit+0x14c>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	4a1e      	ldr	r2, [pc, #120]	@ (8001b9c <HAL_SPI_MspInit+0x14c>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b9c <HAL_SPI_MspInit+0x14c>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <HAL_SPI_MspInit+0x14c>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	4a18      	ldr	r2, [pc, #96]	@ (8001b9c <HAL_SPI_MspInit+0x14c>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b42:	4b16      	ldr	r3, [pc, #88]	@ (8001b9c <HAL_SPI_MspInit+0x14c>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b4e:	230c      	movs	r3, #12
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b5e:	2305      	movs	r3, #5
 8001b60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b66:	4619      	mov	r1, r3
 8001b68:	4810      	ldr	r0, [pc, #64]	@ (8001bac <HAL_SPI_MspInit+0x15c>)
 8001b6a:	f001 fa5b 	bl	8003024 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b80:	2305      	movs	r3, #5
 8001b82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4809      	ldr	r0, [pc, #36]	@ (8001bb0 <HAL_SPI_MspInit+0x160>)
 8001b8c:	f001 fa4a 	bl	8003024 <HAL_GPIO_Init>
}
 8001b90:	bf00      	nop
 8001b92:	3738      	adds	r7, #56	@ 0x38
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40013000 	.word	0x40013000
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020000 	.word	0x40020000
 8001ba4:	40020c00 	.word	0x40020c00
 8001ba8:	40003800 	.word	0x40003800
 8001bac:	40020800 	.word	0x40020800
 8001bb0:	40020400 	.word	0x40020400

08001bb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a16      	ldr	r2, [pc, #88]	@ (8001c1c <HAL_TIM_Base_MspInit+0x68>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d114      	bne.n	8001bf0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bc6:	4b16      	ldr	r3, [pc, #88]	@ (8001c20 <HAL_TIM_Base_MspInit+0x6c>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	4a15      	ldr	r2, [pc, #84]	@ (8001c20 <HAL_TIM_Base_MspInit+0x6c>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd2:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <HAL_TIM_Base_MspInit+0x6c>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2105      	movs	r1, #5
 8001be2:	201d      	movs	r0, #29
 8001be4:	f001 f962 	bl	8002eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001be8:	201d      	movs	r0, #29
 8001bea:	f001 f97b 	bl	8002ee4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001bee:	e010      	b.n	8001c12 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8001c24 <HAL_TIM_Base_MspInit+0x70>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d10b      	bne.n	8001c12 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bfa:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <HAL_TIM_Base_MspInit+0x6c>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	4a08      	ldr	r2, [pc, #32]	@ (8001c20 <HAL_TIM_Base_MspInit+0x6c>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c06:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_TIM_Base_MspInit+0x6c>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
}
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40000400 	.word	0x40000400
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40000800 	.word	0x40000800

08001c28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a11      	ldr	r2, [pc, #68]	@ (8001c8c <HAL_TIM_MspPostInit+0x64>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d11b      	bne.n	8001c82 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4a:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <HAL_TIM_MspPostInit+0x68>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	4a10      	ldr	r2, [pc, #64]	@ (8001c90 <HAL_TIM_MspPostInit+0x68>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <HAL_TIM_MspPostInit+0x68>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c62:	2340      	movs	r3, #64	@ 0x40
 8001c64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c72:	2302      	movs	r3, #2
 8001c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4805      	ldr	r0, [pc, #20]	@ (8001c94 <HAL_TIM_MspPostInit+0x6c>)
 8001c7e:	f001 f9d1 	bl	8003024 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c82:	bf00      	nop
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40000800 	.word	0x40000800
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020400 	.word	0x40020400

08001c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b0ae      	sub	sp, #184	@ 0xb8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2290      	movs	r2, #144	@ 0x90
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f00d ffe3 	bl	800fc84 <memset>
  if(huart->Instance==USART3)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a26      	ldr	r2, [pc, #152]	@ (8001d5c <HAL_UART_MspInit+0xc4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d144      	bne.n	8001d52 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ccc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f002 ff0c 	bl	8004af4 <HAL_RCCEx_PeriphCLKConfig>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ce2:	f7ff fe27 	bl	8001934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <HAL_UART_MspInit+0xc8>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	4a1d      	ldr	r2, [pc, #116]	@ (8001d60 <HAL_UART_MspInit+0xc8>)
 8001cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <HAL_UART_MspInit+0xc8>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cfe:	4b18      	ldr	r3, [pc, #96]	@ (8001d60 <HAL_UART_MspInit+0xc8>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a17      	ldr	r2, [pc, #92]	@ (8001d60 <HAL_UART_MspInit+0xc8>)
 8001d04:	f043 0308 	orr.w	r3, r3, #8
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <HAL_UART_MspInit+0xc8>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d30:	2307      	movs	r3, #7
 8001d32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d36:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4809      	ldr	r0, [pc, #36]	@ (8001d64 <HAL_UART_MspInit+0xcc>)
 8001d3e:	f001 f971 	bl	8003024 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2105      	movs	r1, #5
 8001d46:	2027      	movs	r0, #39	@ 0x27
 8001d48:	f001 f8b0 	bl	8002eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d4c:	2027      	movs	r0, #39	@ 0x27
 8001d4e:	f001 f8c9 	bl	8002ee4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001d52:	bf00      	nop
 8001d54:	37b8      	adds	r7, #184	@ 0xb8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40004800 	.word	0x40004800
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020c00 	.word	0x40020c00

08001d68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08e      	sub	sp, #56	@ 0x38
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d78:	4b33      	ldr	r3, [pc, #204]	@ (8001e48 <HAL_InitTick+0xe0>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	4a32      	ldr	r2, [pc, #200]	@ (8001e48 <HAL_InitTick+0xe0>)
 8001d7e:	f043 0310 	orr.w	r3, r3, #16
 8001d82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d84:	4b30      	ldr	r3, [pc, #192]	@ (8001e48 <HAL_InitTick+0xe0>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d90:	f107 0210 	add.w	r2, r7, #16
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 fe78 	bl	8004a90 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d103      	bne.n	8001db2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001daa:	f002 fe49 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 8001dae:	6378      	str	r0, [r7, #52]	@ 0x34
 8001db0:	e004      	b.n	8001dbc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001db2:	f002 fe45 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 8001db6:	4603      	mov	r3, r0
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dbe:	4a23      	ldr	r2, [pc, #140]	@ (8001e4c <HAL_InitTick+0xe4>)
 8001dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc4:	0c9b      	lsrs	r3, r3, #18
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001dca:	4b21      	ldr	r3, [pc, #132]	@ (8001e50 <HAL_InitTick+0xe8>)
 8001dcc:	4a21      	ldr	r2, [pc, #132]	@ (8001e54 <HAL_InitTick+0xec>)
 8001dce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e50 <HAL_InitTick+0xe8>)
 8001dd2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dd6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e50 <HAL_InitTick+0xe8>)
 8001dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ddc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001dde:	4b1c      	ldr	r3, [pc, #112]	@ (8001e50 <HAL_InitTick+0xe8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e50 <HAL_InitTick+0xe8>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dea:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <HAL_InitTick+0xe8>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001df0:	4817      	ldr	r0, [pc, #92]	@ (8001e50 <HAL_InitTick+0xe8>)
 8001df2:	f004 f871 	bl	8005ed8 <HAL_TIM_Base_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001dfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d11b      	bne.n	8001e3c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001e04:	4812      	ldr	r0, [pc, #72]	@ (8001e50 <HAL_InitTick+0xe8>)
 8001e06:	f004 f8bf 	bl	8005f88 <HAL_TIM_Base_Start_IT>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001e10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d111      	bne.n	8001e3c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e18:	2036      	movs	r0, #54	@ 0x36
 8001e1a:	f001 f863 	bl	8002ee4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b0f      	cmp	r3, #15
 8001e22:	d808      	bhi.n	8001e36 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001e24:	2200      	movs	r2, #0
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	2036      	movs	r0, #54	@ 0x36
 8001e2a:	f001 f83f 	bl	8002eac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <HAL_InitTick+0xf0>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	e002      	b.n	8001e3c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3738      	adds	r7, #56	@ 0x38
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	431bde83 	.word	0x431bde83
 8001e50:	20000920 	.word	0x20000920
 8001e54:	40001000 	.word	0x40001000
 8001e58:	20000008 	.word	0x20000008

08001e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <NMI_Handler+0x4>

08001e64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <HardFault_Handler+0x4>

08001e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e70:	bf00      	nop
 8001e72:	e7fd      	b.n	8001e70 <MemManage_Handler+0x4>

08001e74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <BusFault_Handler+0x4>

08001e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <UsageFault_Handler+0x4>

08001e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e98:	4802      	ldr	r0, [pc, #8]	@ (8001ea4 <TIM3_IRQHandler+0x10>)
 8001e9a:	f004 fac9 	bl	8006430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200007c0 	.word	0x200007c0

08001ea8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001eac:	4802      	ldr	r0, [pc, #8]	@ (8001eb8 <USART3_IRQHandler+0x10>)
 8001eae:	f005 fb5f 	bl	8007570 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000858 	.word	0x20000858

08001ebc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001ec0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ec4:	f001 fa74 	bl	80033b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ed0:	4802      	ldr	r0, [pc, #8]	@ (8001edc <TIM6_DAC_IRQHandler+0x10>)
 8001ed2:	f004 faad 	bl	8006430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000920 	.word	0x20000920

08001ee0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return 1;
 8001ee4:	2301      	movs	r3, #1
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <_kill>:

int _kill(int pid, int sig)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001efa:	f00d ff25 	bl	800fd48 <__errno>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2216      	movs	r2, #22
 8001f02:	601a      	str	r2, [r3, #0]
  return -1;
 8001f04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <_exit>:

void _exit (int status)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ffe7 	bl	8001ef0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f22:	bf00      	nop
 8001f24:	e7fd      	b.n	8001f22 <_exit+0x12>

08001f26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e00a      	b.n	8001f4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f38:	f3af 8000 	nop.w
 8001f3c:	4601      	mov	r1, r0
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	60ba      	str	r2, [r7, #8]
 8001f44:	b2ca      	uxtb	r2, r1
 8001f46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dbf0      	blt.n	8001f38 <_read+0x12>
  }

  return len;
 8001f56:	687b      	ldr	r3, [r7, #4]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f88:	605a      	str	r2, [r3, #4]
  return 0;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <_isatty>:

int _isatty(int file)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fa0:	2301      	movs	r3, #1
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b085      	sub	sp, #20
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd0:	4a14      	ldr	r2, [pc, #80]	@ (8002024 <_sbrk+0x5c>)
 8001fd2:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <_sbrk+0x60>)
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fdc:	4b13      	ldr	r3, [pc, #76]	@ (800202c <_sbrk+0x64>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d102      	bne.n	8001fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <_sbrk+0x64>)
 8001fe6:	4a12      	ldr	r2, [pc, #72]	@ (8002030 <_sbrk+0x68>)
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fea:	4b10      	ldr	r3, [pc, #64]	@ (800202c <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d207      	bcs.n	8002008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff8:	f00d fea6 	bl	800fd48 <__errno>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	220c      	movs	r2, #12
 8002000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002006:	e009      	b.n	800201c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002008:	4b08      	ldr	r3, [pc, #32]	@ (800202c <_sbrk+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200e:	4b07      	ldr	r3, [pc, #28]	@ (800202c <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	4a05      	ldr	r2, [pc, #20]	@ (800202c <_sbrk+0x64>)
 8002018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800201a:	68fb      	ldr	r3, [r7, #12]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20080000 	.word	0x20080000
 8002028:	00000400 	.word	0x00000400
 800202c:	2000096c 	.word	0x2000096c
 8002030:	200078e8 	.word	0x200078e8

08002034 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <SystemInit+0x20>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203e:	4a05      	ldr	r2, [pc, #20]	@ (8002054 <SystemInit+0x20>)
 8002040:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002044:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002058:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002090 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800205c:	f7ff ffea 	bl	8002034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002060:	480c      	ldr	r0, [pc, #48]	@ (8002094 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002062:	490d      	ldr	r1, [pc, #52]	@ (8002098 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002064:	4a0d      	ldr	r2, [pc, #52]	@ (800209c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002068:	e002      	b.n	8002070 <LoopCopyDataInit>

0800206a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800206c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206e:	3304      	adds	r3, #4

08002070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002074:	d3f9      	bcc.n	800206a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002076:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002078:	4c0a      	ldr	r4, [pc, #40]	@ (80020a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800207c:	e001      	b.n	8002082 <LoopFillZerobss>

0800207e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002080:	3204      	adds	r2, #4

08002082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002084:	d3fb      	bcc.n	800207e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002086:	f00d fe65 	bl	800fd54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800208a:	f7fe fc99 	bl	80009c0 <main>
  bx  lr    
 800208e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002090:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002098:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800209c:	08014660 	.word	0x08014660
  ldr r2, =_sbss
 80020a0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80020a4:	200078e8 	.word	0x200078e8

080020a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a8:	e7fe      	b.n	80020a8 <ADC_IRQHandler>

080020aa <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2203      	movs	r2, #3
 80020b6:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2203      	movs	r2, #3
 80020c2:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2203      	movs	r2, #3
 80020c8:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2203      	movs	r2, #3
 80020ce:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2203      	movs	r2, #3
 80020d4:	715a      	strb	r2, [r3, #5]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b08a      	sub	sp, #40	@ 0x28
 80020e6:	af04      	add	r7, sp, #16
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	460b      	mov	r3, r1
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80020fc:	7afb      	ldrb	r3, [r7, #11]
 80020fe:	b29a      	uxth	r2, r3
 8002100:	8af9      	ldrh	r1, [r7, #22]
 8002102:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002106:	9302      	str	r3, [sp, #8]
 8002108:	2302      	movs	r3, #2
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	2301      	movs	r3, #1
 8002114:	f001 fb14 	bl	8003740 <HAL_I2C_Mem_Read>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10b      	bne.n	8002136 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800211e:	7d7b      	ldrb	r3, [r7, #21]
 8002120:	021b      	lsls	r3, r3, #8
 8002122:	b21a      	sxth	r2, r3
 8002124:	7d3b      	ldrb	r3, [r7, #20]
 8002126:	b21b      	sxth	r3, r3
 8002128:	4313      	orrs	r3, r2
 800212a:	b21b      	sxth	r3, r3
 800212c:	b29a      	uxth	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	801a      	strh	r2, [r3, #0]
		return true;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <read_register16+0x56>
	} else
		return false;
 8002136:	2300      	movs	r3, #0

}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b08b      	sub	sp, #44	@ 0x2c
 8002144:	af04      	add	r7, sp, #16
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	461a      	mov	r2, r3
 800214c:	460b      	mov	r3, r1
 800214e:	72fb      	strb	r3, [r7, #11]
 8002150:	4613      	mov	r3, r2
 8002152:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002160:	7afb      	ldrb	r3, [r7, #11]
 8002162:	b29a      	uxth	r2, r3
 8002164:	7abb      	ldrb	r3, [r7, #10]
 8002166:	b29b      	uxth	r3, r3
 8002168:	8af9      	ldrh	r1, [r7, #22]
 800216a:	f241 3488 	movw	r4, #5000	@ 0x1388
 800216e:	9402      	str	r4, [sp, #8]
 8002170:	9301      	str	r3, [sp, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2301      	movs	r3, #1
 8002178:	f001 fae2 	bl	8003740 <HAL_I2C_Mem_Read>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <read_data+0x46>
		return 0;
 8002182:	2300      	movs	r3, #0
 8002184:	e000      	b.n	8002188 <read_data+0x48>
	else
		return 1;
 8002186:	2301      	movs	r3, #1

}
 8002188:	4618      	mov	r0, r3
 800218a:	371c      	adds	r7, #28
 800218c:	46bd      	mov	sp, r7
 800218e:	bd90      	pop	{r4, r7, pc}

08002190 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	461a      	mov	r2, r3
 800219c:	2188      	movs	r1, #136	@ 0x88
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ff9f 	bl	80020e2 <read_register16>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d06f      	beq.n	800228a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3302      	adds	r3, #2
 80021ae:	461a      	mov	r2, r3
 80021b0:	218a      	movs	r1, #138	@ 0x8a
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ff95 	bl	80020e2 <read_register16>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d065      	beq.n	800228a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3304      	adds	r3, #4
 80021c2:	461a      	mov	r2, r3
 80021c4:	218c      	movs	r1, #140	@ 0x8c
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ff8b 	bl	80020e2 <read_register16>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d05b      	beq.n	800228a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3306      	adds	r3, #6
 80021d6:	461a      	mov	r2, r3
 80021d8:	218e      	movs	r1, #142	@ 0x8e
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ff81 	bl	80020e2 <read_register16>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d051      	beq.n	800228a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3308      	adds	r3, #8
 80021ea:	461a      	mov	r2, r3
 80021ec:	2190      	movs	r1, #144	@ 0x90
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ff77 	bl	80020e2 <read_register16>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d047      	beq.n	800228a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	330a      	adds	r3, #10
 80021fe:	461a      	mov	r2, r3
 8002200:	2192      	movs	r1, #146	@ 0x92
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ff6d 	bl	80020e2 <read_register16>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d03d      	beq.n	800228a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	330c      	adds	r3, #12
 8002212:	461a      	mov	r2, r3
 8002214:	2194      	movs	r1, #148	@ 0x94
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ff63 	bl	80020e2 <read_register16>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d033      	beq.n	800228a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	330e      	adds	r3, #14
 8002226:	461a      	mov	r2, r3
 8002228:	2196      	movs	r1, #150	@ 0x96
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ff59 	bl	80020e2 <read_register16>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d029      	beq.n	800228a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3310      	adds	r3, #16
 800223a:	461a      	mov	r2, r3
 800223c:	2198      	movs	r1, #152	@ 0x98
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ff4f 	bl	80020e2 <read_register16>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d01f      	beq.n	800228a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3312      	adds	r3, #18
 800224e:	461a      	mov	r2, r3
 8002250:	219a      	movs	r1, #154	@ 0x9a
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ff45 	bl	80020e2 <read_register16>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d015      	beq.n	800228a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3314      	adds	r3, #20
 8002262:	461a      	mov	r2, r3
 8002264:	219c      	movs	r1, #156	@ 0x9c
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff ff3b 	bl	80020e2 <read_register16>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8002276:	461a      	mov	r2, r3
 8002278:	219e      	movs	r1, #158	@ 0x9e
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ff31 	bl	80020e2 <read_register16>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <read_calibration_data+0xfa>

		return true;
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <read_calibration_data+0xfc>
	}

	return false;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f103 0218 	add.w	r2, r3, #24
 80022a2:	2301      	movs	r3, #1
 80022a4:	21a1      	movs	r1, #161	@ 0xa1
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ff4a 	bl	8002140 <read_data>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d14b      	bne.n	800234a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	331a      	adds	r3, #26
 80022b6:	461a      	mov	r2, r3
 80022b8:	21e1      	movs	r1, #225	@ 0xe1
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ff11 	bl	80020e2 <read_register16>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d041      	beq.n	800234a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f103 021c 	add.w	r2, r3, #28
 80022cc:	2301      	movs	r3, #1
 80022ce:	21e3      	movs	r1, #227	@ 0xe3
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ff35 	bl	8002140 <read_data>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d136      	bne.n	800234a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80022dc:	f107 030e 	add.w	r3, r7, #14
 80022e0:	461a      	mov	r2, r3
 80022e2:	21e4      	movs	r1, #228	@ 0xe4
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff fefc 	bl	80020e2 <read_register16>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d02c      	beq.n	800234a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	461a      	mov	r2, r3
 80022f6:	21e5      	movs	r1, #229	@ 0xe5
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff fef2 	bl	80020e2 <read_register16>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d022      	beq.n	800234a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800230a:	2301      	movs	r3, #1
 800230c:	21e7      	movs	r1, #231	@ 0xe7
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ff16 	bl	8002140 <read_data>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d117      	bne.n	800234a <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800231a:	89fb      	ldrh	r3, [r7, #14]
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	b21b      	sxth	r3, r3
 8002320:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8002324:	b21a      	sxth	r2, r3
 8002326:	89fb      	ldrh	r3, [r7, #14]
 8002328:	121b      	asrs	r3, r3, #8
 800232a:	b21b      	sxth	r3, r3
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	b21b      	sxth	r3, r3
 8002332:	4313      	orrs	r3, r2
 8002334:	b21a      	sxth	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800233a:	89bb      	ldrh	r3, [r7, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	b29b      	uxth	r3, r3
 8002340:	b21a      	sxth	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	841a      	strh	r2, [r3, #32]

		return true;
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <read_hum_calibration_data+0xb8>
	}

	return false;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af04      	add	r7, sp, #16
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	70fb      	strb	r3, [r7, #3]
 8002360:	4613      	mov	r3, r2
 8002362:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	b29a      	uxth	r2, r3
 8002374:	89f9      	ldrh	r1, [r7, #14]
 8002376:	f242 7310 	movw	r3, #10000	@ 0x2710
 800237a:	9302      	str	r3, [sp, #8]
 800237c:	2301      	movs	r3, #1
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	1cbb      	adds	r3, r7, #2
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	2301      	movs	r3, #1
 8002386:	f001 f8c7 	bl	8003518 <HAL_I2C_Mem_Write>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <write_register8+0x40>
		return false;
 8002390:	2300      	movs	r3, #0
 8002392:	e000      	b.n	8002396 <write_register8+0x42>
	else
		return true;
 8002394:	2301      	movs	r3, #1
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80023ac:	2b76      	cmp	r3, #118	@ 0x76
 80023ae:	d005      	beq.n	80023bc <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80023b4:	2b77      	cmp	r3, #119	@ 0x77
 80023b6:	d001      	beq.n	80023bc <bmp280_init+0x1e>

		return false;
 80023b8:	2300      	movs	r3, #0
 80023ba:	e099      	b.n	80024f0 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80023c2:	2301      	movs	r3, #1
 80023c4:	21d0      	movs	r1, #208	@ 0xd0
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff feba 	bl	8002140 <read_data>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <bmp280_init+0x38>
		return false;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e08c      	b.n	80024f0 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80023dc:	2b58      	cmp	r3, #88	@ 0x58
 80023de:	d006      	beq.n	80023ee <bmp280_init+0x50>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80023e6:	2b60      	cmp	r3, #96	@ 0x60
 80023e8:	d001      	beq.n	80023ee <bmp280_init+0x50>

		return false;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e080      	b.n	80024f0 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80023ee:	22b6      	movs	r2, #182	@ 0xb6
 80023f0:	21e0      	movs	r1, #224	@ 0xe0
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffae 	bl	8002354 <write_register8>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <bmp280_init+0x64>
		return false;
 80023fe:	2300      	movs	r3, #0
 8002400:	e076      	b.n	80024f0 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8002402:	f107 020c 	add.w	r2, r7, #12
 8002406:	2301      	movs	r3, #1
 8002408:	21f3      	movs	r1, #243	@ 0xf3
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff fe98 	bl	8002140 <read_data>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f5      	bne.n	8002402 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8002416:	7b3b      	ldrb	r3, [r7, #12]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff feb5 	bl	8002190 <read_calibration_data>
 8002426:	4603      	mov	r3, r0
 8002428:	f083 0301 	eor.w	r3, r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d100      	bne.n	8002434 <bmp280_init+0x96>
 8002432:	e001      	b.n	8002438 <bmp280_init+0x9a>
		return false;
 8002434:	2300      	movs	r3, #0
 8002436:	e05b      	b.n	80024f0 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800243e:	2b60      	cmp	r3, #96	@ 0x60
 8002440:	d10a      	bne.n	8002458 <bmp280_init+0xba>
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ff26 	bl	8002294 <read_hum_calibration_data>
 8002448:	4603      	mov	r3, r0
 800244a:	f083 0301 	eor.w	r3, r3, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <bmp280_init+0xba>
		return false;
 8002454:	2300      	movs	r3, #0
 8002456:	e04b      	b.n	80024f0 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	795b      	ldrb	r3, [r3, #5]
 800245c:	015b      	lsls	r3, r3, #5
 800245e:	b25a      	sxtb	r2, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	785b      	ldrb	r3, [r3, #1]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	b25b      	sxtb	r3, r3
 8002468:	4313      	orrs	r3, r2
 800246a:	b25b      	sxtb	r3, r3
 800246c:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	461a      	mov	r2, r3
 8002472:	21f5      	movs	r1, #245	@ 0xf5
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ff6d 	bl	8002354 <write_register8>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <bmp280_init+0xe6>
		return false;
 8002480:	2300      	movs	r3, #0
 8002482:	e035      	b.n	80024f0 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d102      	bne.n	8002492 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	78db      	ldrb	r3, [r3, #3]
 8002496:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8002498:	b25a      	sxtb	r2, r3
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	789b      	ldrb	r3, [r3, #2]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	b25b      	sxtb	r3, r3
 80024a2:	4313      	orrs	r3, r2
 80024a4:	b25a      	sxtb	r2, r3
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	b25b      	sxtb	r3, r3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80024b0:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80024b8:	2b60      	cmp	r3, #96	@ 0x60
 80024ba:	d10d      	bne.n	80024d8 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	791b      	ldrb	r3, [r3, #4]
 80024c0:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80024c2:	7b7b      	ldrb	r3, [r7, #13]
 80024c4:	461a      	mov	r2, r3
 80024c6:	21f2      	movs	r1, #242	@ 0xf2
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ff43 	bl	8002354 <write_register8>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <bmp280_init+0x13a>
			return false;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e00b      	b.n	80024f0 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80024d8:	7bbb      	ldrb	r3, [r7, #14]
 80024da:	461a      	mov	r2, r3
 80024dc:	21f4      	movs	r1, #244	@ 0xf4
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ff38 	bl	8002354 <write_register8>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <bmp280_init+0x150>
		return false;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e000      	b.n	80024f0 <bmp280_init+0x152>
	}

	return true;
 80024ee:	2301      	movs	r3, #1
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	10da      	asrs	r2, r3, #3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8002516:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800251a:	12db      	asrs	r3, r3, #11
 800251c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	111b      	asrs	r3, r3, #4
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	8812      	ldrh	r2, [r2, #0]
 8002526:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	1112      	asrs	r2, r2, #4
 800252c:	68f9      	ldr	r1, [r7, #12]
 800252e:	8809      	ldrh	r1, [r1, #0]
 8002530:	1a52      	subs	r2, r2, r1
 8002532:	fb02 f303 	mul.w	r3, r2, r3
 8002536:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800253e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8002542:	139b      	asrs	r3, r3, #14
 8002544:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	441a      	add	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	3380      	adds	r3, #128	@ 0x80
 800255c:	121b      	asrs	r3, r3, #8
}
 800255e:	4618      	mov	r0, r3
 8002560:	371c      	adds	r7, #28
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 800256a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800256e:	b0cc      	sub	sp, #304	@ 0x130
 8002570:	af00      	add	r7, sp, #0
 8002572:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8002576:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 800257a:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800257e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002582:	17da      	asrs	r2, r3, #31
 8002584:	461c      	mov	r4, r3
 8002586:	4615      	mov	r5, r2
 8002588:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800258c:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 8002590:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8002594:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002598:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800259c:	fb03 f102 	mul.w	r1, r3, r2
 80025a0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80025a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80025a8:	fb02 f303 	mul.w	r3, r2, r3
 80025ac:	18ca      	adds	r2, r1, r3
 80025ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80025b2:	fba3 8903 	umull	r8, r9, r3, r3
 80025b6:	eb02 0309 	add.w	r3, r2, r9
 80025ba:	4699      	mov	r9, r3
 80025bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025c0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80025c4:	b21b      	sxth	r3, r3
 80025c6:	17da      	asrs	r2, r3, #31
 80025c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80025cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80025d0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80025d4:	4603      	mov	r3, r0
 80025d6:	fb03 f209 	mul.w	r2, r3, r9
 80025da:	460b      	mov	r3, r1
 80025dc:	fb08 f303 	mul.w	r3, r8, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	4602      	mov	r2, r0
 80025e4:	fba8 1202 	umull	r1, r2, r8, r2
 80025e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80025ec:	460a      	mov	r2, r1
 80025ee:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80025f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80025f6:	4413      	add	r3, r2
 80025f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80025fc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8002600:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8002604:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8002608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800260c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002610:	b21b      	sxth	r3, r3
 8002612:	17da      	asrs	r2, r3, #31
 8002614:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002618:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800261c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002620:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8002624:	462a      	mov	r2, r5
 8002626:	fb02 f203 	mul.w	r2, r2, r3
 800262a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800262e:	4621      	mov	r1, r4
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	441a      	add	r2, r3
 8002636:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800263a:	4621      	mov	r1, r4
 800263c:	fba3 1301 	umull	r1, r3, r3, r1
 8002640:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002644:	460b      	mov	r3, r1
 8002646:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800264a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800264e:	18d3      	adds	r3, r2, r3
 8002650:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002654:	f04f 0000 	mov.w	r0, #0
 8002658:	f04f 0100 	mov.w	r1, #0
 800265c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8002660:	462b      	mov	r3, r5
 8002662:	0459      	lsls	r1, r3, #17
 8002664:	4623      	mov	r3, r4
 8002666:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800266a:	4623      	mov	r3, r4
 800266c:	0458      	lsls	r0, r3, #17
 800266e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002672:	1814      	adds	r4, r2, r0
 8002674:	643c      	str	r4, [r7, #64]	@ 0x40
 8002676:	414b      	adcs	r3, r1
 8002678:	647b      	str	r3, [r7, #68]	@ 0x44
 800267a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800267e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8002682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002686:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800268a:	b21b      	sxth	r3, r3
 800268c:	17da      	asrs	r2, r3, #31
 800268e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002692:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002696:	f04f 0000 	mov.w	r0, #0
 800269a:	f04f 0100 	mov.w	r1, #0
 800269e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026a2:	00d9      	lsls	r1, r3, #3
 80026a4:	2000      	movs	r0, #0
 80026a6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80026aa:	1814      	adds	r4, r2, r0
 80026ac:	63bc      	str	r4, [r7, #56]	@ 0x38
 80026ae:	414b      	adcs	r3, r1
 80026b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026b2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80026b6:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80026ba:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80026be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80026c2:	fb03 f102 	mul.w	r1, r3, r2
 80026c6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80026ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80026ce:	fb02 f303 	mul.w	r3, r2, r3
 80026d2:	18ca      	adds	r2, r1, r3
 80026d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80026d8:	fba3 1303 	umull	r1, r3, r3, r3
 80026dc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80026e0:	460b      	mov	r3, r1
 80026e2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80026e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026ea:	18d3      	adds	r3, r2, r3
 80026ec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80026f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80026f8:	b21b      	sxth	r3, r3
 80026fa:	17da      	asrs	r2, r3, #31
 80026fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002700:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002704:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8002708:	462b      	mov	r3, r5
 800270a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800270e:	4642      	mov	r2, r8
 8002710:	fb02 f203 	mul.w	r2, r2, r3
 8002714:	464b      	mov	r3, r9
 8002716:	4621      	mov	r1, r4
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	4622      	mov	r2, r4
 8002720:	4641      	mov	r1, r8
 8002722:	fba2 1201 	umull	r1, r2, r2, r1
 8002726:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800272a:	460a      	mov	r2, r1
 800272c:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8002730:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8002734:	4413      	add	r3, r2
 8002736:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800273a:	f04f 0000 	mov.w	r0, #0
 800273e:	f04f 0100 	mov.w	r1, #0
 8002742:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8002746:	4623      	mov	r3, r4
 8002748:	0a18      	lsrs	r0, r3, #8
 800274a:	462b      	mov	r3, r5
 800274c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002750:	462b      	mov	r3, r5
 8002752:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8002754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002758:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800275c:	b21b      	sxth	r3, r3
 800275e:	17da      	asrs	r2, r3, #31
 8002760:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002764:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002768:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800276c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8002770:	464a      	mov	r2, r9
 8002772:	fb02 f203 	mul.w	r2, r2, r3
 8002776:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800277a:	4644      	mov	r4, r8
 800277c:	fb04 f303 	mul.w	r3, r4, r3
 8002780:	441a      	add	r2, r3
 8002782:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002786:	4644      	mov	r4, r8
 8002788:	fba3 4304 	umull	r4, r3, r3, r4
 800278c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002790:	4623      	mov	r3, r4
 8002792:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002796:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800279a:	18d3      	adds	r3, r2, r3
 800279c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80027ac:	464c      	mov	r4, r9
 80027ae:	0323      	lsls	r3, r4, #12
 80027b0:	4644      	mov	r4, r8
 80027b2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80027b6:	4644      	mov	r4, r8
 80027b8:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80027ba:	1884      	adds	r4, r0, r2
 80027bc:	633c      	str	r4, [r7, #48]	@ 0x30
 80027be:	eb41 0303 	adc.w	r3, r1, r3
 80027c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80027c4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80027c8:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80027cc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80027d0:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80027d4:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80027d8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80027dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027e0:	88db      	ldrh	r3, [r3, #6]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2200      	movs	r2, #0
 80027e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027ea:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80027ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027f2:	462b      	mov	r3, r5
 80027f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80027f8:	4642      	mov	r2, r8
 80027fa:	fb02 f203 	mul.w	r2, r2, r3
 80027fe:	464b      	mov	r3, r9
 8002800:	4621      	mov	r1, r4
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	4413      	add	r3, r2
 8002808:	4622      	mov	r2, r4
 800280a:	4641      	mov	r1, r8
 800280c:	fba2 1201 	umull	r1, r2, r2, r1
 8002810:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8002814:	460a      	mov	r2, r1
 8002816:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800281a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800281e:	4413      	add	r3, r2
 8002820:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8002830:	4629      	mov	r1, r5
 8002832:	104a      	asrs	r2, r1, #1
 8002834:	4629      	mov	r1, r5
 8002836:	17cb      	asrs	r3, r1, #31
 8002838:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 800283c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8002840:	4313      	orrs	r3, r2
 8002842:	d101      	bne.n	8002848 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8002844:	2300      	movs	r3, #0
 8002846:	e148      	b.n	8002ada <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8002848:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800284c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8002850:	17da      	asrs	r2, r3, #31
 8002852:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002854:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002856:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800285a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800285e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002862:	105b      	asrs	r3, r3, #1
 8002864:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002868:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800286c:	07db      	lsls	r3, r3, #31
 800286e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002872:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002876:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800287a:	4621      	mov	r1, r4
 800287c:	1a89      	subs	r1, r1, r2
 800287e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8002880:	4629      	mov	r1, r5
 8002882:	eb61 0303 	sbc.w	r3, r1, r3
 8002886:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002888:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800288c:	4622      	mov	r2, r4
 800288e:	462b      	mov	r3, r5
 8002890:	1891      	adds	r1, r2, r2
 8002892:	6239      	str	r1, [r7, #32]
 8002894:	415b      	adcs	r3, r3
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
 8002898:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800289c:	4621      	mov	r1, r4
 800289e:	1851      	adds	r1, r2, r1
 80028a0:	61b9      	str	r1, [r7, #24]
 80028a2:	4629      	mov	r1, r5
 80028a4:	414b      	adcs	r3, r1
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80028b4:	4649      	mov	r1, r9
 80028b6:	018b      	lsls	r3, r1, #6
 80028b8:	4641      	mov	r1, r8
 80028ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028be:	4641      	mov	r1, r8
 80028c0:	018a      	lsls	r2, r1, #6
 80028c2:	4641      	mov	r1, r8
 80028c4:	1889      	adds	r1, r1, r2
 80028c6:	6139      	str	r1, [r7, #16]
 80028c8:	4649      	mov	r1, r9
 80028ca:	eb43 0101 	adc.w	r1, r3, r1
 80028ce:	6179      	str	r1, [r7, #20]
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80028dc:	4649      	mov	r1, r9
 80028de:	008b      	lsls	r3, r1, #2
 80028e0:	4641      	mov	r1, r8
 80028e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028e6:	4641      	mov	r1, r8
 80028e8:	008a      	lsls	r2, r1, #2
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	4622      	mov	r2, r4
 80028f2:	189b      	adds	r3, r3, r2
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	460b      	mov	r3, r1
 80028f8:	462a      	mov	r2, r5
 80028fa:	eb42 0303 	adc.w	r3, r2, r3
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800290c:	4649      	mov	r1, r9
 800290e:	008b      	lsls	r3, r1, #2
 8002910:	4641      	mov	r1, r8
 8002912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002916:	4641      	mov	r1, r8
 8002918:	008a      	lsls	r2, r1, #2
 800291a:	4610      	mov	r0, r2
 800291c:	4619      	mov	r1, r3
 800291e:	4603      	mov	r3, r0
 8002920:	4622      	mov	r2, r4
 8002922:	189b      	adds	r3, r3, r2
 8002924:	673b      	str	r3, [r7, #112]	@ 0x70
 8002926:	462b      	mov	r3, r5
 8002928:	460a      	mov	r2, r1
 800292a:	eb42 0303 	adc.w	r3, r2, r3
 800292e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002930:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8002934:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002938:	f7fd fcda 	bl	80002f0 <__aeabi_ldivmod>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8002944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002948:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800294c:	b21b      	sxth	r3, r3
 800294e:	17da      	asrs	r2, r3, #31
 8002950:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002952:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002954:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002958:	f04f 0000 	mov.w	r0, #0
 800295c:	f04f 0100 	mov.w	r1, #0
 8002960:	0b50      	lsrs	r0, r2, #13
 8002962:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002966:	1359      	asrs	r1, r3, #13
 8002968:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800296c:	462b      	mov	r3, r5
 800296e:	fb00 f203 	mul.w	r2, r0, r3
 8002972:	4623      	mov	r3, r4
 8002974:	fb03 f301 	mul.w	r3, r3, r1
 8002978:	4413      	add	r3, r2
 800297a:	4622      	mov	r2, r4
 800297c:	fba2 1200 	umull	r1, r2, r2, r0
 8002980:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002984:	460a      	mov	r2, r1
 8002986:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800298a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800298e:	4413      	add	r3, r2
 8002990:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002994:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002998:	f04f 0000 	mov.w	r0, #0
 800299c:	f04f 0100 	mov.w	r1, #0
 80029a0:	0b50      	lsrs	r0, r2, #13
 80029a2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80029a6:	1359      	asrs	r1, r3, #13
 80029a8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80029ac:	462b      	mov	r3, r5
 80029ae:	fb00 f203 	mul.w	r2, r0, r3
 80029b2:	4623      	mov	r3, r4
 80029b4:	fb03 f301 	mul.w	r3, r3, r1
 80029b8:	4413      	add	r3, r2
 80029ba:	4622      	mov	r2, r4
 80029bc:	fba2 1200 	umull	r1, r2, r2, r0
 80029c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029c4:	460a      	mov	r2, r1
 80029c6:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80029ca:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80029ce:	4413      	add	r3, r2
 80029d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80029e0:	4621      	mov	r1, r4
 80029e2:	0e4a      	lsrs	r2, r1, #25
 80029e4:	4629      	mov	r1, r5
 80029e6:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80029ea:	4629      	mov	r1, r5
 80029ec:	164b      	asrs	r3, r1, #25
 80029ee:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80029f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80029fa:	b21b      	sxth	r3, r3
 80029fc:	17da      	asrs	r2, r3, #31
 80029fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a00:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a02:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a06:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a0a:	462a      	mov	r2, r5
 8002a0c:	fb02 f203 	mul.w	r2, r2, r3
 8002a10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a14:	4621      	mov	r1, r4
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002a20:	4621      	mov	r1, r4
 8002a22:	fba2 1201 	umull	r1, r2, r2, r1
 8002a26:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8002a2a:	460a      	mov	r2, r1
 8002a2c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8002a30:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8002a34:	4413      	add	r3, r2
 8002a36:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002a46:	4621      	mov	r1, r4
 8002a48:	0cca      	lsrs	r2, r1, #19
 8002a4a:	4629      	mov	r1, r5
 8002a4c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002a50:	4629      	mov	r1, r5
 8002a52:	14cb      	asrs	r3, r1, #19
 8002a54:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8002a58:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8002a5c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8002a60:	1884      	adds	r4, r0, r2
 8002a62:	65bc      	str	r4, [r7, #88]	@ 0x58
 8002a64:	eb41 0303 	adc.w	r3, r1, r3
 8002a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a6a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002a6e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8002a72:	4621      	mov	r1, r4
 8002a74:	1889      	adds	r1, r1, r2
 8002a76:	6539      	str	r1, [r7, #80]	@ 0x50
 8002a78:	4629      	mov	r1, r5
 8002a7a:	eb43 0101 	adc.w	r1, r3, r1
 8002a7e:	6579      	str	r1, [r7, #84]	@ 0x54
 8002a80:	f04f 0000 	mov.w	r0, #0
 8002a84:	f04f 0100 	mov.w	r1, #0
 8002a88:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8002a8c:	4623      	mov	r3, r4
 8002a8e:	0a18      	lsrs	r0, r3, #8
 8002a90:	462b      	mov	r3, r5
 8002a92:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002a96:	462b      	mov	r3, r5
 8002a98:	1219      	asrs	r1, r3, #8
 8002a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a9e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002aa2:	b21b      	sxth	r3, r3
 8002aa4:	17da      	asrs	r2, r3, #31
 8002aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002aa8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8002ab6:	464c      	mov	r4, r9
 8002ab8:	0123      	lsls	r3, r4, #4
 8002aba:	4644      	mov	r4, r8
 8002abc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002ac0:	4644      	mov	r4, r8
 8002ac2:	0122      	lsls	r2, r4, #4
 8002ac4:	1884      	adds	r4, r0, r2
 8002ac6:	603c      	str	r4, [r7, #0]
 8002ac8:	eb41 0303 	adc.w	r3, r1, r3
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002ad2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8002ad6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002ae6 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8002ae6:	b480      	push	{r7}
 8002ae8:	b087      	sub	sp, #28
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8002af8:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	039a      	lsls	r2, r3, #14
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002b04:	051b      	lsls	r3, r3, #20
 8002b06:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002b1c:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8002b24:	4611      	mov	r1, r2
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	fb01 f202 	mul.w	r2, r1, r2
 8002b2c:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002b2e:	68f9      	ldr	r1, [r7, #12]
 8002b30:	7f09      	ldrb	r1, [r1, #28]
 8002b32:	4608      	mov	r0, r1
 8002b34:	6979      	ldr	r1, [r7, #20]
 8002b36:	fb00 f101 	mul.w	r1, r0, r1
 8002b3a:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002b3c:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002b40:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002b44:	1292      	asrs	r2, r2, #10
 8002b46:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8002b4a:	68f9      	ldr	r1, [r7, #12]
 8002b4c:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8002b50:	fb01 f202 	mul.w	r2, r1, r2
 8002b54:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002b58:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002b5a:	fb02 f303 	mul.w	r3, r2, r3
 8002b5e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	13db      	asrs	r3, r3, #15
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	13d2      	asrs	r2, r2, #15
 8002b68:	fb02 f303 	mul.w	r3, r2, r3
 8002b6c:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	7e12      	ldrb	r2, [r2, #24]
 8002b72:	fb02 f303 	mul.w	r3, r2, r3
 8002b76:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002b84:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002b8c:	bfa8      	it	ge
 8002b8e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8002b92:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	131b      	asrs	r3, r3, #12
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08c      	sub	sp, #48	@ 0x30
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002bb8:	2b60      	cmp	r3, #96	@ 0x60
 8002bba:	d007      	beq.n	8002bcc <bmp280_read_fixed+0x28>
		if (humidity)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <bmp280_read_fixed+0x32>
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	e000      	b.n	8002bd8 <bmp280_read_fixed+0x34>
 8002bd6:	2306      	movs	r3, #6
 8002bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8002bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f107 0218 	add.w	r2, r7, #24
 8002be2:	21f7      	movs	r1, #247	@ 0xf7
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f7ff faab 	bl	8002140 <read_data>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <bmp280_read_fixed+0x50>
		return false;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e038      	b.n	8002c66 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002bf4:	7e3b      	ldrb	r3, [r7, #24]
 8002bf6:	031a      	lsls	r2, r3, #12
 8002bf8:	7e7b      	ldrb	r3, [r7, #25]
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	7eba      	ldrb	r2, [r7, #26]
 8002c00:	0912      	lsrs	r2, r2, #4
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	4313      	orrs	r3, r2
 8002c06:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002c08:	7efb      	ldrb	r3, [r7, #27]
 8002c0a:	031a      	lsls	r2, r3, #12
 8002c0c:	7f3b      	ldrb	r3, [r7, #28]
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	4313      	orrs	r3, r2
 8002c12:	7f7a      	ldrb	r2, [r7, #29]
 8002c14:	0912      	lsrs	r2, r2, #4
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	461a      	mov	r2, r3
 8002c22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff fc67 	bl	80024f8 <compensate_temperature>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	461a      	mov	r2, r3
 8002c34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f7ff fc97 	bl	800256a <compensate_pressure>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8002c48:	7fbb      	ldrb	r3, [r7, #30]
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	7ffa      	ldrb	r2, [r7, #31]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	461a      	mov	r2, r3
 8002c56:	6a39      	ldr	r1, [r7, #32]
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f7ff ff44 	bl	8002ae6 <compensate_humidity>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	601a      	str	r2, [r3, #0]
	}

	return true;
 8002c64:	2301      	movs	r3, #1
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3730      	adds	r7, #48	@ 0x30
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <bmp280_read_float+0x1a>
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	e000      	b.n	8002c8c <bmp280_read_float+0x1c>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f107 0218 	add.w	r2, r7, #24
 8002c90:	f107 011c 	add.w	r1, r7, #28
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f7ff ff85 	bl	8002ba4 <bmp280_read_fixed>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d028      	beq.n	8002cf2 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	ee07 3a90 	vmov	s15, r3
 8002ca6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002caa:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8002cfc <bmp280_read_float+0x8c>
 8002cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	ee07 3a90 	vmov	s15, r3
 8002cbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cc2:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8002d00 <bmp280_read_float+0x90>
 8002cc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	ee07 3a90 	vmov	s15, r3
 8002cdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ce0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8002d04 <bmp280_read_float+0x94>
 8002ce4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <bmp280_read_float+0x84>
	}

	return false;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	42c80000 	.word	0x42c80000
 8002d00:	43800000 	.word	0x43800000
 8002d04:	44800000 	.word	0x44800000

08002d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d0c:	2003      	movs	r0, #3
 8002d0e:	f000 f8c2 	bl	8002e96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d12:	200f      	movs	r0, #15
 8002d14:	f7ff f828 	bl	8001d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d18:	f7fe fe14 	bl	8001944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return uwTick;
 8002d28:	4b03      	ldr	r3, [pc, #12]	@ (8002d38 <HAL_GetTick+0x14>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	20000970 	.word	0x20000970

08002d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d7c <__NVIC_SetPriorityGrouping+0x40>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d64:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6a:	4a04      	ldr	r2, [pc, #16]	@ (8002d7c <__NVIC_SetPriorityGrouping+0x40>)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	60d3      	str	r3, [r2, #12]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000ed00 	.word	0xe000ed00
 8002d80:	05fa0000 	.word	0x05fa0000

08002d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d88:	4b04      	ldr	r3, [pc, #16]	@ (8002d9c <__NVIC_GetPriorityGrouping+0x18>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	f003 0307 	and.w	r3, r3, #7
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	db0b      	blt.n	8002dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	4907      	ldr	r1, [pc, #28]	@ (8002dd8 <__NVIC_EnableIRQ+0x38>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000e100 	.word	0xe000e100

08002ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	db0a      	blt.n	8002e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	490c      	ldr	r1, [pc, #48]	@ (8002e28 <__NVIC_SetPriority+0x4c>)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	0112      	lsls	r2, r2, #4
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	440b      	add	r3, r1
 8002e00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e04:	e00a      	b.n	8002e1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	4908      	ldr	r1, [pc, #32]	@ (8002e2c <__NVIC_SetPriority+0x50>)
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	3b04      	subs	r3, #4
 8002e14:	0112      	lsls	r2, r2, #4
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	440b      	add	r3, r1
 8002e1a:	761a      	strb	r2, [r3, #24]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000e100 	.word	0xe000e100
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b089      	sub	sp, #36	@ 0x24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f1c3 0307 	rsb	r3, r3, #7
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	bf28      	it	cs
 8002e4e:	2304      	movcs	r3, #4
 8002e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3304      	adds	r3, #4
 8002e56:	2b06      	cmp	r3, #6
 8002e58:	d902      	bls.n	8002e60 <NVIC_EncodePriority+0x30>
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3b03      	subs	r3, #3
 8002e5e:	e000      	b.n	8002e62 <NVIC_EncodePriority+0x32>
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	401a      	ands	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	43d9      	mvns	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	4313      	orrs	r3, r2
         );
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3724      	adds	r7, #36	@ 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff ff4c 	bl	8002d3c <__NVIC_SetPriorityGrouping>
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ebe:	f7ff ff61 	bl	8002d84 <__NVIC_GetPriorityGrouping>
 8002ec2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	6978      	ldr	r0, [r7, #20]
 8002eca:	f7ff ffb1 	bl	8002e30 <NVIC_EncodePriority>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff80 	bl	8002ddc <__NVIC_SetPriority>
}
 8002edc:	bf00      	nop
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ff54 	bl	8002da0 <__NVIC_EnableIRQ>
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f0e:	f7ff ff09 	bl	8002d24 <HAL_GetTick>
 8002f12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d008      	beq.n	8002f32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2280      	movs	r2, #128	@ 0x80
 8002f24:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e052      	b.n	8002fd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0216 	bic.w	r2, r2, #22
 8002f40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d103      	bne.n	8002f62 <HAL_DMA_Abort+0x62>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0208 	bic.w	r2, r2, #8
 8002f70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f82:	e013      	b.n	8002fac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f84:	f7ff fece 	bl	8002d24 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d90c      	bls.n	8002fac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e015      	b.n	8002fd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e4      	bne.n	8002f84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbe:	223f      	movs	r2, #63	@ 0x3f
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d004      	beq.n	8002ffe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2280      	movs	r2, #128	@ 0x80
 8002ff8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e00c      	b.n	8003018 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2205      	movs	r2, #5
 8003002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0201 	bic.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003024:	b480      	push	{r7}
 8003026:	b089      	sub	sp, #36	@ 0x24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800303a:	2300      	movs	r3, #0
 800303c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
 8003042:	e175      	b.n	8003330 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003044:	2201      	movs	r2, #1
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	429a      	cmp	r2, r3
 800305e:	f040 8164 	bne.w	800332a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d005      	beq.n	800307a <HAL_GPIO_Init+0x56>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d130      	bne.n	80030dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	2203      	movs	r2, #3
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4013      	ands	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b0:	2201      	movs	r2, #1
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 0201 	and.w	r2, r3, #1
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d017      	beq.n	8003118 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	2203      	movs	r2, #3
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d123      	bne.n	800316c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	08da      	lsrs	r2, r3, #3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3208      	adds	r2, #8
 800312c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	220f      	movs	r2, #15
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	08da      	lsrs	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3208      	adds	r2, #8
 8003166:	69b9      	ldr	r1, [r7, #24]
 8003168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	2203      	movs	r2, #3
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0203 	and.w	r2, r3, #3
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80be 	beq.w	800332a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ae:	4b66      	ldr	r3, [pc, #408]	@ (8003348 <HAL_GPIO_Init+0x324>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b2:	4a65      	ldr	r2, [pc, #404]	@ (8003348 <HAL_GPIO_Init+0x324>)
 80031b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ba:	4b63      	ldr	r3, [pc, #396]	@ (8003348 <HAL_GPIO_Init+0x324>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031c6:	4a61      	ldr	r2, [pc, #388]	@ (800334c <HAL_GPIO_Init+0x328>)
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	3302      	adds	r3, #2
 80031ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	220f      	movs	r2, #15
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a58      	ldr	r2, [pc, #352]	@ (8003350 <HAL_GPIO_Init+0x32c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d037      	beq.n	8003262 <HAL_GPIO_Init+0x23e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a57      	ldr	r2, [pc, #348]	@ (8003354 <HAL_GPIO_Init+0x330>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d031      	beq.n	800325e <HAL_GPIO_Init+0x23a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a56      	ldr	r2, [pc, #344]	@ (8003358 <HAL_GPIO_Init+0x334>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d02b      	beq.n	800325a <HAL_GPIO_Init+0x236>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a55      	ldr	r2, [pc, #340]	@ (800335c <HAL_GPIO_Init+0x338>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d025      	beq.n	8003256 <HAL_GPIO_Init+0x232>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a54      	ldr	r2, [pc, #336]	@ (8003360 <HAL_GPIO_Init+0x33c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01f      	beq.n	8003252 <HAL_GPIO_Init+0x22e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a53      	ldr	r2, [pc, #332]	@ (8003364 <HAL_GPIO_Init+0x340>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d019      	beq.n	800324e <HAL_GPIO_Init+0x22a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a52      	ldr	r2, [pc, #328]	@ (8003368 <HAL_GPIO_Init+0x344>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d013      	beq.n	800324a <HAL_GPIO_Init+0x226>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a51      	ldr	r2, [pc, #324]	@ (800336c <HAL_GPIO_Init+0x348>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00d      	beq.n	8003246 <HAL_GPIO_Init+0x222>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a50      	ldr	r2, [pc, #320]	@ (8003370 <HAL_GPIO_Init+0x34c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <HAL_GPIO_Init+0x21e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a4f      	ldr	r2, [pc, #316]	@ (8003374 <HAL_GPIO_Init+0x350>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <HAL_GPIO_Init+0x21a>
 800323a:	2309      	movs	r3, #9
 800323c:	e012      	b.n	8003264 <HAL_GPIO_Init+0x240>
 800323e:	230a      	movs	r3, #10
 8003240:	e010      	b.n	8003264 <HAL_GPIO_Init+0x240>
 8003242:	2308      	movs	r3, #8
 8003244:	e00e      	b.n	8003264 <HAL_GPIO_Init+0x240>
 8003246:	2307      	movs	r3, #7
 8003248:	e00c      	b.n	8003264 <HAL_GPIO_Init+0x240>
 800324a:	2306      	movs	r3, #6
 800324c:	e00a      	b.n	8003264 <HAL_GPIO_Init+0x240>
 800324e:	2305      	movs	r3, #5
 8003250:	e008      	b.n	8003264 <HAL_GPIO_Init+0x240>
 8003252:	2304      	movs	r3, #4
 8003254:	e006      	b.n	8003264 <HAL_GPIO_Init+0x240>
 8003256:	2303      	movs	r3, #3
 8003258:	e004      	b.n	8003264 <HAL_GPIO_Init+0x240>
 800325a:	2302      	movs	r3, #2
 800325c:	e002      	b.n	8003264 <HAL_GPIO_Init+0x240>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_GPIO_Init+0x240>
 8003262:	2300      	movs	r3, #0
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	f002 0203 	and.w	r2, r2, #3
 800326a:	0092      	lsls	r2, r2, #2
 800326c:	4093      	lsls	r3, r2
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003274:	4935      	ldr	r1, [pc, #212]	@ (800334c <HAL_GPIO_Init+0x328>)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	089b      	lsrs	r3, r3, #2
 800327a:	3302      	adds	r3, #2
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003282:	4b3d      	ldr	r3, [pc, #244]	@ (8003378 <HAL_GPIO_Init+0x354>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032a6:	4a34      	ldr	r2, [pc, #208]	@ (8003378 <HAL_GPIO_Init+0x354>)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032ac:	4b32      	ldr	r3, [pc, #200]	@ (8003378 <HAL_GPIO_Init+0x354>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032d0:	4a29      	ldr	r2, [pc, #164]	@ (8003378 <HAL_GPIO_Init+0x354>)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032d6:	4b28      	ldr	r3, [pc, #160]	@ (8003378 <HAL_GPIO_Init+0x354>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	43db      	mvns	r3, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4013      	ands	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003378 <HAL_GPIO_Init+0x354>)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003300:	4b1d      	ldr	r3, [pc, #116]	@ (8003378 <HAL_GPIO_Init+0x354>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003324:	4a14      	ldr	r2, [pc, #80]	@ (8003378 <HAL_GPIO_Init+0x354>)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3301      	adds	r3, #1
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b0f      	cmp	r3, #15
 8003334:	f67f ae86 	bls.w	8003044 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	3724      	adds	r7, #36	@ 0x24
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	40013800 	.word	0x40013800
 8003350:	40020000 	.word	0x40020000
 8003354:	40020400 	.word	0x40020400
 8003358:	40020800 	.word	0x40020800
 800335c:	40020c00 	.word	0x40020c00
 8003360:	40021000 	.word	0x40021000
 8003364:	40021400 	.word	0x40021400
 8003368:	40021800 	.word	0x40021800
 800336c:	40021c00 	.word	0x40021c00
 8003370:	40022000 	.word	0x40022000
 8003374:	40022400 	.word	0x40022400
 8003378:	40013c00 	.word	0x40013c00

0800337c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	807b      	strh	r3, [r7, #2]
 8003388:	4613      	mov	r3, r2
 800338a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800338c:	787b      	ldrb	r3, [r7, #1]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003398:	e003      	b.n	80033a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800339a:	887b      	ldrh	r3, [r7, #2]
 800339c:	041a      	lsls	r2, r3, #16
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	619a      	str	r2, [r3, #24]
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033ba:	4b08      	ldr	r3, [pc, #32]	@ (80033dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d006      	beq.n	80033d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033c6:	4a05      	ldr	r2, [pc, #20]	@ (80033dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fd ff98 	bl	8001304 <HAL_GPIO_EXTI_Callback>
  }
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40013c00 	.word	0x40013c00

080033e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e08b      	b.n	800350a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fe fac4 	bl	8001994 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2224      	movs	r2, #36	@ 0x24
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0201 	bic.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003430:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003440:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d107      	bne.n	800345a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	e006      	b.n	8003468 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003466:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d108      	bne.n	8003482 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	e007      	b.n	8003492 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003490:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6859      	ldr	r1, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4b1d      	ldr	r3, [pc, #116]	@ (8003514 <HAL_I2C_Init+0x134>)
 800349e:	430b      	orrs	r3, r1
 80034a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69d9      	ldr	r1, [r3, #28]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1a      	ldr	r2, [r3, #32]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	02008000 	.word	0x02008000

08003518 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	4608      	mov	r0, r1
 8003522:	4611      	mov	r1, r2
 8003524:	461a      	mov	r2, r3
 8003526:	4603      	mov	r3, r0
 8003528:	817b      	strh	r3, [r7, #10]
 800352a:	460b      	mov	r3, r1
 800352c:	813b      	strh	r3, [r7, #8]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b20      	cmp	r3, #32
 800353c:	f040 80f9 	bne.w	8003732 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <HAL_I2C_Mem_Write+0x34>
 8003546:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003548:	2b00      	cmp	r3, #0
 800354a:	d105      	bne.n	8003558 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003552:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0ed      	b.n	8003734 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_I2C_Mem_Write+0x4e>
 8003562:	2302      	movs	r3, #2
 8003564:	e0e6      	b.n	8003734 <HAL_I2C_Mem_Write+0x21c>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800356e:	f7ff fbd9 	bl	8002d24 <HAL_GetTick>
 8003572:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	2319      	movs	r3, #25
 800357a:	2201      	movs	r2, #1
 800357c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 fac3 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0d1      	b.n	8003734 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2221      	movs	r2, #33	@ 0x21
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2240      	movs	r2, #64	@ 0x40
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a3a      	ldr	r2, [r7, #32]
 80035aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80035b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035b8:	88f8      	ldrh	r0, [r7, #6]
 80035ba:	893a      	ldrh	r2, [r7, #8]
 80035bc:	8979      	ldrh	r1, [r7, #10]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	4603      	mov	r3, r0
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f9d3 	bl	8003974 <I2C_RequestMemoryWrite>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0a9      	b.n	8003734 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2bff      	cmp	r3, #255	@ 0xff
 80035e8:	d90e      	bls.n	8003608 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	22ff      	movs	r2, #255	@ 0xff
 80035ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	8979      	ldrh	r1, [r7, #10]
 80035f8:	2300      	movs	r3, #0
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fc47 	bl	8003e94 <I2C_TransferConfig>
 8003606:	e00f      	b.n	8003628 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003616:	b2da      	uxtb	r2, r3
 8003618:	8979      	ldrh	r1, [r7, #10]
 800361a:	2300      	movs	r3, #0
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 fc36 	bl	8003e94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 fac6 	bl	8003bbe <I2C_WaitOnTXISFlagUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e07b      	b.n	8003734 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	781a      	ldrb	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d034      	beq.n	80036e0 <HAL_I2C_Mem_Write+0x1c8>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367a:	2b00      	cmp	r3, #0
 800367c:	d130      	bne.n	80036e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003684:	2200      	movs	r2, #0
 8003686:	2180      	movs	r1, #128	@ 0x80
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 fa3f 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e04d      	b.n	8003734 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	2bff      	cmp	r3, #255	@ 0xff
 80036a0:	d90e      	bls.n	80036c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	22ff      	movs	r2, #255	@ 0xff
 80036a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	8979      	ldrh	r1, [r7, #10]
 80036b0:	2300      	movs	r3, #0
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fbeb 	bl	8003e94 <I2C_TransferConfig>
 80036be:	e00f      	b.n	80036e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	8979      	ldrh	r1, [r7, #10]
 80036d2:	2300      	movs	r3, #0
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fbda 	bl	8003e94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d19e      	bne.n	8003628 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 faac 	bl	8003c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e01a      	b.n	8003734 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2220      	movs	r2, #32
 8003704:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b0a      	ldr	r3, [pc, #40]	@ (800373c <HAL_I2C_Mem_Write+0x224>)
 8003712:	400b      	ands	r3, r1
 8003714:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	e000      	b.n	8003734 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003732:	2302      	movs	r3, #2
  }
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	fe00e800 	.word	0xfe00e800

08003740 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	4608      	mov	r0, r1
 800374a:	4611      	mov	r1, r2
 800374c:	461a      	mov	r2, r3
 800374e:	4603      	mov	r3, r0
 8003750:	817b      	strh	r3, [r7, #10]
 8003752:	460b      	mov	r3, r1
 8003754:	813b      	strh	r3, [r7, #8]
 8003756:	4613      	mov	r3, r2
 8003758:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b20      	cmp	r3, #32
 8003764:	f040 80fd 	bne.w	8003962 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_I2C_Mem_Read+0x34>
 800376e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003770:	2b00      	cmp	r3, #0
 8003772:	d105      	bne.n	8003780 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800377a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0f1      	b.n	8003964 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_I2C_Mem_Read+0x4e>
 800378a:	2302      	movs	r3, #2
 800378c:	e0ea      	b.n	8003964 <HAL_I2C_Mem_Read+0x224>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003796:	f7ff fac5 	bl	8002d24 <HAL_GetTick>
 800379a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	2319      	movs	r3, #25
 80037a2:	2201      	movs	r2, #1
 80037a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f9af 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0d5      	b.n	8003964 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2222      	movs	r2, #34	@ 0x22
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2240      	movs	r2, #64	@ 0x40
 80037c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a3a      	ldr	r2, [r7, #32]
 80037d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037e0:	88f8      	ldrh	r0, [r7, #6]
 80037e2:	893a      	ldrh	r2, [r7, #8]
 80037e4:	8979      	ldrh	r1, [r7, #10]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	9301      	str	r3, [sp, #4]
 80037ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	4603      	mov	r3, r0
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f913 	bl	8003a1c <I2C_RequestMemoryRead>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0ad      	b.n	8003964 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	2bff      	cmp	r3, #255	@ 0xff
 8003810:	d90e      	bls.n	8003830 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381c:	b2da      	uxtb	r2, r3
 800381e:	8979      	ldrh	r1, [r7, #10]
 8003820:	4b52      	ldr	r3, [pc, #328]	@ (800396c <HAL_I2C_Mem_Read+0x22c>)
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 fb33 	bl	8003e94 <I2C_TransferConfig>
 800382e:	e00f      	b.n	8003850 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383e:	b2da      	uxtb	r2, r3
 8003840:	8979      	ldrh	r1, [r7, #10]
 8003842:	4b4a      	ldr	r3, [pc, #296]	@ (800396c <HAL_I2C_Mem_Read+0x22c>)
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fb22 	bl	8003e94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003856:	2200      	movs	r2, #0
 8003858:	2104      	movs	r1, #4
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f956 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e07c      	b.n	8003964 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d034      	beq.n	8003910 <HAL_I2C_Mem_Read+0x1d0>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d130      	bne.n	8003910 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b4:	2200      	movs	r2, #0
 80038b6:	2180      	movs	r1, #128	@ 0x80
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f927 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e04d      	b.n	8003964 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2bff      	cmp	r3, #255	@ 0xff
 80038d0:	d90e      	bls.n	80038f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	8979      	ldrh	r1, [r7, #10]
 80038e0:	2300      	movs	r3, #0
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fad3 	bl	8003e94 <I2C_TransferConfig>
 80038ee:	e00f      	b.n	8003910 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	8979      	ldrh	r1, [r7, #10]
 8003902:	2300      	movs	r3, #0
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 fac2 	bl	8003e94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d19a      	bne.n	8003850 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f994 	bl	8003c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e01a      	b.n	8003964 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2220      	movs	r2, #32
 8003934:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6859      	ldr	r1, [r3, #4]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4b0b      	ldr	r3, [pc, #44]	@ (8003970 <HAL_I2C_Mem_Read+0x230>)
 8003942:	400b      	ands	r3, r1
 8003944:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	e000      	b.n	8003964 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003962:	2302      	movs	r3, #2
  }
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	80002400 	.word	0x80002400
 8003970:	fe00e800 	.word	0xfe00e800

08003974 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af02      	add	r7, sp, #8
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	4608      	mov	r0, r1
 800397e:	4611      	mov	r1, r2
 8003980:	461a      	mov	r2, r3
 8003982:	4603      	mov	r3, r0
 8003984:	817b      	strh	r3, [r7, #10]
 8003986:	460b      	mov	r3, r1
 8003988:	813b      	strh	r3, [r7, #8]
 800398a:	4613      	mov	r3, r2
 800398c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800398e:	88fb      	ldrh	r3, [r7, #6]
 8003990:	b2da      	uxtb	r2, r3
 8003992:	8979      	ldrh	r1, [r7, #10]
 8003994:	4b20      	ldr	r3, [pc, #128]	@ (8003a18 <I2C_RequestMemoryWrite+0xa4>)
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fa79 	bl	8003e94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	69b9      	ldr	r1, [r7, #24]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f909 	bl	8003bbe <I2C_WaitOnTXISFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e02c      	b.n	8003a10 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039b6:	88fb      	ldrh	r3, [r7, #6]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d105      	bne.n	80039c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039bc:	893b      	ldrh	r3, [r7, #8]
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80039c6:	e015      	b.n	80039f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039c8:	893b      	ldrh	r3, [r7, #8]
 80039ca:	0a1b      	lsrs	r3, r3, #8
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d6:	69fa      	ldr	r2, [r7, #28]
 80039d8:	69b9      	ldr	r1, [r7, #24]
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 f8ef 	bl	8003bbe <I2C_WaitOnTXISFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e012      	b.n	8003a10 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039ea:	893b      	ldrh	r3, [r7, #8]
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2200      	movs	r2, #0
 80039fc:	2180      	movs	r1, #128	@ 0x80
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f884 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	80002000 	.word	0x80002000

08003a1c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	4608      	mov	r0, r1
 8003a26:	4611      	mov	r1, r2
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	817b      	strh	r3, [r7, #10]
 8003a2e:	460b      	mov	r3, r1
 8003a30:	813b      	strh	r3, [r7, #8]
 8003a32:	4613      	mov	r3, r2
 8003a34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a36:	88fb      	ldrh	r3, [r7, #6]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	8979      	ldrh	r1, [r7, #10]
 8003a3c:	4b20      	ldr	r3, [pc, #128]	@ (8003ac0 <I2C_RequestMemoryRead+0xa4>)
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	2300      	movs	r3, #0
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 fa26 	bl	8003e94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a48:	69fa      	ldr	r2, [r7, #28]
 8003a4a:	69b9      	ldr	r1, [r7, #24]
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f8b6 	bl	8003bbe <I2C_WaitOnTXISFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e02c      	b.n	8003ab6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d105      	bne.n	8003a6e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a62:	893b      	ldrh	r3, [r7, #8]
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a6c:	e015      	b.n	8003a9a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a6e:	893b      	ldrh	r3, [r7, #8]
 8003a70:	0a1b      	lsrs	r3, r3, #8
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	69b9      	ldr	r1, [r7, #24]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 f89c 	bl	8003bbe <I2C_WaitOnTXISFlagUntilTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e012      	b.n	8003ab6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a90:	893b      	ldrh	r3, [r7, #8]
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2140      	movs	r1, #64	@ 0x40
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f831 	bl	8003b0c <I2C_WaitOnFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	80002000 	.word	0x80002000

08003ac4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d103      	bne.n	8003ae2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d007      	beq.n	8003b00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	619a      	str	r2, [r3, #24]
  }
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b1c:	e03b      	b.n	8003b96 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	6839      	ldr	r1, [r7, #0]
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f8d6 	bl	8003cd4 <I2C_IsErrorOccurred>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e041      	b.n	8003bb6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b38:	d02d      	beq.n	8003b96 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7ff f8f3 	bl	8002d24 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d122      	bne.n	8003b96 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d113      	bne.n	8003b96 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b72:	f043 0220 	orr.w	r2, r3, #32
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e00f      	b.n	8003bb6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699a      	ldr	r2, [r3, #24]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	bf0c      	ite	eq
 8003ba6:	2301      	moveq	r3, #1
 8003ba8:	2300      	movne	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d0b4      	beq.n	8003b1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bca:	e033      	b.n	8003c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 f87f 	bl	8003cd4 <I2C_IsErrorOccurred>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e031      	b.n	8003c44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003be6:	d025      	beq.n	8003c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be8:	f7ff f89c 	bl	8002d24 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d302      	bcc.n	8003bfe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d11a      	bne.n	8003c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d013      	beq.n	8003c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c10:	f043 0220 	orr.w	r2, r3, #32
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e007      	b.n	8003c44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d1c4      	bne.n	8003bcc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c58:	e02f      	b.n	8003cba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f838 	bl	8003cd4 <I2C_IsErrorOccurred>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e02d      	b.n	8003cca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6e:	f7ff f859 	bl	8002d24 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d302      	bcc.n	8003c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d11a      	bne.n	8003cba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d013      	beq.n	8003cba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c96:	f043 0220 	orr.w	r2, r3, #32
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e007      	b.n	8003cca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d1c8      	bne.n	8003c5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	@ 0x28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d068      	beq.n	8003dd2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2210      	movs	r2, #16
 8003d06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d08:	e049      	b.n	8003d9e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d10:	d045      	beq.n	8003d9e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d12:	f7ff f807 	bl	8002d24 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d302      	bcc.n	8003d28 <I2C_IsErrorOccurred+0x54>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d13a      	bne.n	8003d9e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d4a:	d121      	bne.n	8003d90 <I2C_IsErrorOccurred+0xbc>
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d52:	d01d      	beq.n	8003d90 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003d54:	7cfb      	ldrb	r3, [r7, #19]
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d01a      	beq.n	8003d90 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d6a:	f7fe ffdb 	bl	8002d24 <HAL_GetTick>
 8003d6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d70:	e00e      	b.n	8003d90 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d72:	f7fe ffd7 	bl	8002d24 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b19      	cmp	r3, #25
 8003d7e:	d907      	bls.n	8003d90 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	f043 0320 	orr.w	r3, r3, #32
 8003d86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003d8e:	e006      	b.n	8003d9e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d1e9      	bne.n	8003d72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d003      	beq.n	8003db4 <I2C_IsErrorOccurred+0xe0>
 8003dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0aa      	beq.n	8003d0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003db4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d103      	bne.n	8003dc4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	f043 0304 	orr.w	r3, r3, #4
 8003dca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00b      	beq.n	8003dfc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003df4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00b      	beq.n	8003e1e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	f043 0308 	orr.w	r3, r3, #8
 8003e0c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00b      	beq.n	8003e40 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	f043 0302 	orr.w	r3, r3, #2
 8003e2e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003e40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01c      	beq.n	8003e82 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f7ff fe3b 	bl	8003ac4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6859      	ldr	r1, [r3, #4]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4b0d      	ldr	r3, [pc, #52]	@ (8003e90 <I2C_IsErrorOccurred+0x1bc>)
 8003e5a:	400b      	ands	r3, r1
 8003e5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	431a      	orrs	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003e82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3728      	adds	r7, #40	@ 0x28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	fe00e800 	.word	0xfe00e800

08003e94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	607b      	str	r3, [r7, #4]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	817b      	strh	r3, [r7, #10]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ea6:	897b      	ldrh	r3, [r7, #10]
 8003ea8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003eac:	7a7b      	ldrb	r3, [r7, #9]
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eb4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ec2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	0d5b      	lsrs	r3, r3, #21
 8003ece:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003ed2:	4b08      	ldr	r3, [pc, #32]	@ (8003ef4 <I2C_TransferConfig+0x60>)
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	ea02 0103 	and.w	r1, r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ee6:	bf00      	nop
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	03ff63ff 	.word	0x03ff63ff

08003ef8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d138      	bne.n	8003f80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e032      	b.n	8003f82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2224      	movs	r2, #36	@ 0x24
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0201 	bic.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6819      	ldr	r1, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e000      	b.n	8003f82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f80:	2302      	movs	r3, #2
  }
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b085      	sub	sp, #20
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d139      	bne.n	8004018 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e033      	b.n	800401a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2224      	movs	r2, #36	@ 0x24
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0201 	bic.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003fe0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	e000      	b.n	800401a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004018:	2302      	movs	r3, #2
  }
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800402c:	4b05      	ldr	r3, [pc, #20]	@ (8004044 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a04      	ldr	r2, [pc, #16]	@ (8004044 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004036:	6013      	str	r3, [r2, #0]
}
 8004038:	bf00      	nop
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40007000 	.word	0x40007000

08004048 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004052:	4b23      	ldr	r3, [pc, #140]	@ (80040e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	4a22      	ldr	r2, [pc, #136]	@ (80040e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800405c:	6413      	str	r3, [r2, #64]	@ 0x40
 800405e:	4b20      	ldr	r3, [pc, #128]	@ (80040e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800406a:	4b1e      	ldr	r3, [pc, #120]	@ (80040e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1d      	ldr	r2, [pc, #116]	@ (80040e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004074:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004076:	f7fe fe55 	bl	8002d24 <HAL_GetTick>
 800407a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800407c:	e009      	b.n	8004092 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800407e:	f7fe fe51 	bl	8002d24 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800408c:	d901      	bls.n	8004092 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e022      	b.n	80040d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004092:	4b14      	ldr	r3, [pc, #80]	@ (80040e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800409a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800409e:	d1ee      	bne.n	800407e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80040a0:	4b10      	ldr	r3, [pc, #64]	@ (80040e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0f      	ldr	r2, [pc, #60]	@ (80040e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040ac:	f7fe fe3a 	bl	8002d24 <HAL_GetTick>
 80040b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040b2:	e009      	b.n	80040c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040b4:	f7fe fe36 	bl	8002d24 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040c2:	d901      	bls.n	80040c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e007      	b.n	80040d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040c8:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040d4:	d1ee      	bne.n	80040b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40007000 	.word	0x40007000

080040e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80040f0:	2300      	movs	r3, #0
 80040f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e29b      	b.n	8004636 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 8087 	beq.w	800421a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800410c:	4b96      	ldr	r3, [pc, #600]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 030c 	and.w	r3, r3, #12
 8004114:	2b04      	cmp	r3, #4
 8004116:	d00c      	beq.n	8004132 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004118:	4b93      	ldr	r3, [pc, #588]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 030c 	and.w	r3, r3, #12
 8004120:	2b08      	cmp	r3, #8
 8004122:	d112      	bne.n	800414a <HAL_RCC_OscConfig+0x62>
 8004124:	4b90      	ldr	r3, [pc, #576]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800412c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004130:	d10b      	bne.n	800414a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004132:	4b8d      	ldr	r3, [pc, #564]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d06c      	beq.n	8004218 <HAL_RCC_OscConfig+0x130>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d168      	bne.n	8004218 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e275      	b.n	8004636 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004152:	d106      	bne.n	8004162 <HAL_RCC_OscConfig+0x7a>
 8004154:	4b84      	ldr	r3, [pc, #528]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a83      	ldr	r2, [pc, #524]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 800415a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	e02e      	b.n	80041c0 <HAL_RCC_OscConfig+0xd8>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10c      	bne.n	8004184 <HAL_RCC_OscConfig+0x9c>
 800416a:	4b7f      	ldr	r3, [pc, #508]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a7e      	ldr	r2, [pc, #504]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004170:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	4b7c      	ldr	r3, [pc, #496]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a7b      	ldr	r2, [pc, #492]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 800417c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	e01d      	b.n	80041c0 <HAL_RCC_OscConfig+0xd8>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800418c:	d10c      	bne.n	80041a8 <HAL_RCC_OscConfig+0xc0>
 800418e:	4b76      	ldr	r3, [pc, #472]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a75      	ldr	r2, [pc, #468]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004194:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	4b73      	ldr	r3, [pc, #460]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a72      	ldr	r2, [pc, #456]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 80041a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	e00b      	b.n	80041c0 <HAL_RCC_OscConfig+0xd8>
 80041a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a6e      	ldr	r2, [pc, #440]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 80041ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	4b6c      	ldr	r3, [pc, #432]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a6b      	ldr	r2, [pc, #428]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 80041ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d013      	beq.n	80041f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c8:	f7fe fdac 	bl	8002d24 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d0:	f7fe fda8 	bl	8002d24 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b64      	cmp	r3, #100	@ 0x64
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e229      	b.n	8004636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e2:	4b61      	ldr	r3, [pc, #388]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCC_OscConfig+0xe8>
 80041ee:	e014      	b.n	800421a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f0:	f7fe fd98 	bl	8002d24 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041f8:	f7fe fd94 	bl	8002d24 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b64      	cmp	r3, #100	@ 0x64
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e215      	b.n	8004636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800420a:	4b57      	ldr	r3, [pc, #348]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x110>
 8004216:	e000      	b.n	800421a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d069      	beq.n	80042fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004226:	4b50      	ldr	r3, [pc, #320]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00b      	beq.n	800424a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004232:	4b4d      	ldr	r3, [pc, #308]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
 800423a:	2b08      	cmp	r3, #8
 800423c:	d11c      	bne.n	8004278 <HAL_RCC_OscConfig+0x190>
 800423e:	4b4a      	ldr	r3, [pc, #296]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d116      	bne.n	8004278 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800424a:	4b47      	ldr	r3, [pc, #284]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d005      	beq.n	8004262 <HAL_RCC_OscConfig+0x17a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d001      	beq.n	8004262 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e1e9      	b.n	8004636 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004262:	4b41      	ldr	r3, [pc, #260]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	493d      	ldr	r1, [pc, #244]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004272:	4313      	orrs	r3, r2
 8004274:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004276:	e040      	b.n	80042fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d023      	beq.n	80042c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004280:	4b39      	ldr	r3, [pc, #228]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a38      	ldr	r2, [pc, #224]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004286:	f043 0301 	orr.w	r3, r3, #1
 800428a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fe fd4a 	bl	8002d24 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004294:	f7fe fd46 	bl	8002d24 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e1c7      	b.n	8004636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a6:	4b30      	ldr	r3, [pc, #192]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4929      	ldr	r1, [pc, #164]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	600b      	str	r3, [r1, #0]
 80042c6:	e018      	b.n	80042fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042c8:	4b27      	ldr	r3, [pc, #156]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a26      	ldr	r2, [pc, #152]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fe fd26 	bl	8002d24 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042dc:	f7fe fd22 	bl	8002d24 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e1a3      	b.n	8004636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d038      	beq.n	8004378 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d019      	beq.n	8004342 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800430e:	4b16      	ldr	r3, [pc, #88]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004312:	4a15      	ldr	r2, [pc, #84]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431a:	f7fe fd03 	bl	8002d24 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004322:	f7fe fcff 	bl	8002d24 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e180      	b.n	8004636 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004334:	4b0c      	ldr	r3, [pc, #48]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCC_OscConfig+0x23a>
 8004340:	e01a      	b.n	8004378 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004342:	4b09      	ldr	r3, [pc, #36]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004346:	4a08      	ldr	r2, [pc, #32]	@ (8004368 <HAL_RCC_OscConfig+0x280>)
 8004348:	f023 0301 	bic.w	r3, r3, #1
 800434c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434e:	f7fe fce9 	bl	8002d24 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004354:	e00a      	b.n	800436c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004356:	f7fe fce5 	bl	8002d24 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d903      	bls.n	800436c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e166      	b.n	8004636 <HAL_RCC_OscConfig+0x54e>
 8004368:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800436c:	4b92      	ldr	r3, [pc, #584]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 800436e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1ee      	bne.n	8004356 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 80a4 	beq.w	80044ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004386:	4b8c      	ldr	r3, [pc, #560]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10d      	bne.n	80043ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004392:	4b89      	ldr	r3, [pc, #548]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004396:	4a88      	ldr	r2, [pc, #544]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 8004398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800439c:	6413      	str	r3, [r2, #64]	@ 0x40
 800439e:	4b86      	ldr	r3, [pc, #536]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ae:	4b83      	ldr	r3, [pc, #524]	@ (80045bc <HAL_RCC_OscConfig+0x4d4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d118      	bne.n	80043ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80043ba:	4b80      	ldr	r3, [pc, #512]	@ (80045bc <HAL_RCC_OscConfig+0x4d4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a7f      	ldr	r2, [pc, #508]	@ (80045bc <HAL_RCC_OscConfig+0x4d4>)
 80043c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c6:	f7fe fcad 	bl	8002d24 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ce:	f7fe fca9 	bl	8002d24 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b64      	cmp	r3, #100	@ 0x64
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e12a      	b.n	8004636 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043e0:	4b76      	ldr	r3, [pc, #472]	@ (80045bc <HAL_RCC_OscConfig+0x4d4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d106      	bne.n	8004402 <HAL_RCC_OscConfig+0x31a>
 80043f4:	4b70      	ldr	r3, [pc, #448]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f8:	4a6f      	ldr	r2, [pc, #444]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004400:	e02d      	b.n	800445e <HAL_RCC_OscConfig+0x376>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10c      	bne.n	8004424 <HAL_RCC_OscConfig+0x33c>
 800440a:	4b6b      	ldr	r3, [pc, #428]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440e:	4a6a      	ldr	r2, [pc, #424]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	6713      	str	r3, [r2, #112]	@ 0x70
 8004416:	4b68      	ldr	r3, [pc, #416]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441a:	4a67      	ldr	r2, [pc, #412]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 800441c:	f023 0304 	bic.w	r3, r3, #4
 8004420:	6713      	str	r3, [r2, #112]	@ 0x70
 8004422:	e01c      	b.n	800445e <HAL_RCC_OscConfig+0x376>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2b05      	cmp	r3, #5
 800442a:	d10c      	bne.n	8004446 <HAL_RCC_OscConfig+0x35e>
 800442c:	4b62      	ldr	r3, [pc, #392]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004430:	4a61      	ldr	r2, [pc, #388]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 8004432:	f043 0304 	orr.w	r3, r3, #4
 8004436:	6713      	str	r3, [r2, #112]	@ 0x70
 8004438:	4b5f      	ldr	r3, [pc, #380]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443c:	4a5e      	ldr	r2, [pc, #376]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 800443e:	f043 0301 	orr.w	r3, r3, #1
 8004442:	6713      	str	r3, [r2, #112]	@ 0x70
 8004444:	e00b      	b.n	800445e <HAL_RCC_OscConfig+0x376>
 8004446:	4b5c      	ldr	r3, [pc, #368]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444a:	4a5b      	ldr	r2, [pc, #364]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 800444c:	f023 0301 	bic.w	r3, r3, #1
 8004450:	6713      	str	r3, [r2, #112]	@ 0x70
 8004452:	4b59      	ldr	r3, [pc, #356]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004456:	4a58      	ldr	r2, [pc, #352]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 8004458:	f023 0304 	bic.w	r3, r3, #4
 800445c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d015      	beq.n	8004492 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004466:	f7fe fc5d 	bl	8002d24 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446c:	e00a      	b.n	8004484 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800446e:	f7fe fc59 	bl	8002d24 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800447c:	4293      	cmp	r3, r2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e0d8      	b.n	8004636 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004484:	4b4c      	ldr	r3, [pc, #304]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0ee      	beq.n	800446e <HAL_RCC_OscConfig+0x386>
 8004490:	e014      	b.n	80044bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004492:	f7fe fc47 	bl	8002d24 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004498:	e00a      	b.n	80044b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449a:	f7fe fc43 	bl	8002d24 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e0c2      	b.n	8004636 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b0:	4b41      	ldr	r3, [pc, #260]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 80044b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1ee      	bne.n	800449a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d105      	bne.n	80044ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c2:	4b3d      	ldr	r3, [pc, #244]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	4a3c      	ldr	r2, [pc, #240]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 80044c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044cc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 80ae 	beq.w	8004634 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044d8:	4b37      	ldr	r3, [pc, #220]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 030c 	and.w	r3, r3, #12
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d06d      	beq.n	80045c0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d14b      	bne.n	8004584 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ec:	4b32      	ldr	r3, [pc, #200]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a31      	ldr	r2, [pc, #196]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 80044f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fe fc14 	bl	8002d24 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004500:	f7fe fc10 	bl	8002d24 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e091      	b.n	8004636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004512:	4b29      	ldr	r3, [pc, #164]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69da      	ldr	r2, [r3, #28]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452c:	019b      	lsls	r3, r3, #6
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004534:	085b      	lsrs	r3, r3, #1
 8004536:	3b01      	subs	r3, #1
 8004538:	041b      	lsls	r3, r3, #16
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004548:	071b      	lsls	r3, r3, #28
 800454a:	491b      	ldr	r1, [pc, #108]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 800454c:	4313      	orrs	r3, r2
 800454e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004550:	4b19      	ldr	r3, [pc, #100]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a18      	ldr	r2, [pc, #96]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 8004556:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800455a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fe fbe2 	bl	8002d24 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004564:	f7fe fbde 	bl	8002d24 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e05f      	b.n	8004636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004576:	4b10      	ldr	r3, [pc, #64]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x47c>
 8004582:	e057      	b.n	8004634 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004584:	4b0c      	ldr	r3, [pc, #48]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a0b      	ldr	r2, [pc, #44]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 800458a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800458e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004590:	f7fe fbc8 	bl	8002d24 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004598:	f7fe fbc4 	bl	8002d24 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e045      	b.n	8004636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045aa:	4b03      	ldr	r3, [pc, #12]	@ (80045b8 <HAL_RCC_OscConfig+0x4d0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0x4b0>
 80045b6:	e03d      	b.n	8004634 <HAL_RCC_OscConfig+0x54c>
 80045b8:	40023800 	.word	0x40023800
 80045bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80045c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004640 <HAL_RCC_OscConfig+0x558>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d030      	beq.n	8004630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045d8:	429a      	cmp	r2, r3
 80045da:	d129      	bne.n	8004630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d122      	bne.n	8004630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045f0:	4013      	ands	r3, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d119      	bne.n	8004630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004606:	085b      	lsrs	r3, r3, #1
 8004608:	3b01      	subs	r3, #1
 800460a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800460c:	429a      	cmp	r2, r3
 800460e:	d10f      	bne.n	8004630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800461c:	429a      	cmp	r2, r3
 800461e:	d107      	bne.n	8004630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800462c:	429a      	cmp	r2, r3
 800462e:	d001      	beq.n	8004634 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e000      	b.n	8004636 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40023800 	.word	0x40023800

08004644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0d0      	b.n	80047fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800465c:	4b6a      	ldr	r3, [pc, #424]	@ (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d910      	bls.n	800468c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466a:	4b67      	ldr	r3, [pc, #412]	@ (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f023 020f 	bic.w	r2, r3, #15
 8004672:	4965      	ldr	r1, [pc, #404]	@ (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	4313      	orrs	r3, r2
 8004678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800467a:	4b63      	ldr	r3, [pc, #396]	@ (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d001      	beq.n	800468c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e0b8      	b.n	80047fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d020      	beq.n	80046da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a4:	4b59      	ldr	r3, [pc, #356]	@ (800480c <HAL_RCC_ClockConfig+0x1c8>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	4a58      	ldr	r2, [pc, #352]	@ (800480c <HAL_RCC_ClockConfig+0x1c8>)
 80046aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046bc:	4b53      	ldr	r3, [pc, #332]	@ (800480c <HAL_RCC_ClockConfig+0x1c8>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	4a52      	ldr	r2, [pc, #328]	@ (800480c <HAL_RCC_ClockConfig+0x1c8>)
 80046c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c8:	4b50      	ldr	r3, [pc, #320]	@ (800480c <HAL_RCC_ClockConfig+0x1c8>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	494d      	ldr	r1, [pc, #308]	@ (800480c <HAL_RCC_ClockConfig+0x1c8>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d040      	beq.n	8004768 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d107      	bne.n	80046fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ee:	4b47      	ldr	r3, [pc, #284]	@ (800480c <HAL_RCC_ClockConfig+0x1c8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d115      	bne.n	8004726 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e07f      	b.n	80047fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b02      	cmp	r3, #2
 8004704:	d107      	bne.n	8004716 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004706:	4b41      	ldr	r3, [pc, #260]	@ (800480c <HAL_RCC_ClockConfig+0x1c8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e073      	b.n	80047fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004716:	4b3d      	ldr	r3, [pc, #244]	@ (800480c <HAL_RCC_ClockConfig+0x1c8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e06b      	b.n	80047fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004726:	4b39      	ldr	r3, [pc, #228]	@ (800480c <HAL_RCC_ClockConfig+0x1c8>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f023 0203 	bic.w	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	4936      	ldr	r1, [pc, #216]	@ (800480c <HAL_RCC_ClockConfig+0x1c8>)
 8004734:	4313      	orrs	r3, r2
 8004736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004738:	f7fe faf4 	bl	8002d24 <HAL_GetTick>
 800473c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473e:	e00a      	b.n	8004756 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004740:	f7fe faf0 	bl	8002d24 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e053      	b.n	80047fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004756:	4b2d      	ldr	r3, [pc, #180]	@ (800480c <HAL_RCC_ClockConfig+0x1c8>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 020c 	and.w	r2, r3, #12
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	429a      	cmp	r2, r3
 8004766:	d1eb      	bne.n	8004740 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004768:	4b27      	ldr	r3, [pc, #156]	@ (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d210      	bcs.n	8004798 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004776:	4b24      	ldr	r3, [pc, #144]	@ (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 020f 	bic.w	r2, r3, #15
 800477e:	4922      	ldr	r1, [pc, #136]	@ (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	4313      	orrs	r3, r2
 8004784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004786:	4b20      	ldr	r3, [pc, #128]	@ (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	429a      	cmp	r2, r3
 8004792:	d001      	beq.n	8004798 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e032      	b.n	80047fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047a4:	4b19      	ldr	r3, [pc, #100]	@ (800480c <HAL_RCC_ClockConfig+0x1c8>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4916      	ldr	r1, [pc, #88]	@ (800480c <HAL_RCC_ClockConfig+0x1c8>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047c2:	4b12      	ldr	r3, [pc, #72]	@ (800480c <HAL_RCC_ClockConfig+0x1c8>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	490e      	ldr	r1, [pc, #56]	@ (800480c <HAL_RCC_ClockConfig+0x1c8>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047d6:	f000 f821 	bl	800481c <HAL_RCC_GetSysClockFreq>
 80047da:	4602      	mov	r2, r0
 80047dc:	4b0b      	ldr	r3, [pc, #44]	@ (800480c <HAL_RCC_ClockConfig+0x1c8>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	091b      	lsrs	r3, r3, #4
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	490a      	ldr	r1, [pc, #40]	@ (8004810 <HAL_RCC_ClockConfig+0x1cc>)
 80047e8:	5ccb      	ldrb	r3, [r1, r3]
 80047ea:	fa22 f303 	lsr.w	r3, r2, r3
 80047ee:	4a09      	ldr	r2, [pc, #36]	@ (8004814 <HAL_RCC_ClockConfig+0x1d0>)
 80047f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047f2:	4b09      	ldr	r3, [pc, #36]	@ (8004818 <HAL_RCC_ClockConfig+0x1d4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fd fab6 	bl	8001d68 <HAL_InitTick>

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40023c00 	.word	0x40023c00
 800480c:	40023800 	.word	0x40023800
 8004810:	08012990 	.word	0x08012990
 8004814:	20000004 	.word	0x20000004
 8004818:	20000008 	.word	0x20000008

0800481c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800481c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004820:	b094      	sub	sp, #80	@ 0x50
 8004822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	647b      	str	r3, [r7, #68]	@ 0x44
 8004828:	2300      	movs	r3, #0
 800482a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800482c:	2300      	movs	r3, #0
 800482e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004834:	4b79      	ldr	r3, [pc, #484]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 030c 	and.w	r3, r3, #12
 800483c:	2b08      	cmp	r3, #8
 800483e:	d00d      	beq.n	800485c <HAL_RCC_GetSysClockFreq+0x40>
 8004840:	2b08      	cmp	r3, #8
 8004842:	f200 80e1 	bhi.w	8004a08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_RCC_GetSysClockFreq+0x34>
 800484a:	2b04      	cmp	r3, #4
 800484c:	d003      	beq.n	8004856 <HAL_RCC_GetSysClockFreq+0x3a>
 800484e:	e0db      	b.n	8004a08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004850:	4b73      	ldr	r3, [pc, #460]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004852:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004854:	e0db      	b.n	8004a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004856:	4b73      	ldr	r3, [pc, #460]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x208>)
 8004858:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800485a:	e0d8      	b.n	8004a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800485c:	4b6f      	ldr	r3, [pc, #444]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004864:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004866:	4b6d      	ldr	r3, [pc, #436]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d063      	beq.n	800493a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004872:	4b6a      	ldr	r3, [pc, #424]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	099b      	lsrs	r3, r3, #6
 8004878:	2200      	movs	r2, #0
 800487a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800487c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800487e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004884:	633b      	str	r3, [r7, #48]	@ 0x30
 8004886:	2300      	movs	r3, #0
 8004888:	637b      	str	r3, [r7, #52]	@ 0x34
 800488a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800488e:	4622      	mov	r2, r4
 8004890:	462b      	mov	r3, r5
 8004892:	f04f 0000 	mov.w	r0, #0
 8004896:	f04f 0100 	mov.w	r1, #0
 800489a:	0159      	lsls	r1, r3, #5
 800489c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a0:	0150      	lsls	r0, r2, #5
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4621      	mov	r1, r4
 80048a8:	1a51      	subs	r1, r2, r1
 80048aa:	6139      	str	r1, [r7, #16]
 80048ac:	4629      	mov	r1, r5
 80048ae:	eb63 0301 	sbc.w	r3, r3, r1
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048c0:	4659      	mov	r1, fp
 80048c2:	018b      	lsls	r3, r1, #6
 80048c4:	4651      	mov	r1, sl
 80048c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048ca:	4651      	mov	r1, sl
 80048cc:	018a      	lsls	r2, r1, #6
 80048ce:	4651      	mov	r1, sl
 80048d0:	ebb2 0801 	subs.w	r8, r2, r1
 80048d4:	4659      	mov	r1, fp
 80048d6:	eb63 0901 	sbc.w	r9, r3, r1
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	f04f 0300 	mov.w	r3, #0
 80048e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ee:	4690      	mov	r8, r2
 80048f0:	4699      	mov	r9, r3
 80048f2:	4623      	mov	r3, r4
 80048f4:	eb18 0303 	adds.w	r3, r8, r3
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	462b      	mov	r3, r5
 80048fc:	eb49 0303 	adc.w	r3, r9, r3
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800490e:	4629      	mov	r1, r5
 8004910:	024b      	lsls	r3, r1, #9
 8004912:	4621      	mov	r1, r4
 8004914:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004918:	4621      	mov	r1, r4
 800491a:	024a      	lsls	r2, r1, #9
 800491c:	4610      	mov	r0, r2
 800491e:	4619      	mov	r1, r3
 8004920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004922:	2200      	movs	r2, #0
 8004924:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004926:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004928:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800492c:	f7fb fd30 	bl	8000390 <__aeabi_uldivmod>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4613      	mov	r3, r2
 8004936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004938:	e058      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800493a:	4b38      	ldr	r3, [pc, #224]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	099b      	lsrs	r3, r3, #6
 8004940:	2200      	movs	r2, #0
 8004942:	4618      	mov	r0, r3
 8004944:	4611      	mov	r1, r2
 8004946:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800494a:	623b      	str	r3, [r7, #32]
 800494c:	2300      	movs	r3, #0
 800494e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004950:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004954:	4642      	mov	r2, r8
 8004956:	464b      	mov	r3, r9
 8004958:	f04f 0000 	mov.w	r0, #0
 800495c:	f04f 0100 	mov.w	r1, #0
 8004960:	0159      	lsls	r1, r3, #5
 8004962:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004966:	0150      	lsls	r0, r2, #5
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4641      	mov	r1, r8
 800496e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004972:	4649      	mov	r1, r9
 8004974:	eb63 0b01 	sbc.w	fp, r3, r1
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004984:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004988:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800498c:	ebb2 040a 	subs.w	r4, r2, sl
 8004990:	eb63 050b 	sbc.w	r5, r3, fp
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	00eb      	lsls	r3, r5, #3
 800499e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049a2:	00e2      	lsls	r2, r4, #3
 80049a4:	4614      	mov	r4, r2
 80049a6:	461d      	mov	r5, r3
 80049a8:	4643      	mov	r3, r8
 80049aa:	18e3      	adds	r3, r4, r3
 80049ac:	603b      	str	r3, [r7, #0]
 80049ae:	464b      	mov	r3, r9
 80049b0:	eb45 0303 	adc.w	r3, r5, r3
 80049b4:	607b      	str	r3, [r7, #4]
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049c2:	4629      	mov	r1, r5
 80049c4:	028b      	lsls	r3, r1, #10
 80049c6:	4621      	mov	r1, r4
 80049c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049cc:	4621      	mov	r1, r4
 80049ce:	028a      	lsls	r2, r1, #10
 80049d0:	4610      	mov	r0, r2
 80049d2:	4619      	mov	r1, r3
 80049d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049d6:	2200      	movs	r2, #0
 80049d8:	61bb      	str	r3, [r7, #24]
 80049da:	61fa      	str	r2, [r7, #28]
 80049dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049e0:	f7fb fcd6 	bl	8000390 <__aeabi_uldivmod>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4613      	mov	r3, r2
 80049ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049ec:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x200>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	0c1b      	lsrs	r3, r3, #16
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	3301      	adds	r3, #1
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80049fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a06:	e002      	b.n	8004a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a08:	4b05      	ldr	r3, [pc, #20]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3750      	adds	r7, #80	@ 0x50
 8004a14:	46bd      	mov	sp, r7
 8004a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	00f42400 	.word	0x00f42400
 8004a24:	007a1200 	.word	0x007a1200

08004a28 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a2c:	4b03      	ldr	r3, [pc, #12]	@ (8004a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	20000004 	.word	0x20000004

08004a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a44:	f7ff fff0 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4b05      	ldr	r3, [pc, #20]	@ (8004a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	0a9b      	lsrs	r3, r3, #10
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	4903      	ldr	r1, [pc, #12]	@ (8004a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a56:	5ccb      	ldrb	r3, [r1, r3]
 8004a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40023800 	.word	0x40023800
 8004a64:	080129a0 	.word	0x080129a0

08004a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a6c:	f7ff ffdc 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 8004a70:	4602      	mov	r2, r0
 8004a72:	4b05      	ldr	r3, [pc, #20]	@ (8004a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	0b5b      	lsrs	r3, r3, #13
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	4903      	ldr	r1, [pc, #12]	@ (8004a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a7e:	5ccb      	ldrb	r3, [r1, r3]
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	080129a0 	.word	0x080129a0

08004a90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	220f      	movs	r2, #15
 8004a9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004aa0:	4b12      	ldr	r3, [pc, #72]	@ (8004aec <HAL_RCC_GetClockConfig+0x5c>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 0203 	and.w	r2, r3, #3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004aac:	4b0f      	ldr	r3, [pc, #60]	@ (8004aec <HAL_RCC_GetClockConfig+0x5c>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8004aec <HAL_RCC_GetClockConfig+0x5c>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004ac4:	4b09      	ldr	r3, [pc, #36]	@ (8004aec <HAL_RCC_GetClockConfig+0x5c>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	08db      	lsrs	r3, r3, #3
 8004aca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ad2:	4b07      	ldr	r3, [pc, #28]	@ (8004af0 <HAL_RCC_GetClockConfig+0x60>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 020f 	and.w	r2, r3, #15
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	601a      	str	r2, [r3, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40023800 	.word	0x40023800
 8004af0:	40023c00 	.word	0x40023c00

08004af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d012      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b1c:	4b69      	ldr	r3, [pc, #420]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	4a68      	ldr	r2, [pc, #416]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b22:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004b26:	6093      	str	r3, [r2, #8]
 8004b28:	4b66      	ldr	r3, [pc, #408]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b30:	4964      	ldr	r1, [pc, #400]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d017      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b4e:	4b5d      	ldr	r3, [pc, #372]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b54:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5c:	4959      	ldr	r1, [pc, #356]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b6c:	d101      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d017      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b8a:	4b4e      	ldr	r3, [pc, #312]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b90:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b98:	494a      	ldr	r1, [pc, #296]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ba8:	d101      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004baa:	2301      	movs	r3, #1
 8004bac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 808b 	beq.w	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bd8:	4b3a      	ldr	r3, [pc, #232]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bdc:	4a39      	ldr	r2, [pc, #228]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004be2:	6413      	str	r3, [r2, #64]	@ 0x40
 8004be4:	4b37      	ldr	r3, [pc, #220]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bf0:	4b35      	ldr	r3, [pc, #212]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a34      	ldr	r2, [pc, #208]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bfc:	f7fe f892 	bl	8002d24 <HAL_GetTick>
 8004c00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c04:	f7fe f88e 	bl	8002d24 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	@ 0x64
 8004c10:	d901      	bls.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e38f      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c16:	4b2c      	ldr	r3, [pc, #176]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c22:	4b28      	ldr	r3, [pc, #160]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d035      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d02e      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c40:	4b20      	ldr	r3, [pc, #128]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c54:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c56:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c60:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c62:	4a18      	ldr	r2, [pc, #96]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c68:	4b16      	ldr	r3, [pc, #88]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d114      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fe f856 	bl	8002d24 <HAL_GetTick>
 8004c78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c7c:	f7fe f852 	bl	8002d24 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e351      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c92:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0ee      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ca6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004caa:	d111      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004cac:	4b05      	ldr	r3, [pc, #20]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004cb8:	4b04      	ldr	r3, [pc, #16]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cba:	400b      	ands	r3, r1
 8004cbc:	4901      	ldr	r1, [pc, #4]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
 8004cc2:	e00b      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	40007000 	.word	0x40007000
 8004ccc:	0ffffcff 	.word	0x0ffffcff
 8004cd0:	4bac      	ldr	r3, [pc, #688]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	4aab      	ldr	r2, [pc, #684]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004cda:	6093      	str	r3, [r2, #8]
 8004cdc:	4ba9      	ldr	r3, [pc, #676]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce8:	49a6      	ldr	r1, [pc, #664]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d010      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cfa:	4ba2      	ldr	r3, [pc, #648]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d00:	4aa0      	ldr	r2, [pc, #640]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004d0a:	4b9e      	ldr	r3, [pc, #632]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d14:	499b      	ldr	r1, [pc, #620]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d28:	4b96      	ldr	r3, [pc, #600]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d36:	4993      	ldr	r1, [pc, #588]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d4a:	4b8e      	ldr	r3, [pc, #568]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d58:	498a      	ldr	r1, [pc, #552]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d6c:	4b85      	ldr	r3, [pc, #532]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d7a:	4982      	ldr	r1, [pc, #520]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d8e:	4b7d      	ldr	r3, [pc, #500]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9c:	4979      	ldr	r1, [pc, #484]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004db0:	4b74      	ldr	r3, [pc, #464]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db6:	f023 0203 	bic.w	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dbe:	4971      	ldr	r1, [pc, #452]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd8:	f023 020c 	bic.w	r2, r3, #12
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004de0:	4968      	ldr	r1, [pc, #416]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004df4:	4b63      	ldr	r3, [pc, #396]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e02:	4960      	ldr	r1, [pc, #384]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e16:	4b5b      	ldr	r3, [pc, #364]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e24:	4957      	ldr	r1, [pc, #348]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e38:	4b52      	ldr	r3, [pc, #328]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e46:	494f      	ldr	r1, [pc, #316]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e60:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e68:	4946      	ldr	r1, [pc, #280]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e7c:	4b41      	ldr	r3, [pc, #260]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e82:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e8a:	493e      	ldr	r1, [pc, #248]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e9e:	4b39      	ldr	r3, [pc, #228]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eac:	4935      	ldr	r1, [pc, #212]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ec0:	4b30      	ldr	r3, [pc, #192]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ece:	492d      	ldr	r1, [pc, #180]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d011      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ee2:	4b28      	ldr	r3, [pc, #160]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ef0:	4924      	ldr	r1, [pc, #144]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004efc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f00:	d101      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f02:	2301      	movs	r3, #1
 8004f04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f12:	2301      	movs	r3, #1
 8004f14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f22:	4b18      	ldr	r3, [pc, #96]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f28:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f30:	4914      	ldr	r1, [pc, #80]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00b      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f44:	4b0f      	ldr	r3, [pc, #60]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f4a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f54:	490b      	ldr	r1, [pc, #44]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00f      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004f68:	4b06      	ldr	r3, [pc, #24]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f6e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f78:	4902      	ldr	r1, [pc, #8]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f80:	e002      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004f82:	bf00      	nop
 8004f84:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f94:	4b8a      	ldr	r3, [pc, #552]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f9a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa4:	4986      	ldr	r1, [pc, #536]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00b      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004fb8:	4b81      	ldr	r3, [pc, #516]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fbe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fc8:	497d      	ldr	r1, [pc, #500]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d006      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 80d6 	beq.w	8005190 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fe4:	4b76      	ldr	r3, [pc, #472]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a75      	ldr	r2, [pc, #468]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff0:	f7fd fe98 	bl	8002d24 <HAL_GetTick>
 8004ff4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ff8:	f7fd fe94 	bl	8002d24 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b64      	cmp	r3, #100	@ 0x64
 8005004:	d901      	bls.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e195      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800500a:	4b6d      	ldr	r3, [pc, #436]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f0      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d021      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005026:	2b00      	cmp	r3, #0
 8005028:	d11d      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800502a:	4b65      	ldr	r3, [pc, #404]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800502c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005030:	0c1b      	lsrs	r3, r3, #16
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005038:	4b61      	ldr	r3, [pc, #388]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800503a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800503e:	0e1b      	lsrs	r3, r3, #24
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	019a      	lsls	r2, r3, #6
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	041b      	lsls	r3, r3, #16
 8005050:	431a      	orrs	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	061b      	lsls	r3, r3, #24
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	071b      	lsls	r3, r3, #28
 800505e:	4958      	ldr	r1, [pc, #352]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d004      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005084:	2b00      	cmp	r3, #0
 8005086:	d02e      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005090:	d129      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005092:	4b4b      	ldr	r3, [pc, #300]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005098:	0c1b      	lsrs	r3, r3, #16
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050a0:	4b47      	ldr	r3, [pc, #284]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050a6:	0f1b      	lsrs	r3, r3, #28
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	019a      	lsls	r2, r3, #6
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	041b      	lsls	r3, r3, #16
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	061b      	lsls	r3, r3, #24
 80050c0:	431a      	orrs	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	071b      	lsls	r3, r3, #28
 80050c6:	493e      	ldr	r1, [pc, #248]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050ce:	4b3c      	ldr	r3, [pc, #240]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050d4:	f023 021f 	bic.w	r2, r3, #31
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	3b01      	subs	r3, #1
 80050de:	4938      	ldr	r1, [pc, #224]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01d      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050f2:	4b33      	ldr	r3, [pc, #204]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050f8:	0e1b      	lsrs	r3, r3, #24
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005100:	4b2f      	ldr	r3, [pc, #188]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005102:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005106:	0f1b      	lsrs	r3, r3, #28
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	019a      	lsls	r2, r3, #6
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	041b      	lsls	r3, r3, #16
 800511a:	431a      	orrs	r2, r3
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	061b      	lsls	r3, r3, #24
 8005120:	431a      	orrs	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	071b      	lsls	r3, r3, #28
 8005126:	4926      	ldr	r1, [pc, #152]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d011      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	019a      	lsls	r2, r3, #6
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	041b      	lsls	r3, r3, #16
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	061b      	lsls	r3, r3, #24
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	071b      	lsls	r3, r3, #28
 8005156:	491a      	ldr	r1, [pc, #104]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800515e:	4b18      	ldr	r3, [pc, #96]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a17      	ldr	r2, [pc, #92]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005164:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800516a:	f7fd fddb 	bl	8002d24 <HAL_GetTick>
 800516e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005170:	e008      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005172:	f7fd fdd7 	bl	8002d24 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b64      	cmp	r3, #100	@ 0x64
 800517e:	d901      	bls.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e0d8      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005184:	4b0e      	ldr	r3, [pc, #56]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f0      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	2b01      	cmp	r3, #1
 8005194:	f040 80ce 	bne.w	8005334 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005198:	4b09      	ldr	r3, [pc, #36]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a08      	ldr	r2, [pc, #32]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800519e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051a4:	f7fd fdbe 	bl	8002d24 <HAL_GetTick>
 80051a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051aa:	e00b      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051ac:	f7fd fdba 	bl	8002d24 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b64      	cmp	r3, #100	@ 0x64
 80051b8:	d904      	bls.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e0bb      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80051be:	bf00      	nop
 80051c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051c4:	4b5e      	ldr	r3, [pc, #376]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051d0:	d0ec      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d009      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d02e      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d12a      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051fa:	4b51      	ldr	r3, [pc, #324]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005200:	0c1b      	lsrs	r3, r3, #16
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005208:	4b4d      	ldr	r3, [pc, #308]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800520a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520e:	0f1b      	lsrs	r3, r3, #28
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	019a      	lsls	r2, r3, #6
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	041b      	lsls	r3, r3, #16
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	061b      	lsls	r3, r3, #24
 8005228:	431a      	orrs	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	071b      	lsls	r3, r3, #28
 800522e:	4944      	ldr	r1, [pc, #272]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005236:	4b42      	ldr	r3, [pc, #264]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005238:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800523c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005244:	3b01      	subs	r3, #1
 8005246:	021b      	lsls	r3, r3, #8
 8005248:	493d      	ldr	r1, [pc, #244]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d022      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005260:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005264:	d11d      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005266:	4b36      	ldr	r3, [pc, #216]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526c:	0e1b      	lsrs	r3, r3, #24
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005274:	4b32      	ldr	r3, [pc, #200]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800527a:	0f1b      	lsrs	r3, r3, #28
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	019a      	lsls	r2, r3, #6
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	041b      	lsls	r3, r3, #16
 800528e:	431a      	orrs	r2, r3
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	061b      	lsls	r3, r3, #24
 8005294:	431a      	orrs	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	071b      	lsls	r3, r3, #28
 800529a:	4929      	ldr	r1, [pc, #164]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d028      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052ae:	4b24      	ldr	r3, [pc, #144]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b4:	0e1b      	lsrs	r3, r3, #24
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052bc:	4b20      	ldr	r3, [pc, #128]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c2:	0c1b      	lsrs	r3, r3, #16
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	019a      	lsls	r2, r3, #6
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	041b      	lsls	r3, r3, #16
 80052d4:	431a      	orrs	r2, r3
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	061b      	lsls	r3, r3, #24
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	071b      	lsls	r3, r3, #28
 80052e2:	4917      	ldr	r1, [pc, #92]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052ea:	4b15      	ldr	r3, [pc, #84]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f8:	4911      	ldr	r1, [pc, #68]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005300:	4b0f      	ldr	r3, [pc, #60]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a0e      	ldr	r2, [pc, #56]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005306:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800530a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530c:	f7fd fd0a 	bl	8002d24 <HAL_GetTick>
 8005310:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005314:	f7fd fd06 	bl	8002d24 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b64      	cmp	r3, #100	@ 0x64
 8005320:	d901      	bls.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e007      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005326:	4b06      	ldr	r3, [pc, #24]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800532e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005332:	d1ef      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3720      	adds	r7, #32
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	40023800 	.word	0x40023800

08005344 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e09d      	b.n	8005492 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535a:	2b00      	cmp	r3, #0
 800535c:	d108      	bne.n	8005370 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005366:	d009      	beq.n	800537c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	61da      	str	r2, [r3, #28]
 800536e:	e005      	b.n	800537c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d106      	bne.n	800539c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fc fb5a 	bl	8001a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053bc:	d902      	bls.n	80053c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	e002      	b.n	80053ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80053d2:	d007      	beq.n	80053e4 <HAL_SPI_Init+0xa0>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053dc:	d002      	beq.n	80053e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005426:	ea42 0103 	orr.w	r1, r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	0c1b      	lsrs	r3, r3, #16
 8005440:	f003 0204 	and.w	r2, r3, #4
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005460:	ea42 0103 	orr.w	r1, r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	69da      	ldr	r2, [r3, #28]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005480:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b088      	sub	sp, #32
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	603b      	str	r3, [r7, #0]
 80054a6:	4613      	mov	r3, r2
 80054a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_SPI_Transmit+0x22>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e15f      	b.n	800577c <HAL_SPI_Transmit+0x2e2>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054c4:	f7fd fc2e 	bl	8002d24 <HAL_GetTick>
 80054c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054ca:	88fb      	ldrh	r3, [r7, #6]
 80054cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d002      	beq.n	80054e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054da:	2302      	movs	r3, #2
 80054dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054de:	e148      	b.n	8005772 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <HAL_SPI_Transmit+0x52>
 80054e6:	88fb      	ldrh	r3, [r7, #6]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d102      	bne.n	80054f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054f0:	e13f      	b.n	8005772 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2203      	movs	r2, #3
 80054f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	88fa      	ldrh	r2, [r7, #6]
 800550a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	88fa      	ldrh	r2, [r7, #6]
 8005510:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800553c:	d10f      	bne.n	800555e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800554c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800555c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005568:	2b40      	cmp	r3, #64	@ 0x40
 800556a:	d007      	beq.n	800557c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800557a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005584:	d94f      	bls.n	8005626 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <HAL_SPI_Transmit+0xfa>
 800558e:	8afb      	ldrh	r3, [r7, #22]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d142      	bne.n	800561a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005598:	881a      	ldrh	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a4:	1c9a      	adds	r2, r3, #2
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055b8:	e02f      	b.n	800561a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d112      	bne.n	80055ee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055cc:	881a      	ldrh	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d8:	1c9a      	adds	r2, r3, #2
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055ec:	e015      	b.n	800561a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055ee:	f7fd fb99 	bl	8002d24 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d803      	bhi.n	8005606 <HAL_SPI_Transmit+0x16c>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005604:	d102      	bne.n	800560c <HAL_SPI_Transmit+0x172>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d106      	bne.n	800561a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005618:	e0ab      	b.n	8005772 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800561e:	b29b      	uxth	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1ca      	bne.n	80055ba <HAL_SPI_Transmit+0x120>
 8005624:	e080      	b.n	8005728 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_SPI_Transmit+0x19a>
 800562e:	8afb      	ldrh	r3, [r7, #22]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d174      	bne.n	800571e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b01      	cmp	r3, #1
 800563c:	d912      	bls.n	8005664 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005642:	881a      	ldrh	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564e:	1c9a      	adds	r2, r3, #2
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b02      	subs	r3, #2
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005662:	e05c      	b.n	800571e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	330c      	adds	r3, #12
 800566e:	7812      	ldrb	r2, [r2, #0]
 8005670:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005680:	b29b      	uxth	r3, r3
 8005682:	3b01      	subs	r3, #1
 8005684:	b29a      	uxth	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800568a:	e048      	b.n	800571e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b02      	cmp	r3, #2
 8005698:	d12b      	bne.n	80056f2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800569e:	b29b      	uxth	r3, r3
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d912      	bls.n	80056ca <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a8:	881a      	ldrh	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b4:	1c9a      	adds	r2, r3, #2
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b02      	subs	r3, #2
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056c8:	e029      	b.n	800571e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	330c      	adds	r3, #12
 80056d4:	7812      	ldrb	r2, [r2, #0]
 80056d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056f0:	e015      	b.n	800571e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056f2:	f7fd fb17 	bl	8002d24 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d803      	bhi.n	800570a <HAL_SPI_Transmit+0x270>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005708:	d102      	bne.n	8005710 <HAL_SPI_Transmit+0x276>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d106      	bne.n	800571e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800571c:	e029      	b.n	8005772 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1b1      	bne.n	800568c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	6839      	ldr	r1, [r7, #0]
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 fb69 	bl	8005e04 <SPI_EndRxTxTransaction>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005746:	2300      	movs	r3, #0
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	613b      	str	r3, [r7, #16]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	613b      	str	r3, [r7, #16]
 800575a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	77fb      	strb	r3, [r7, #31]
 8005768:	e003      	b.n	8005772 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800577a:	7ffb      	ldrb	r3, [r7, #31]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3720      	adds	r7, #32
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	@ 0x28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005792:	2301      	movs	r3, #1
 8005794:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x26>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e20a      	b.n	8005bc0 <HAL_SPI_TransmitReceive+0x43c>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057b2:	f7fd fab7 	bl	8002d24 <HAL_GetTick>
 80057b6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80057be:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80057c6:	887b      	ldrh	r3, [r7, #2]
 80057c8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80057ca:	887b      	ldrh	r3, [r7, #2]
 80057cc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057ce:	7efb      	ldrb	r3, [r7, #27]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d00e      	beq.n	80057f2 <HAL_SPI_TransmitReceive+0x6e>
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057da:	d106      	bne.n	80057ea <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d102      	bne.n	80057ea <HAL_SPI_TransmitReceive+0x66>
 80057e4:	7efb      	ldrb	r3, [r7, #27]
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d003      	beq.n	80057f2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80057ea:	2302      	movs	r3, #2
 80057ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80057f0:	e1e0      	b.n	8005bb4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d005      	beq.n	8005804 <HAL_SPI_TransmitReceive+0x80>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <HAL_SPI_TransmitReceive+0x80>
 80057fe:	887b      	ldrh	r3, [r7, #2]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d103      	bne.n	800580c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800580a:	e1d3      	b.n	8005bb4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b04      	cmp	r3, #4
 8005816:	d003      	beq.n	8005820 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2205      	movs	r2, #5
 800581c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	887a      	ldrh	r2, [r7, #2]
 8005830:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	887a      	ldrh	r2, [r7, #2]
 8005838:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	887a      	ldrh	r2, [r7, #2]
 8005846:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	887a      	ldrh	r2, [r7, #2]
 800584c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005862:	d802      	bhi.n	800586a <HAL_SPI_TransmitReceive+0xe6>
 8005864:	8a3b      	ldrh	r3, [r7, #16]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d908      	bls.n	800587c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	e007      	b.n	800588c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800588a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005896:	2b40      	cmp	r3, #64	@ 0x40
 8005898:	d007      	beq.n	80058aa <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058b2:	f240 8081 	bls.w	80059b8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <HAL_SPI_TransmitReceive+0x140>
 80058be:	8a7b      	ldrh	r3, [r7, #18]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d16d      	bne.n	80059a0 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c8:	881a      	ldrh	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d4:	1c9a      	adds	r2, r3, #2
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058e8:	e05a      	b.n	80059a0 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d11b      	bne.n	8005930 <HAL_SPI_TransmitReceive+0x1ac>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d016      	beq.n	8005930 <HAL_SPI_TransmitReceive+0x1ac>
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	2b01      	cmp	r3, #1
 8005906:	d113      	bne.n	8005930 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590c:	881a      	ldrh	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005918:	1c9a      	adds	r2, r3, #2
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b01      	cmp	r3, #1
 800593c:	d11c      	bne.n	8005978 <HAL_SPI_TransmitReceive+0x1f4>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d016      	beq.n	8005978 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005954:	b292      	uxth	r2, r2
 8005956:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595c:	1c9a      	adds	r2, r3, #2
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005968:	b29b      	uxth	r3, r3
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005974:	2301      	movs	r3, #1
 8005976:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005978:	f7fd f9d4 	bl	8002d24 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005984:	429a      	cmp	r2, r3
 8005986:	d80b      	bhi.n	80059a0 <HAL_SPI_TransmitReceive+0x21c>
 8005988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800598e:	d007      	beq.n	80059a0 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800599e:	e109      	b.n	8005bb4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d19f      	bne.n	80058ea <HAL_SPI_TransmitReceive+0x166>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d199      	bne.n	80058ea <HAL_SPI_TransmitReceive+0x166>
 80059b6:	e0e3      	b.n	8005b80 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_SPI_TransmitReceive+0x244>
 80059c0:	8a7b      	ldrh	r3, [r7, #18]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	f040 80cf 	bne.w	8005b66 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d912      	bls.n	80059f8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d6:	881a      	ldrh	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e2:	1c9a      	adds	r2, r3, #2
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	3b02      	subs	r3, #2
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059f6:	e0b6      	b.n	8005b66 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	330c      	adds	r3, #12
 8005a02:	7812      	ldrb	r2, [r2, #0]
 8005a04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a1e:	e0a2      	b.n	8005b66 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d134      	bne.n	8005a98 <HAL_SPI_TransmitReceive+0x314>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d02f      	beq.n	8005a98 <HAL_SPI_TransmitReceive+0x314>
 8005a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d12c      	bne.n	8005a98 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d912      	bls.n	8005a6e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4c:	881a      	ldrh	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a58:	1c9a      	adds	r2, r3, #2
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	3b02      	subs	r3, #2
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a6c:	e012      	b.n	8005a94 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	330c      	adds	r3, #12
 8005a78:	7812      	ldrb	r2, [r2, #0]
 8005a7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d148      	bne.n	8005b38 <HAL_SPI_TransmitReceive+0x3b4>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d042      	beq.n	8005b38 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d923      	bls.n	8005b06 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68da      	ldr	r2, [r3, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac8:	b292      	uxth	r2, r2
 8005aca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad0:	1c9a      	adds	r2, r3, #2
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b02      	subs	r3, #2
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d81f      	bhi.n	8005b34 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b02:	605a      	str	r2, [r3, #4]
 8005b04:	e016      	b.n	8005b34 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f103 020c 	add.w	r2, r3, #12
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b12:	7812      	ldrb	r2, [r2, #0]
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b34:	2301      	movs	r3, #1
 8005b36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b38:	f7fd f8f4 	bl	8002d24 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d803      	bhi.n	8005b50 <HAL_SPI_TransmitReceive+0x3cc>
 8005b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b4e:	d102      	bne.n	8005b56 <HAL_SPI_TransmitReceive+0x3d2>
 8005b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d107      	bne.n	8005b66 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005b64:	e026      	b.n	8005bb4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f47f af57 	bne.w	8005a20 <HAL_SPI_TransmitReceive+0x29c>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f47f af50 	bne.w	8005a20 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b80:	69fa      	ldr	r2, [r7, #28]
 8005b82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 f93d 	bl	8005e04 <SPI_EndRxTxTransaction>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d005      	beq.n	8005b9c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005baa:	e003      	b.n	8005bb4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3728      	adds	r7, #40	@ 0x28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bd8:	f7fd f8a4 	bl	8002d24 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be0:	1a9b      	subs	r3, r3, r2
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	4413      	add	r3, r2
 8005be6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005be8:	f7fd f89c 	bl	8002d24 <HAL_GetTick>
 8005bec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bee:	4b39      	ldr	r3, [pc, #228]	@ (8005cd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	015b      	lsls	r3, r3, #5
 8005bf4:	0d1b      	lsrs	r3, r3, #20
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	fb02 f303 	mul.w	r3, r2, r3
 8005bfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bfe:	e054      	b.n	8005caa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c06:	d050      	beq.n	8005caa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c08:	f7fd f88c 	bl	8002d24 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d902      	bls.n	8005c1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d13d      	bne.n	8005c9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c36:	d111      	bne.n	8005c5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c40:	d004      	beq.n	8005c4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c4a:	d107      	bne.n	8005c5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c64:	d10f      	bne.n	8005c86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e017      	b.n	8005cca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	bf0c      	ite	eq
 8005cba:	2301      	moveq	r3, #1
 8005cbc:	2300      	movne	r3, #0
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d19b      	bne.n	8005c00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3720      	adds	r7, #32
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000004 	.word	0x20000004

08005cd8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08a      	sub	sp, #40	@ 0x28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
 8005ce4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005cea:	f7fd f81b 	bl	8002d24 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf2:	1a9b      	subs	r3, r3, r2
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005cfa:	f7fd f813 	bl	8002d24 <HAL_GetTick>
 8005cfe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	330c      	adds	r3, #12
 8005d06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d08:	4b3d      	ldr	r3, [pc, #244]	@ (8005e00 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	00da      	lsls	r2, r3, #3
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	0d1b      	lsrs	r3, r3, #20
 8005d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d1a:	fb02 f303 	mul.w	r3, r2, r3
 8005d1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005d20:	e060      	b.n	8005de4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d28:	d107      	bne.n	8005d3a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d104      	bne.n	8005d3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d40:	d050      	beq.n	8005de4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d42:	f7fc ffef 	bl	8002d24 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d902      	bls.n	8005d58 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d13d      	bne.n	8005dd4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d70:	d111      	bne.n	8005d96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d7a:	d004      	beq.n	8005d86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d84:	d107      	bne.n	8005d96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d9e:	d10f      	bne.n	8005dc0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005dbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e010      	b.n	8005df6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	4013      	ands	r3, r2
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d196      	bne.n	8005d22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3728      	adds	r7, #40	@ 0x28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20000004 	.word	0x20000004

08005e04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f7ff ff5b 	bl	8005cd8 <SPI_WaitFifoStateUntilTimeout>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d007      	beq.n	8005e38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e2c:	f043 0220 	orr.w	r2, r3, #32
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e046      	b.n	8005ec6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e38:	4b25      	ldr	r3, [pc, #148]	@ (8005ed0 <SPI_EndRxTxTransaction+0xcc>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a25      	ldr	r2, [pc, #148]	@ (8005ed4 <SPI_EndRxTxTransaction+0xd0>)
 8005e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e42:	0d5b      	lsrs	r3, r3, #21
 8005e44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e48:	fb02 f303 	mul.w	r3, r2, r3
 8005e4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e56:	d112      	bne.n	8005e7e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	2180      	movs	r1, #128	@ 0x80
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f7ff feb0 	bl	8005bc8 <SPI_WaitFlagStateUntilTimeout>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d016      	beq.n	8005e9c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e72:	f043 0220 	orr.w	r2, r3, #32
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e023      	b.n	8005ec6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e94:	2b80      	cmp	r3, #128	@ 0x80
 8005e96:	d0f2      	beq.n	8005e7e <SPI_EndRxTxTransaction+0x7a>
 8005e98:	e000      	b.n	8005e9c <SPI_EndRxTxTransaction+0x98>
        break;
 8005e9a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f7ff ff15 	bl	8005cd8 <SPI_WaitFifoStateUntilTimeout>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d007      	beq.n	8005ec4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eb8:	f043 0220 	orr.w	r2, r3, #32
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e000      	b.n	8005ec6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	20000004 	.word	0x20000004
 8005ed4:	165e9f81 	.word	0x165e9f81

08005ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e049      	b.n	8005f7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d106      	bne.n	8005f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fb fe58 	bl	8001bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	3304      	adds	r3, #4
 8005f14:	4619      	mov	r1, r3
 8005f16:	4610      	mov	r0, r2
 8005f18:	f000 fd98 	bl	8006a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d001      	beq.n	8005fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e054      	b.n	800604a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0201 	orr.w	r2, r2, #1
 8005fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a26      	ldr	r2, [pc, #152]	@ (8006058 <HAL_TIM_Base_Start_IT+0xd0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d022      	beq.n	8006008 <HAL_TIM_Base_Start_IT+0x80>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fca:	d01d      	beq.n	8006008 <HAL_TIM_Base_Start_IT+0x80>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a22      	ldr	r2, [pc, #136]	@ (800605c <HAL_TIM_Base_Start_IT+0xd4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d018      	beq.n	8006008 <HAL_TIM_Base_Start_IT+0x80>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a21      	ldr	r2, [pc, #132]	@ (8006060 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d013      	beq.n	8006008 <HAL_TIM_Base_Start_IT+0x80>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8006064 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00e      	beq.n	8006008 <HAL_TIM_Base_Start_IT+0x80>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1e      	ldr	r2, [pc, #120]	@ (8006068 <HAL_TIM_Base_Start_IT+0xe0>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d009      	beq.n	8006008 <HAL_TIM_Base_Start_IT+0x80>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800606c <HAL_TIM_Base_Start_IT+0xe4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d004      	beq.n	8006008 <HAL_TIM_Base_Start_IT+0x80>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1b      	ldr	r2, [pc, #108]	@ (8006070 <HAL_TIM_Base_Start_IT+0xe8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d115      	bne.n	8006034 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	4b19      	ldr	r3, [pc, #100]	@ (8006074 <HAL_TIM_Base_Start_IT+0xec>)
 8006010:	4013      	ands	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2b06      	cmp	r3, #6
 8006018:	d015      	beq.n	8006046 <HAL_TIM_Base_Start_IT+0xbe>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006020:	d011      	beq.n	8006046 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f042 0201 	orr.w	r2, r2, #1
 8006030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006032:	e008      	b.n	8006046 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	e000      	b.n	8006048 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006046:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40010000 	.word	0x40010000
 800605c:	40000400 	.word	0x40000400
 8006060:	40000800 	.word	0x40000800
 8006064:	40000c00 	.word	0x40000c00
 8006068:	40010400 	.word	0x40010400
 800606c:	40014000 	.word	0x40014000
 8006070:	40001800 	.word	0x40001800
 8006074:	00010007 	.word	0x00010007

08006078 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e049      	b.n	800611e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d106      	bne.n	80060a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f841 	bl	8006126 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2202      	movs	r2, #2
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3304      	adds	r3, #4
 80060b4:	4619      	mov	r1, r3
 80060b6:	4610      	mov	r0, r2
 80060b8:	f000 fcc8 	bl	8006a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006126:	b480      	push	{r7}
 8006128:	b083      	sub	sp, #12
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800612e:	bf00      	nop
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
	...

0800613c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d109      	bne.n	8006160 <HAL_TIM_PWM_Start+0x24>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b01      	cmp	r3, #1
 8006156:	bf14      	ite	ne
 8006158:	2301      	movne	r3, #1
 800615a:	2300      	moveq	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	e03c      	b.n	80061da <HAL_TIM_PWM_Start+0x9e>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b04      	cmp	r3, #4
 8006164:	d109      	bne.n	800617a <HAL_TIM_PWM_Start+0x3e>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b01      	cmp	r3, #1
 8006170:	bf14      	ite	ne
 8006172:	2301      	movne	r3, #1
 8006174:	2300      	moveq	r3, #0
 8006176:	b2db      	uxtb	r3, r3
 8006178:	e02f      	b.n	80061da <HAL_TIM_PWM_Start+0x9e>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b08      	cmp	r3, #8
 800617e:	d109      	bne.n	8006194 <HAL_TIM_PWM_Start+0x58>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b01      	cmp	r3, #1
 800618a:	bf14      	ite	ne
 800618c:	2301      	movne	r3, #1
 800618e:	2300      	moveq	r3, #0
 8006190:	b2db      	uxtb	r3, r3
 8006192:	e022      	b.n	80061da <HAL_TIM_PWM_Start+0x9e>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b0c      	cmp	r3, #12
 8006198:	d109      	bne.n	80061ae <HAL_TIM_PWM_Start+0x72>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	bf14      	ite	ne
 80061a6:	2301      	movne	r3, #1
 80061a8:	2300      	moveq	r3, #0
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	e015      	b.n	80061da <HAL_TIM_PWM_Start+0x9e>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b10      	cmp	r3, #16
 80061b2:	d109      	bne.n	80061c8 <HAL_TIM_PWM_Start+0x8c>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	bf14      	ite	ne
 80061c0:	2301      	movne	r3, #1
 80061c2:	2300      	moveq	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	e008      	b.n	80061da <HAL_TIM_PWM_Start+0x9e>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	bf14      	ite	ne
 80061d4:	2301      	movne	r3, #1
 80061d6:	2300      	moveq	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e092      	b.n	8006308 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d104      	bne.n	80061f2 <HAL_TIM_PWM_Start+0xb6>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061f0:	e023      	b.n	800623a <HAL_TIM_PWM_Start+0xfe>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d104      	bne.n	8006202 <HAL_TIM_PWM_Start+0xc6>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006200:	e01b      	b.n	800623a <HAL_TIM_PWM_Start+0xfe>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b08      	cmp	r3, #8
 8006206:	d104      	bne.n	8006212 <HAL_TIM_PWM_Start+0xd6>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006210:	e013      	b.n	800623a <HAL_TIM_PWM_Start+0xfe>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b0c      	cmp	r3, #12
 8006216:	d104      	bne.n	8006222 <HAL_TIM_PWM_Start+0xe6>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006220:	e00b      	b.n	800623a <HAL_TIM_PWM_Start+0xfe>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b10      	cmp	r3, #16
 8006226:	d104      	bne.n	8006232 <HAL_TIM_PWM_Start+0xf6>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006230:	e003      	b.n	800623a <HAL_TIM_PWM_Start+0xfe>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2202      	movs	r2, #2
 8006236:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2201      	movs	r2, #1
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	4618      	mov	r0, r3
 8006244:	f000 ffa6 	bl	8007194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a30      	ldr	r2, [pc, #192]	@ (8006310 <HAL_TIM_PWM_Start+0x1d4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d004      	beq.n	800625c <HAL_TIM_PWM_Start+0x120>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a2f      	ldr	r2, [pc, #188]	@ (8006314 <HAL_TIM_PWM_Start+0x1d8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d101      	bne.n	8006260 <HAL_TIM_PWM_Start+0x124>
 800625c:	2301      	movs	r3, #1
 800625e:	e000      	b.n	8006262 <HAL_TIM_PWM_Start+0x126>
 8006260:	2300      	movs	r3, #0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d007      	beq.n	8006276 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006274:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a25      	ldr	r2, [pc, #148]	@ (8006310 <HAL_TIM_PWM_Start+0x1d4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d022      	beq.n	80062c6 <HAL_TIM_PWM_Start+0x18a>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006288:	d01d      	beq.n	80062c6 <HAL_TIM_PWM_Start+0x18a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a22      	ldr	r2, [pc, #136]	@ (8006318 <HAL_TIM_PWM_Start+0x1dc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d018      	beq.n	80062c6 <HAL_TIM_PWM_Start+0x18a>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a20      	ldr	r2, [pc, #128]	@ (800631c <HAL_TIM_PWM_Start+0x1e0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d013      	beq.n	80062c6 <HAL_TIM_PWM_Start+0x18a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006320 <HAL_TIM_PWM_Start+0x1e4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00e      	beq.n	80062c6 <HAL_TIM_PWM_Start+0x18a>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a19      	ldr	r2, [pc, #100]	@ (8006314 <HAL_TIM_PWM_Start+0x1d8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d009      	beq.n	80062c6 <HAL_TIM_PWM_Start+0x18a>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006324 <HAL_TIM_PWM_Start+0x1e8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d004      	beq.n	80062c6 <HAL_TIM_PWM_Start+0x18a>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a19      	ldr	r2, [pc, #100]	@ (8006328 <HAL_TIM_PWM_Start+0x1ec>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d115      	bne.n	80062f2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	4b17      	ldr	r3, [pc, #92]	@ (800632c <HAL_TIM_PWM_Start+0x1f0>)
 80062ce:	4013      	ands	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b06      	cmp	r3, #6
 80062d6:	d015      	beq.n	8006304 <HAL_TIM_PWM_Start+0x1c8>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062de:	d011      	beq.n	8006304 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f0:	e008      	b.n	8006304 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0201 	orr.w	r2, r2, #1
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	e000      	b.n	8006306 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006304:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40010000 	.word	0x40010000
 8006314:	40010400 	.word	0x40010400
 8006318:	40000400 	.word	0x40000400
 800631c:	40000800 	.word	0x40000800
 8006320:	40000c00 	.word	0x40000c00
 8006324:	40014000 	.word	0x40014000
 8006328:	40001800 	.word	0x40001800
 800632c:	00010007 	.word	0x00010007

08006330 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2200      	movs	r2, #0
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	4618      	mov	r0, r3
 8006344:	f000 ff26 	bl	8007194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a36      	ldr	r2, [pc, #216]	@ (8006428 <HAL_TIM_PWM_Stop+0xf8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d004      	beq.n	800635c <HAL_TIM_PWM_Stop+0x2c>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a35      	ldr	r2, [pc, #212]	@ (800642c <HAL_TIM_PWM_Stop+0xfc>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d101      	bne.n	8006360 <HAL_TIM_PWM_Stop+0x30>
 800635c:	2301      	movs	r3, #1
 800635e:	e000      	b.n	8006362 <HAL_TIM_PWM_Stop+0x32>
 8006360:	2300      	movs	r3, #0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d017      	beq.n	8006396 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6a1a      	ldr	r2, [r3, #32]
 800636c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006370:	4013      	ands	r3, r2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10f      	bne.n	8006396 <HAL_TIM_PWM_Stop+0x66>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6a1a      	ldr	r2, [r3, #32]
 800637c:	f240 4344 	movw	r3, #1092	@ 0x444
 8006380:	4013      	ands	r3, r2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d107      	bne.n	8006396 <HAL_TIM_PWM_Stop+0x66>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006394:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6a1a      	ldr	r2, [r3, #32]
 800639c:	f241 1311 	movw	r3, #4369	@ 0x1111
 80063a0:	4013      	ands	r3, r2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10f      	bne.n	80063c6 <HAL_TIM_PWM_Stop+0x96>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6a1a      	ldr	r2, [r3, #32]
 80063ac:	f240 4344 	movw	r3, #1092	@ 0x444
 80063b0:	4013      	ands	r3, r2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d107      	bne.n	80063c6 <HAL_TIM_PWM_Stop+0x96>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d104      	bne.n	80063d6 <HAL_TIM_PWM_Stop+0xa6>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063d4:	e023      	b.n	800641e <HAL_TIM_PWM_Stop+0xee>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d104      	bne.n	80063e6 <HAL_TIM_PWM_Stop+0xb6>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063e4:	e01b      	b.n	800641e <HAL_TIM_PWM_Stop+0xee>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d104      	bne.n	80063f6 <HAL_TIM_PWM_Stop+0xc6>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063f4:	e013      	b.n	800641e <HAL_TIM_PWM_Stop+0xee>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b0c      	cmp	r3, #12
 80063fa:	d104      	bne.n	8006406 <HAL_TIM_PWM_Stop+0xd6>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006404:	e00b      	b.n	800641e <HAL_TIM_PWM_Stop+0xee>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b10      	cmp	r3, #16
 800640a:	d104      	bne.n	8006416 <HAL_TIM_PWM_Stop+0xe6>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006414:	e003      	b.n	800641e <HAL_TIM_PWM_Stop+0xee>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	40010000 	.word	0x40010000
 800642c:	40010400 	.word	0x40010400

08006430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d020      	beq.n	8006494 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d01b      	beq.n	8006494 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f06f 0202 	mvn.w	r2, #2
 8006464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	f003 0303 	and.w	r3, r3, #3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fac8 	bl	8006a10 <HAL_TIM_IC_CaptureCallback>
 8006480:	e005      	b.n	800648e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 faba 	bl	80069fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 facb 	bl	8006a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f003 0304 	and.w	r3, r3, #4
 800649a:	2b00      	cmp	r3, #0
 800649c:	d020      	beq.n	80064e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f003 0304 	and.w	r3, r3, #4
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d01b      	beq.n	80064e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0204 	mvn.w	r2, #4
 80064b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2202      	movs	r2, #2
 80064b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 faa2 	bl	8006a10 <HAL_TIM_IC_CaptureCallback>
 80064cc:	e005      	b.n	80064da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa94 	bl	80069fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 faa5 	bl	8006a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d020      	beq.n	800652c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f003 0308 	and.w	r3, r3, #8
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01b      	beq.n	800652c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0208 	mvn.w	r2, #8
 80064fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2204      	movs	r2, #4
 8006502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fa7c 	bl	8006a10 <HAL_TIM_IC_CaptureCallback>
 8006518:	e005      	b.n	8006526 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fa6e 	bl	80069fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fa7f 	bl	8006a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f003 0310 	and.w	r3, r3, #16
 8006532:	2b00      	cmp	r3, #0
 8006534:	d020      	beq.n	8006578 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f003 0310 	and.w	r3, r3, #16
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01b      	beq.n	8006578 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f06f 0210 	mvn.w	r2, #16
 8006548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2208      	movs	r2, #8
 800654e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fa56 	bl	8006a10 <HAL_TIM_IC_CaptureCallback>
 8006564:	e005      	b.n	8006572 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fa48 	bl	80069fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fa59 	bl	8006a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00c      	beq.n	800659c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	d007      	beq.n	800659c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f06f 0201 	mvn.w	r2, #1
 8006594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7fa fe4a 	bl	8001230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d104      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00c      	beq.n	80065ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d007      	beq.n	80065ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80065c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fea3 	bl	8007310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00c      	beq.n	80065ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d007      	beq.n	80065ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80065e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fe9b 	bl	8007324 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00c      	beq.n	8006612 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800660a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fa13 	bl	8006a38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	f003 0320 	and.w	r3, r3, #32
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00c      	beq.n	8006636 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b00      	cmp	r3, #0
 8006624:	d007      	beq.n	8006636 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f06f 0220 	mvn.w	r2, #32
 800662e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fe63 	bl	80072fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006636:	bf00      	nop
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800665a:	2302      	movs	r3, #2
 800665c:	e0ff      	b.n	800685e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b14      	cmp	r3, #20
 800666a:	f200 80f0 	bhi.w	800684e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800666e:	a201      	add	r2, pc, #4	@ (adr r2, 8006674 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006674:	080066c9 	.word	0x080066c9
 8006678:	0800684f 	.word	0x0800684f
 800667c:	0800684f 	.word	0x0800684f
 8006680:	0800684f 	.word	0x0800684f
 8006684:	08006709 	.word	0x08006709
 8006688:	0800684f 	.word	0x0800684f
 800668c:	0800684f 	.word	0x0800684f
 8006690:	0800684f 	.word	0x0800684f
 8006694:	0800674b 	.word	0x0800674b
 8006698:	0800684f 	.word	0x0800684f
 800669c:	0800684f 	.word	0x0800684f
 80066a0:	0800684f 	.word	0x0800684f
 80066a4:	0800678b 	.word	0x0800678b
 80066a8:	0800684f 	.word	0x0800684f
 80066ac:	0800684f 	.word	0x0800684f
 80066b0:	0800684f 	.word	0x0800684f
 80066b4:	080067cd 	.word	0x080067cd
 80066b8:	0800684f 	.word	0x0800684f
 80066bc:	0800684f 	.word	0x0800684f
 80066c0:	0800684f 	.word	0x0800684f
 80066c4:	0800680d 	.word	0x0800680d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 fa68 	bl	8006ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699a      	ldr	r2, [r3, #24]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0208 	orr.w	r2, r2, #8
 80066e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0204 	bic.w	r2, r2, #4
 80066f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6999      	ldr	r1, [r3, #24]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	619a      	str	r2, [r3, #24]
      break;
 8006706:	e0a5      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	4618      	mov	r0, r3
 8006710:	f000 faba 	bl	8006c88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699a      	ldr	r2, [r3, #24]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6999      	ldr	r1, [r3, #24]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	021a      	lsls	r2, r3, #8
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	619a      	str	r2, [r3, #24]
      break;
 8006748:	e084      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68b9      	ldr	r1, [r7, #8]
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fb11 	bl	8006d78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69da      	ldr	r2, [r3, #28]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0208 	orr.w	r2, r2, #8
 8006764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0204 	bic.w	r2, r2, #4
 8006774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69d9      	ldr	r1, [r3, #28]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	61da      	str	r2, [r3, #28]
      break;
 8006788:	e064      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fb67 	bl	8006e64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69da      	ldr	r2, [r3, #28]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69d9      	ldr	r1, [r3, #28]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	021a      	lsls	r2, r3, #8
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	61da      	str	r2, [r3, #28]
      break;
 80067ca:	e043      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68b9      	ldr	r1, [r7, #8]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fb9e 	bl	8006f14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0208 	orr.w	r2, r2, #8
 80067e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f022 0204 	bic.w	r2, r2, #4
 80067f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	691a      	ldr	r2, [r3, #16]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800680a:	e023      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	4618      	mov	r0, r3
 8006814:	f000 fbd0 	bl	8006fb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006826:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006836:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	021a      	lsls	r2, r3, #8
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800684c:	e002      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	75fb      	strb	r3, [r7, #23]
      break;
 8006852:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800685c:	7dfb      	ldrb	r3, [r7, #23]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop

08006868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800687c:	2b01      	cmp	r3, #1
 800687e:	d101      	bne.n	8006884 <HAL_TIM_ConfigClockSource+0x1c>
 8006880:	2302      	movs	r3, #2
 8006882:	e0b4      	b.n	80069ee <HAL_TIM_ConfigClockSource+0x186>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	4b56      	ldr	r3, [pc, #344]	@ (80069f8 <HAL_TIM_ConfigClockSource+0x190>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068bc:	d03e      	beq.n	800693c <HAL_TIM_ConfigClockSource+0xd4>
 80068be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068c2:	f200 8087 	bhi.w	80069d4 <HAL_TIM_ConfigClockSource+0x16c>
 80068c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068ca:	f000 8086 	beq.w	80069da <HAL_TIM_ConfigClockSource+0x172>
 80068ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068d2:	d87f      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x16c>
 80068d4:	2b70      	cmp	r3, #112	@ 0x70
 80068d6:	d01a      	beq.n	800690e <HAL_TIM_ConfigClockSource+0xa6>
 80068d8:	2b70      	cmp	r3, #112	@ 0x70
 80068da:	d87b      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x16c>
 80068dc:	2b60      	cmp	r3, #96	@ 0x60
 80068de:	d050      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0x11a>
 80068e0:	2b60      	cmp	r3, #96	@ 0x60
 80068e2:	d877      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x16c>
 80068e4:	2b50      	cmp	r3, #80	@ 0x50
 80068e6:	d03c      	beq.n	8006962 <HAL_TIM_ConfigClockSource+0xfa>
 80068e8:	2b50      	cmp	r3, #80	@ 0x50
 80068ea:	d873      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x16c>
 80068ec:	2b40      	cmp	r3, #64	@ 0x40
 80068ee:	d058      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x13a>
 80068f0:	2b40      	cmp	r3, #64	@ 0x40
 80068f2:	d86f      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x16c>
 80068f4:	2b30      	cmp	r3, #48	@ 0x30
 80068f6:	d064      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x15a>
 80068f8:	2b30      	cmp	r3, #48	@ 0x30
 80068fa:	d86b      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x16c>
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	d060      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006900:	2b20      	cmp	r3, #32
 8006902:	d867      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x16c>
 8006904:	2b00      	cmp	r3, #0
 8006906:	d05c      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006908:	2b10      	cmp	r3, #16
 800690a:	d05a      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x15a>
 800690c:	e062      	b.n	80069d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800691e:	f000 fc19 	bl	8007154 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006930:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	609a      	str	r2, [r3, #8]
      break;
 800693a:	e04f      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800694c:	f000 fc02 	bl	8007154 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800695e:	609a      	str	r2, [r3, #8]
      break;
 8006960:	e03c      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800696e:	461a      	mov	r2, r3
 8006970:	f000 fb76 	bl	8007060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2150      	movs	r1, #80	@ 0x50
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fbcf 	bl	800711e <TIM_ITRx_SetConfig>
      break;
 8006980:	e02c      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800698e:	461a      	mov	r2, r3
 8006990:	f000 fb95 	bl	80070be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2160      	movs	r1, #96	@ 0x60
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fbbf 	bl	800711e <TIM_ITRx_SetConfig>
      break;
 80069a0:	e01c      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ae:	461a      	mov	r2, r3
 80069b0:	f000 fb56 	bl	8007060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2140      	movs	r1, #64	@ 0x40
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fbaf 	bl	800711e <TIM_ITRx_SetConfig>
      break;
 80069c0:	e00c      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4619      	mov	r1, r3
 80069cc:	4610      	mov	r0, r2
 80069ce:	f000 fba6 	bl	800711e <TIM_ITRx_SetConfig>
      break;
 80069d2:	e003      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	73fb      	strb	r3, [r7, #15]
      break;
 80069d8:	e000      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	fffeff88 	.word	0xfffeff88

080069fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a46      	ldr	r2, [pc, #280]	@ (8006b78 <TIM_Base_SetConfig+0x12c>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d013      	beq.n	8006a8c <TIM_Base_SetConfig+0x40>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a6a:	d00f      	beq.n	8006a8c <TIM_Base_SetConfig+0x40>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a43      	ldr	r2, [pc, #268]	@ (8006b7c <TIM_Base_SetConfig+0x130>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00b      	beq.n	8006a8c <TIM_Base_SetConfig+0x40>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a42      	ldr	r2, [pc, #264]	@ (8006b80 <TIM_Base_SetConfig+0x134>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d007      	beq.n	8006a8c <TIM_Base_SetConfig+0x40>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a41      	ldr	r2, [pc, #260]	@ (8006b84 <TIM_Base_SetConfig+0x138>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d003      	beq.n	8006a8c <TIM_Base_SetConfig+0x40>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a40      	ldr	r2, [pc, #256]	@ (8006b88 <TIM_Base_SetConfig+0x13c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d108      	bne.n	8006a9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a35      	ldr	r2, [pc, #212]	@ (8006b78 <TIM_Base_SetConfig+0x12c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d02b      	beq.n	8006afe <TIM_Base_SetConfig+0xb2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aac:	d027      	beq.n	8006afe <TIM_Base_SetConfig+0xb2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a32      	ldr	r2, [pc, #200]	@ (8006b7c <TIM_Base_SetConfig+0x130>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d023      	beq.n	8006afe <TIM_Base_SetConfig+0xb2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a31      	ldr	r2, [pc, #196]	@ (8006b80 <TIM_Base_SetConfig+0x134>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d01f      	beq.n	8006afe <TIM_Base_SetConfig+0xb2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a30      	ldr	r2, [pc, #192]	@ (8006b84 <TIM_Base_SetConfig+0x138>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d01b      	beq.n	8006afe <TIM_Base_SetConfig+0xb2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a2f      	ldr	r2, [pc, #188]	@ (8006b88 <TIM_Base_SetConfig+0x13c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d017      	beq.n	8006afe <TIM_Base_SetConfig+0xb2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a2e      	ldr	r2, [pc, #184]	@ (8006b8c <TIM_Base_SetConfig+0x140>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d013      	beq.n	8006afe <TIM_Base_SetConfig+0xb2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a2d      	ldr	r2, [pc, #180]	@ (8006b90 <TIM_Base_SetConfig+0x144>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d00f      	beq.n	8006afe <TIM_Base_SetConfig+0xb2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a2c      	ldr	r2, [pc, #176]	@ (8006b94 <TIM_Base_SetConfig+0x148>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00b      	beq.n	8006afe <TIM_Base_SetConfig+0xb2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8006b98 <TIM_Base_SetConfig+0x14c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d007      	beq.n	8006afe <TIM_Base_SetConfig+0xb2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a2a      	ldr	r2, [pc, #168]	@ (8006b9c <TIM_Base_SetConfig+0x150>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d003      	beq.n	8006afe <TIM_Base_SetConfig+0xb2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a29      	ldr	r2, [pc, #164]	@ (8006ba0 <TIM_Base_SetConfig+0x154>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d108      	bne.n	8006b10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a10      	ldr	r2, [pc, #64]	@ (8006b78 <TIM_Base_SetConfig+0x12c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d003      	beq.n	8006b44 <TIM_Base_SetConfig+0xf8>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a12      	ldr	r2, [pc, #72]	@ (8006b88 <TIM_Base_SetConfig+0x13c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d103      	bne.n	8006b4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	691a      	ldr	r2, [r3, #16]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d105      	bne.n	8006b6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	f023 0201 	bic.w	r2, r3, #1
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	611a      	str	r2, [r3, #16]
  }
}
 8006b6a:	bf00      	nop
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	40010000 	.word	0x40010000
 8006b7c:	40000400 	.word	0x40000400
 8006b80:	40000800 	.word	0x40000800
 8006b84:	40000c00 	.word	0x40000c00
 8006b88:	40010400 	.word	0x40010400
 8006b8c:	40014000 	.word	0x40014000
 8006b90:	40014400 	.word	0x40014400
 8006b94:	40014800 	.word	0x40014800
 8006b98:	40001800 	.word	0x40001800
 8006b9c:	40001c00 	.word	0x40001c00
 8006ba0:	40002000 	.word	0x40002000

08006ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	f023 0201 	bic.w	r2, r3, #1
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4b2b      	ldr	r3, [pc, #172]	@ (8006c7c <TIM_OC1_SetConfig+0xd8>)
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f023 0303 	bic.w	r3, r3, #3
 8006bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f023 0302 	bic.w	r3, r3, #2
 8006bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a21      	ldr	r2, [pc, #132]	@ (8006c80 <TIM_OC1_SetConfig+0xdc>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d003      	beq.n	8006c08 <TIM_OC1_SetConfig+0x64>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a20      	ldr	r2, [pc, #128]	@ (8006c84 <TIM_OC1_SetConfig+0xe0>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d10c      	bne.n	8006c22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f023 0308 	bic.w	r3, r3, #8
 8006c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f023 0304 	bic.w	r3, r3, #4
 8006c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a16      	ldr	r2, [pc, #88]	@ (8006c80 <TIM_OC1_SetConfig+0xdc>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d003      	beq.n	8006c32 <TIM_OC1_SetConfig+0x8e>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a15      	ldr	r2, [pc, #84]	@ (8006c84 <TIM_OC1_SetConfig+0xe0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d111      	bne.n	8006c56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	621a      	str	r2, [r3, #32]
}
 8006c70:	bf00      	nop
 8006c72:	371c      	adds	r7, #28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	fffeff8f 	.word	0xfffeff8f
 8006c80:	40010000 	.word	0x40010000
 8006c84:	40010400 	.word	0x40010400

08006c88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a1b      	ldr	r3, [r3, #32]
 8006c9c:	f023 0210 	bic.w	r2, r3, #16
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8006d6c <TIM_OC2_SetConfig+0xe4>)
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f023 0320 	bic.w	r3, r3, #32
 8006cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	011b      	lsls	r3, r3, #4
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a23      	ldr	r2, [pc, #140]	@ (8006d70 <TIM_OC2_SetConfig+0xe8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d003      	beq.n	8006cf0 <TIM_OC2_SetConfig+0x68>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a22      	ldr	r2, [pc, #136]	@ (8006d74 <TIM_OC2_SetConfig+0xec>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d10d      	bne.n	8006d0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	011b      	lsls	r3, r3, #4
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a18      	ldr	r2, [pc, #96]	@ (8006d70 <TIM_OC2_SetConfig+0xe8>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d003      	beq.n	8006d1c <TIM_OC2_SetConfig+0x94>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a17      	ldr	r2, [pc, #92]	@ (8006d74 <TIM_OC2_SetConfig+0xec>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d113      	bne.n	8006d44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	621a      	str	r2, [r3, #32]
}
 8006d5e:	bf00      	nop
 8006d60:	371c      	adds	r7, #28
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	feff8fff 	.word	0xfeff8fff
 8006d70:	40010000 	.word	0x40010000
 8006d74:	40010400 	.word	0x40010400

08006d78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4b2d      	ldr	r3, [pc, #180]	@ (8006e58 <TIM_OC3_SetConfig+0xe0>)
 8006da4:	4013      	ands	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0303 	bic.w	r3, r3, #3
 8006dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	021b      	lsls	r3, r3, #8
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a22      	ldr	r2, [pc, #136]	@ (8006e5c <TIM_OC3_SetConfig+0xe4>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d003      	beq.n	8006dde <TIM_OC3_SetConfig+0x66>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a21      	ldr	r2, [pc, #132]	@ (8006e60 <TIM_OC3_SetConfig+0xe8>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d10d      	bne.n	8006dfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006de4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a17      	ldr	r2, [pc, #92]	@ (8006e5c <TIM_OC3_SetConfig+0xe4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d003      	beq.n	8006e0a <TIM_OC3_SetConfig+0x92>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a16      	ldr	r2, [pc, #88]	@ (8006e60 <TIM_OC3_SetConfig+0xe8>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d113      	bne.n	8006e32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	011b      	lsls	r3, r3, #4
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	011b      	lsls	r3, r3, #4
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	621a      	str	r2, [r3, #32]
}
 8006e4c:	bf00      	nop
 8006e4e:	371c      	adds	r7, #28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	fffeff8f 	.word	0xfffeff8f
 8006e5c:	40010000 	.word	0x40010000
 8006e60:	40010400 	.word	0x40010400

08006e64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b087      	sub	sp, #28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8006f08 <TIM_OC4_SetConfig+0xa4>)
 8006e90:	4013      	ands	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	021b      	lsls	r3, r3, #8
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	031b      	lsls	r3, r3, #12
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a13      	ldr	r2, [pc, #76]	@ (8006f0c <TIM_OC4_SetConfig+0xa8>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d003      	beq.n	8006ecc <TIM_OC4_SetConfig+0x68>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a12      	ldr	r2, [pc, #72]	@ (8006f10 <TIM_OC4_SetConfig+0xac>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d109      	bne.n	8006ee0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ed2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	019b      	lsls	r3, r3, #6
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	621a      	str	r2, [r3, #32]
}
 8006efa:	bf00      	nop
 8006efc:	371c      	adds	r7, #28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	feff8fff 	.word	0xfeff8fff
 8006f0c:	40010000 	.word	0x40010000
 8006f10:	40010400 	.word	0x40010400

08006f14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8006fac <TIM_OC5_SetConfig+0x98>)
 8006f40:	4013      	ands	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006f54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	041b      	lsls	r3, r3, #16
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a12      	ldr	r2, [pc, #72]	@ (8006fb0 <TIM_OC5_SetConfig+0x9c>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d003      	beq.n	8006f72 <TIM_OC5_SetConfig+0x5e>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a11      	ldr	r2, [pc, #68]	@ (8006fb4 <TIM_OC5_SetConfig+0xa0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d109      	bne.n	8006f86 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	021b      	lsls	r3, r3, #8
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	621a      	str	r2, [r3, #32]
}
 8006fa0:	bf00      	nop
 8006fa2:	371c      	adds	r7, #28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	fffeff8f 	.word	0xfffeff8f
 8006fb0:	40010000 	.word	0x40010000
 8006fb4:	40010400 	.word	0x40010400

08006fb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8007054 <TIM_OC6_SetConfig+0x9c>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	021b      	lsls	r3, r3, #8
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	051b      	lsls	r3, r3, #20
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	4313      	orrs	r3, r2
 8007006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a13      	ldr	r2, [pc, #76]	@ (8007058 <TIM_OC6_SetConfig+0xa0>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d003      	beq.n	8007018 <TIM_OC6_SetConfig+0x60>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a12      	ldr	r2, [pc, #72]	@ (800705c <TIM_OC6_SetConfig+0xa4>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d109      	bne.n	800702c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800701e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	029b      	lsls	r3, r3, #10
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	4313      	orrs	r3, r2
 800702a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	621a      	str	r2, [r3, #32]
}
 8007046:	bf00      	nop
 8007048:	371c      	adds	r7, #28
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	feff8fff 	.word	0xfeff8fff
 8007058:	40010000 	.word	0x40010000
 800705c:	40010400 	.word	0x40010400

08007060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f023 0201 	bic.w	r2, r3, #1
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800708a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f023 030a 	bic.w	r3, r3, #10
 800709c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	621a      	str	r2, [r3, #32]
}
 80070b2:	bf00      	nop
 80070b4:	371c      	adds	r7, #28
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070be:	b480      	push	{r7}
 80070c0:	b087      	sub	sp, #28
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	60b9      	str	r1, [r7, #8]
 80070c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	f023 0210 	bic.w	r2, r3, #16
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80070e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	031b      	lsls	r3, r3, #12
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	4313      	orrs	r3, r2
 8007104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	621a      	str	r2, [r3, #32]
}
 8007112:	bf00      	nop
 8007114:	371c      	adds	r7, #28
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800711e:	b480      	push	{r7}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007134:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	f043 0307 	orr.w	r3, r3, #7
 8007140:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	609a      	str	r2, [r3, #8]
}
 8007148:	bf00      	nop
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800716e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	021a      	lsls	r2, r3, #8
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	431a      	orrs	r2, r3
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	4313      	orrs	r3, r2
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	4313      	orrs	r3, r2
 8007180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	609a      	str	r2, [r3, #8]
}
 8007188:	bf00      	nop
 800718a:	371c      	adds	r7, #28
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f003 031f 	and.w	r3, r3, #31
 80071a6:	2201      	movs	r2, #1
 80071a8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6a1a      	ldr	r2, [r3, #32]
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	43db      	mvns	r3, r3
 80071b6:	401a      	ands	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a1a      	ldr	r2, [r3, #32]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f003 031f 	and.w	r3, r3, #31
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	fa01 f303 	lsl.w	r3, r1, r3
 80071cc:	431a      	orrs	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	621a      	str	r2, [r3, #32]
}
 80071d2:	bf00      	nop
 80071d4:	371c      	adds	r7, #28
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
	...

080071e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d101      	bne.n	80071f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071f4:	2302      	movs	r3, #2
 80071f6:	e06d      	b.n	80072d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a30      	ldr	r2, [pc, #192]	@ (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d004      	beq.n	800722c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a2f      	ldr	r2, [pc, #188]	@ (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d108      	bne.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007232:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007244:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	4313      	orrs	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a20      	ldr	r2, [pc, #128]	@ (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d022      	beq.n	80072a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800726a:	d01d      	beq.n	80072a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a1d      	ldr	r2, [pc, #116]	@ (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d018      	beq.n	80072a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a1c      	ldr	r2, [pc, #112]	@ (80072ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d013      	beq.n	80072a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a1a      	ldr	r2, [pc, #104]	@ (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d00e      	beq.n	80072a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a15      	ldr	r2, [pc, #84]	@ (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d009      	beq.n	80072a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a16      	ldr	r2, [pc, #88]	@ (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d004      	beq.n	80072a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a15      	ldr	r2, [pc, #84]	@ (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d10c      	bne.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	40010000 	.word	0x40010000
 80072e4:	40010400 	.word	0x40010400
 80072e8:	40000400 	.word	0x40000400
 80072ec:	40000800 	.word	0x40000800
 80072f0:	40000c00 	.word	0x40000c00
 80072f4:	40014000 	.word	0x40014000
 80072f8:	40001800 	.word	0x40001800

080072fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e040      	b.n	80073cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800734e:	2b00      	cmp	r3, #0
 8007350:	d106      	bne.n	8007360 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7fa fc9c 	bl	8001c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2224      	movs	r2, #36	@ 0x24
 8007364:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0201 	bic.w	r2, r2, #1
 8007374:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fe6c 	bl	800805c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fc05 	bl	8007b94 <UART_SetConfig>
 800738a:	4603      	mov	r3, r0
 800738c:	2b01      	cmp	r3, #1
 800738e:	d101      	bne.n	8007394 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e01b      	b.n	80073cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0201 	orr.w	r2, r2, #1
 80073c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 feeb 	bl	80081a0 <UART_CheckIdleState>
 80073ca:	4603      	mov	r3, r0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08a      	sub	sp, #40	@ 0x28
 80073d8:	af02      	add	r7, sp, #8
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	603b      	str	r3, [r7, #0]
 80073e0:	4613      	mov	r3, r2
 80073e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073e8:	2b20      	cmp	r3, #32
 80073ea:	d177      	bne.n	80074dc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <HAL_UART_Transmit+0x24>
 80073f2:	88fb      	ldrh	r3, [r7, #6]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e070      	b.n	80074de <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2221      	movs	r2, #33	@ 0x21
 8007408:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800740a:	f7fb fc8b 	bl	8002d24 <HAL_GetTick>
 800740e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	88fa      	ldrh	r2, [r7, #6]
 8007414:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	88fa      	ldrh	r2, [r7, #6]
 800741c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007428:	d108      	bne.n	800743c <HAL_UART_Transmit+0x68>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d104      	bne.n	800743c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007432:	2300      	movs	r3, #0
 8007434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	e003      	b.n	8007444 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007440:	2300      	movs	r3, #0
 8007442:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007444:	e02f      	b.n	80074a6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2200      	movs	r2, #0
 800744e:	2180      	movs	r1, #128	@ 0x80
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 ff4d 	bl	80082f0 <UART_WaitOnFlagUntilTimeout>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d004      	beq.n	8007466 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2220      	movs	r2, #32
 8007460:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e03b      	b.n	80074de <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10b      	bne.n	8007484 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800747a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	3302      	adds	r3, #2
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	e007      	b.n	8007494 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	781a      	ldrb	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	3301      	adds	r3, #1
 8007492:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800749a:	b29b      	uxth	r3, r3
 800749c:	3b01      	subs	r3, #1
 800749e:	b29a      	uxth	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1c9      	bne.n	8007446 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2200      	movs	r2, #0
 80074ba:	2140      	movs	r1, #64	@ 0x40
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 ff17 	bl	80082f0 <UART_WaitOnFlagUntilTimeout>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d004      	beq.n	80074d2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2220      	movs	r2, #32
 80074cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e005      	b.n	80074de <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2220      	movs	r2, #32
 80074d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	e000      	b.n	80074de <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80074dc:	2302      	movs	r3, #2
  }
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3720      	adds	r7, #32
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b08a      	sub	sp, #40	@ 0x28
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	4613      	mov	r3, r2
 80074f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074fa:	2b20      	cmp	r3, #32
 80074fc:	d132      	bne.n	8007564 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d002      	beq.n	800750a <HAL_UART_Receive_IT+0x24>
 8007504:	88fb      	ldrh	r3, [r7, #6]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e02b      	b.n	8007566 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d018      	beq.n	8007554 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	e853 3f00 	ldrex	r3, [r3]
 800752e:	613b      	str	r3, [r7, #16]
   return(result);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007536:	627b      	str	r3, [r7, #36]	@ 0x24
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	461a      	mov	r2, r3
 800753e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007540:	623b      	str	r3, [r7, #32]
 8007542:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007544:	69f9      	ldr	r1, [r7, #28]
 8007546:	6a3a      	ldr	r2, [r7, #32]
 8007548:	e841 2300 	strex	r3, r2, [r1]
 800754c:	61bb      	str	r3, [r7, #24]
   return(result);
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1e6      	bne.n	8007522 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007554:	88fb      	ldrh	r3, [r7, #6]
 8007556:	461a      	mov	r2, r3
 8007558:	68b9      	ldr	r1, [r7, #8]
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 ff36 	bl	80083cc <UART_Start_Receive_IT>
 8007560:	4603      	mov	r3, r0
 8007562:	e000      	b.n	8007566 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007564:	2302      	movs	r3, #2
  }
}
 8007566:	4618      	mov	r0, r3
 8007568:	3728      	adds	r7, #40	@ 0x28
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b0ba      	sub	sp, #232	@ 0xe8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007596:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800759a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800759e:	4013      	ands	r3, r2
 80075a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80075a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d115      	bne.n	80075d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80075ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00f      	beq.n	80075d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d009      	beq.n	80075d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 82ac 	beq.w	8007b26 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	4798      	blx	r3
      }
      return;
 80075d6:	e2a6      	b.n	8007b26 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80075d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 8117 	beq.w	8007810 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80075e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d106      	bne.n	80075fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80075ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80075f2:	4b85      	ldr	r3, [pc, #532]	@ (8007808 <HAL_UART_IRQHandler+0x298>)
 80075f4:	4013      	ands	r3, r2
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 810a 	beq.w	8007810 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d011      	beq.n	800762c <HAL_UART_IRQHandler+0xbc>
 8007608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800760c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2201      	movs	r2, #1
 800761a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007622:	f043 0201 	orr.w	r2, r3, #1
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800762c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d011      	beq.n	800765c <HAL_UART_IRQHandler+0xec>
 8007638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2202      	movs	r2, #2
 800764a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007652:	f043 0204 	orr.w	r2, r3, #4
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800765c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007660:	f003 0304 	and.w	r3, r3, #4
 8007664:	2b00      	cmp	r3, #0
 8007666:	d011      	beq.n	800768c <HAL_UART_IRQHandler+0x11c>
 8007668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00b      	beq.n	800768c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2204      	movs	r2, #4
 800767a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007682:	f043 0202 	orr.w	r2, r3, #2
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800768c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007690:	f003 0308 	and.w	r3, r3, #8
 8007694:	2b00      	cmp	r3, #0
 8007696:	d017      	beq.n	80076c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800769c:	f003 0320 	and.w	r3, r3, #32
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d105      	bne.n	80076b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80076a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00b      	beq.n	80076c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2208      	movs	r2, #8
 80076b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076be:	f043 0208 	orr.w	r2, r3, #8
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d012      	beq.n	80076fa <HAL_UART_IRQHandler+0x18a>
 80076d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00c      	beq.n	80076fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076f0:	f043 0220 	orr.w	r2, r3, #32
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 8212 	beq.w	8007b2a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800770a:	f003 0320 	and.w	r3, r3, #32
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00d      	beq.n	800772e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007716:	f003 0320 	and.w	r3, r3, #32
 800771a:	2b00      	cmp	r3, #0
 800771c:	d007      	beq.n	800772e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007734:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007742:	2b40      	cmp	r3, #64	@ 0x40
 8007744:	d005      	beq.n	8007752 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800774a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800774e:	2b00      	cmp	r3, #0
 8007750:	d04f      	beq.n	80077f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 ff00 	bl	8008558 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007762:	2b40      	cmp	r3, #64	@ 0x40
 8007764:	d141      	bne.n	80077ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3308      	adds	r3, #8
 800776c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800777c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007784:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3308      	adds	r3, #8
 800778e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007792:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007796:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800779e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80077a2:	e841 2300 	strex	r3, r2, [r1]
 80077a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80077aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1d9      	bne.n	8007766 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d013      	beq.n	80077e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077be:	4a13      	ldr	r2, [pc, #76]	@ (800780c <HAL_UART_IRQHandler+0x29c>)
 80077c0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fb fc0a 	bl	8002fe0 <HAL_DMA_Abort_IT>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d017      	beq.n	8007802 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80077dc:	4610      	mov	r0, r2
 80077de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e0:	e00f      	b.n	8007802 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f9b6 	bl	8007b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e8:	e00b      	b.n	8007802 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f9b2 	bl	8007b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f0:	e007      	b.n	8007802 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f9ae 	bl	8007b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007800:	e193      	b.n	8007b2a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007802:	bf00      	nop
    return;
 8007804:	e191      	b.n	8007b2a <HAL_UART_IRQHandler+0x5ba>
 8007806:	bf00      	nop
 8007808:	04000120 	.word	0x04000120
 800780c:	08008621 	.word	0x08008621

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007814:	2b01      	cmp	r3, #1
 8007816:	f040 814c 	bne.w	8007ab2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800781a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800781e:	f003 0310 	and.w	r3, r3, #16
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 8145 	beq.w	8007ab2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800782c:	f003 0310 	and.w	r3, r3, #16
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 813e 	beq.w	8007ab2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2210      	movs	r2, #16
 800783c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007848:	2b40      	cmp	r3, #64	@ 0x40
 800784a:	f040 80b6 	bne.w	80079ba <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800785a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 8165 	beq.w	8007b2e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800786a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800786e:	429a      	cmp	r2, r3
 8007870:	f080 815d 	bcs.w	8007b2e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800787a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007882:	69db      	ldr	r3, [r3, #28]
 8007884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007888:	f000 8086 	beq.w	8007998 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80078a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	461a      	mov	r2, r3
 80078b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80078ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80078c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80078ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1da      	bne.n	800788c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3308      	adds	r3, #8
 80078dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80078e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078e8:	f023 0301 	bic.w	r3, r3, #1
 80078ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3308      	adds	r3, #8
 80078f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80078fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80078fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007900:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007902:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800790c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e1      	bne.n	80078d6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3308      	adds	r3, #8
 8007918:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007928:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3308      	adds	r3, #8
 8007932:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007936:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007938:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800793c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007944:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e3      	bne.n	8007912 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007968:	f023 0310 	bic.w	r3, r3, #16
 800796c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800797a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800797c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007980:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007988:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e4      	bne.n	8007958 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007992:	4618      	mov	r0, r3
 8007994:	f7fb fab4 	bl	8002f00 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	4619      	mov	r1, r3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f8d8 	bl	8007b68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079b8:	e0b9      	b.n	8007b2e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 80ab 	beq.w	8007b32 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80079dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 80a6 	beq.w	8007b32 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ee:	e853 3f00 	ldrex	r3, [r3]
 80079f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a08:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a10:	e841 2300 	strex	r3, r2, [r1]
 8007a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1e4      	bne.n	80079e6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3308      	adds	r3, #8
 8007a22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a26:	e853 3f00 	ldrex	r3, [r3]
 8007a2a:	623b      	str	r3, [r7, #32]
   return(result);
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	f023 0301 	bic.w	r3, r3, #1
 8007a32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007a40:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a48:	e841 2300 	strex	r3, r2, [r1]
 8007a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1e3      	bne.n	8007a1c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2220      	movs	r2, #32
 8007a58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	e853 3f00 	ldrex	r3, [r3]
 8007a74:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f023 0310 	bic.w	r3, r3, #16
 8007a7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	461a      	mov	r2, r3
 8007a86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a8a:	61fb      	str	r3, [r7, #28]
 8007a8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	69b9      	ldr	r1, [r7, #24]
 8007a90:	69fa      	ldr	r2, [r7, #28]
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	617b      	str	r3, [r7, #20]
   return(result);
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e4      	bne.n	8007a68 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007aa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f85c 	bl	8007b68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ab0:	e03f      	b.n	8007b32 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00e      	beq.n	8007adc <HAL_UART_IRQHandler+0x56c>
 8007abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d008      	beq.n	8007adc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007ad2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f853 	bl	8007b80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ada:	e02d      	b.n	8007b38 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00e      	beq.n	8007b06 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d008      	beq.n	8007b06 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d01c      	beq.n	8007b36 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	4798      	blx	r3
    }
    return;
 8007b04:	e017      	b.n	8007b36 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d012      	beq.n	8007b38 <HAL_UART_IRQHandler+0x5c8>
 8007b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00c      	beq.n	8007b38 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fd94 	bl	800864c <UART_EndTransmit_IT>
    return;
 8007b24:	e008      	b.n	8007b38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007b26:	bf00      	nop
 8007b28:	e006      	b.n	8007b38 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007b2a:	bf00      	nop
 8007b2c:	e004      	b.n	8007b38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007b2e:	bf00      	nop
 8007b30:	e002      	b.n	8007b38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007b32:	bf00      	nop
 8007b34:	e000      	b.n	8007b38 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007b36:	bf00      	nop
  }

}
 8007b38:	37e8      	adds	r7, #232	@ 0xe8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop

08007b40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b088      	sub	sp, #32
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689a      	ldr	r2, [r3, #8]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	4ba6      	ldr	r3, [pc, #664]	@ (8007e58 <UART_SetConfig+0x2c4>)
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	6812      	ldr	r2, [r2, #0]
 8007bc6:	6979      	ldr	r1, [r7, #20]
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68da      	ldr	r2, [r3, #12]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a94      	ldr	r2, [pc, #592]	@ (8007e5c <UART_SetConfig+0x2c8>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d120      	bne.n	8007c52 <UART_SetConfig+0xbe>
 8007c10:	4b93      	ldr	r3, [pc, #588]	@ (8007e60 <UART_SetConfig+0x2cc>)
 8007c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c16:	f003 0303 	and.w	r3, r3, #3
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d816      	bhi.n	8007c4c <UART_SetConfig+0xb8>
 8007c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c24 <UART_SetConfig+0x90>)
 8007c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c24:	08007c35 	.word	0x08007c35
 8007c28:	08007c41 	.word	0x08007c41
 8007c2c:	08007c3b 	.word	0x08007c3b
 8007c30:	08007c47 	.word	0x08007c47
 8007c34:	2301      	movs	r3, #1
 8007c36:	77fb      	strb	r3, [r7, #31]
 8007c38:	e150      	b.n	8007edc <UART_SetConfig+0x348>
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	77fb      	strb	r3, [r7, #31]
 8007c3e:	e14d      	b.n	8007edc <UART_SetConfig+0x348>
 8007c40:	2304      	movs	r3, #4
 8007c42:	77fb      	strb	r3, [r7, #31]
 8007c44:	e14a      	b.n	8007edc <UART_SetConfig+0x348>
 8007c46:	2308      	movs	r3, #8
 8007c48:	77fb      	strb	r3, [r7, #31]
 8007c4a:	e147      	b.n	8007edc <UART_SetConfig+0x348>
 8007c4c:	2310      	movs	r3, #16
 8007c4e:	77fb      	strb	r3, [r7, #31]
 8007c50:	e144      	b.n	8007edc <UART_SetConfig+0x348>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a83      	ldr	r2, [pc, #524]	@ (8007e64 <UART_SetConfig+0x2d0>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d132      	bne.n	8007cc2 <UART_SetConfig+0x12e>
 8007c5c:	4b80      	ldr	r3, [pc, #512]	@ (8007e60 <UART_SetConfig+0x2cc>)
 8007c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c62:	f003 030c 	and.w	r3, r3, #12
 8007c66:	2b0c      	cmp	r3, #12
 8007c68:	d828      	bhi.n	8007cbc <UART_SetConfig+0x128>
 8007c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c70 <UART_SetConfig+0xdc>)
 8007c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c70:	08007ca5 	.word	0x08007ca5
 8007c74:	08007cbd 	.word	0x08007cbd
 8007c78:	08007cbd 	.word	0x08007cbd
 8007c7c:	08007cbd 	.word	0x08007cbd
 8007c80:	08007cb1 	.word	0x08007cb1
 8007c84:	08007cbd 	.word	0x08007cbd
 8007c88:	08007cbd 	.word	0x08007cbd
 8007c8c:	08007cbd 	.word	0x08007cbd
 8007c90:	08007cab 	.word	0x08007cab
 8007c94:	08007cbd 	.word	0x08007cbd
 8007c98:	08007cbd 	.word	0x08007cbd
 8007c9c:	08007cbd 	.word	0x08007cbd
 8007ca0:	08007cb7 	.word	0x08007cb7
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	77fb      	strb	r3, [r7, #31]
 8007ca8:	e118      	b.n	8007edc <UART_SetConfig+0x348>
 8007caa:	2302      	movs	r3, #2
 8007cac:	77fb      	strb	r3, [r7, #31]
 8007cae:	e115      	b.n	8007edc <UART_SetConfig+0x348>
 8007cb0:	2304      	movs	r3, #4
 8007cb2:	77fb      	strb	r3, [r7, #31]
 8007cb4:	e112      	b.n	8007edc <UART_SetConfig+0x348>
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	77fb      	strb	r3, [r7, #31]
 8007cba:	e10f      	b.n	8007edc <UART_SetConfig+0x348>
 8007cbc:	2310      	movs	r3, #16
 8007cbe:	77fb      	strb	r3, [r7, #31]
 8007cc0:	e10c      	b.n	8007edc <UART_SetConfig+0x348>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a68      	ldr	r2, [pc, #416]	@ (8007e68 <UART_SetConfig+0x2d4>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d120      	bne.n	8007d0e <UART_SetConfig+0x17a>
 8007ccc:	4b64      	ldr	r3, [pc, #400]	@ (8007e60 <UART_SetConfig+0x2cc>)
 8007cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cd2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007cd6:	2b30      	cmp	r3, #48	@ 0x30
 8007cd8:	d013      	beq.n	8007d02 <UART_SetConfig+0x16e>
 8007cda:	2b30      	cmp	r3, #48	@ 0x30
 8007cdc:	d814      	bhi.n	8007d08 <UART_SetConfig+0x174>
 8007cde:	2b20      	cmp	r3, #32
 8007ce0:	d009      	beq.n	8007cf6 <UART_SetConfig+0x162>
 8007ce2:	2b20      	cmp	r3, #32
 8007ce4:	d810      	bhi.n	8007d08 <UART_SetConfig+0x174>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <UART_SetConfig+0x15c>
 8007cea:	2b10      	cmp	r3, #16
 8007cec:	d006      	beq.n	8007cfc <UART_SetConfig+0x168>
 8007cee:	e00b      	b.n	8007d08 <UART_SetConfig+0x174>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	77fb      	strb	r3, [r7, #31]
 8007cf4:	e0f2      	b.n	8007edc <UART_SetConfig+0x348>
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	77fb      	strb	r3, [r7, #31]
 8007cfa:	e0ef      	b.n	8007edc <UART_SetConfig+0x348>
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	77fb      	strb	r3, [r7, #31]
 8007d00:	e0ec      	b.n	8007edc <UART_SetConfig+0x348>
 8007d02:	2308      	movs	r3, #8
 8007d04:	77fb      	strb	r3, [r7, #31]
 8007d06:	e0e9      	b.n	8007edc <UART_SetConfig+0x348>
 8007d08:	2310      	movs	r3, #16
 8007d0a:	77fb      	strb	r3, [r7, #31]
 8007d0c:	e0e6      	b.n	8007edc <UART_SetConfig+0x348>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a56      	ldr	r2, [pc, #344]	@ (8007e6c <UART_SetConfig+0x2d8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d120      	bne.n	8007d5a <UART_SetConfig+0x1c6>
 8007d18:	4b51      	ldr	r3, [pc, #324]	@ (8007e60 <UART_SetConfig+0x2cc>)
 8007d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007d22:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d24:	d013      	beq.n	8007d4e <UART_SetConfig+0x1ba>
 8007d26:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d28:	d814      	bhi.n	8007d54 <UART_SetConfig+0x1c0>
 8007d2a:	2b80      	cmp	r3, #128	@ 0x80
 8007d2c:	d009      	beq.n	8007d42 <UART_SetConfig+0x1ae>
 8007d2e:	2b80      	cmp	r3, #128	@ 0x80
 8007d30:	d810      	bhi.n	8007d54 <UART_SetConfig+0x1c0>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <UART_SetConfig+0x1a8>
 8007d36:	2b40      	cmp	r3, #64	@ 0x40
 8007d38:	d006      	beq.n	8007d48 <UART_SetConfig+0x1b4>
 8007d3a:	e00b      	b.n	8007d54 <UART_SetConfig+0x1c0>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	77fb      	strb	r3, [r7, #31]
 8007d40:	e0cc      	b.n	8007edc <UART_SetConfig+0x348>
 8007d42:	2302      	movs	r3, #2
 8007d44:	77fb      	strb	r3, [r7, #31]
 8007d46:	e0c9      	b.n	8007edc <UART_SetConfig+0x348>
 8007d48:	2304      	movs	r3, #4
 8007d4a:	77fb      	strb	r3, [r7, #31]
 8007d4c:	e0c6      	b.n	8007edc <UART_SetConfig+0x348>
 8007d4e:	2308      	movs	r3, #8
 8007d50:	77fb      	strb	r3, [r7, #31]
 8007d52:	e0c3      	b.n	8007edc <UART_SetConfig+0x348>
 8007d54:	2310      	movs	r3, #16
 8007d56:	77fb      	strb	r3, [r7, #31]
 8007d58:	e0c0      	b.n	8007edc <UART_SetConfig+0x348>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a44      	ldr	r2, [pc, #272]	@ (8007e70 <UART_SetConfig+0x2dc>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d125      	bne.n	8007db0 <UART_SetConfig+0x21c>
 8007d64:	4b3e      	ldr	r3, [pc, #248]	@ (8007e60 <UART_SetConfig+0x2cc>)
 8007d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d72:	d017      	beq.n	8007da4 <UART_SetConfig+0x210>
 8007d74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d78:	d817      	bhi.n	8007daa <UART_SetConfig+0x216>
 8007d7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d7e:	d00b      	beq.n	8007d98 <UART_SetConfig+0x204>
 8007d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d84:	d811      	bhi.n	8007daa <UART_SetConfig+0x216>
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <UART_SetConfig+0x1fe>
 8007d8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d8e:	d006      	beq.n	8007d9e <UART_SetConfig+0x20a>
 8007d90:	e00b      	b.n	8007daa <UART_SetConfig+0x216>
 8007d92:	2300      	movs	r3, #0
 8007d94:	77fb      	strb	r3, [r7, #31]
 8007d96:	e0a1      	b.n	8007edc <UART_SetConfig+0x348>
 8007d98:	2302      	movs	r3, #2
 8007d9a:	77fb      	strb	r3, [r7, #31]
 8007d9c:	e09e      	b.n	8007edc <UART_SetConfig+0x348>
 8007d9e:	2304      	movs	r3, #4
 8007da0:	77fb      	strb	r3, [r7, #31]
 8007da2:	e09b      	b.n	8007edc <UART_SetConfig+0x348>
 8007da4:	2308      	movs	r3, #8
 8007da6:	77fb      	strb	r3, [r7, #31]
 8007da8:	e098      	b.n	8007edc <UART_SetConfig+0x348>
 8007daa:	2310      	movs	r3, #16
 8007dac:	77fb      	strb	r3, [r7, #31]
 8007dae:	e095      	b.n	8007edc <UART_SetConfig+0x348>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a2f      	ldr	r2, [pc, #188]	@ (8007e74 <UART_SetConfig+0x2e0>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d125      	bne.n	8007e06 <UART_SetConfig+0x272>
 8007dba:	4b29      	ldr	r3, [pc, #164]	@ (8007e60 <UART_SetConfig+0x2cc>)
 8007dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dc0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007dc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dc8:	d017      	beq.n	8007dfa <UART_SetConfig+0x266>
 8007dca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dce:	d817      	bhi.n	8007e00 <UART_SetConfig+0x26c>
 8007dd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dd4:	d00b      	beq.n	8007dee <UART_SetConfig+0x25a>
 8007dd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dda:	d811      	bhi.n	8007e00 <UART_SetConfig+0x26c>
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <UART_SetConfig+0x254>
 8007de0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007de4:	d006      	beq.n	8007df4 <UART_SetConfig+0x260>
 8007de6:	e00b      	b.n	8007e00 <UART_SetConfig+0x26c>
 8007de8:	2301      	movs	r3, #1
 8007dea:	77fb      	strb	r3, [r7, #31]
 8007dec:	e076      	b.n	8007edc <UART_SetConfig+0x348>
 8007dee:	2302      	movs	r3, #2
 8007df0:	77fb      	strb	r3, [r7, #31]
 8007df2:	e073      	b.n	8007edc <UART_SetConfig+0x348>
 8007df4:	2304      	movs	r3, #4
 8007df6:	77fb      	strb	r3, [r7, #31]
 8007df8:	e070      	b.n	8007edc <UART_SetConfig+0x348>
 8007dfa:	2308      	movs	r3, #8
 8007dfc:	77fb      	strb	r3, [r7, #31]
 8007dfe:	e06d      	b.n	8007edc <UART_SetConfig+0x348>
 8007e00:	2310      	movs	r3, #16
 8007e02:	77fb      	strb	r3, [r7, #31]
 8007e04:	e06a      	b.n	8007edc <UART_SetConfig+0x348>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8007e78 <UART_SetConfig+0x2e4>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d138      	bne.n	8007e82 <UART_SetConfig+0x2ee>
 8007e10:	4b13      	ldr	r3, [pc, #76]	@ (8007e60 <UART_SetConfig+0x2cc>)
 8007e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e16:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007e1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e1e:	d017      	beq.n	8007e50 <UART_SetConfig+0x2bc>
 8007e20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e24:	d82a      	bhi.n	8007e7c <UART_SetConfig+0x2e8>
 8007e26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e2a:	d00b      	beq.n	8007e44 <UART_SetConfig+0x2b0>
 8007e2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e30:	d824      	bhi.n	8007e7c <UART_SetConfig+0x2e8>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <UART_SetConfig+0x2aa>
 8007e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e3a:	d006      	beq.n	8007e4a <UART_SetConfig+0x2b6>
 8007e3c:	e01e      	b.n	8007e7c <UART_SetConfig+0x2e8>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	77fb      	strb	r3, [r7, #31]
 8007e42:	e04b      	b.n	8007edc <UART_SetConfig+0x348>
 8007e44:	2302      	movs	r3, #2
 8007e46:	77fb      	strb	r3, [r7, #31]
 8007e48:	e048      	b.n	8007edc <UART_SetConfig+0x348>
 8007e4a:	2304      	movs	r3, #4
 8007e4c:	77fb      	strb	r3, [r7, #31]
 8007e4e:	e045      	b.n	8007edc <UART_SetConfig+0x348>
 8007e50:	2308      	movs	r3, #8
 8007e52:	77fb      	strb	r3, [r7, #31]
 8007e54:	e042      	b.n	8007edc <UART_SetConfig+0x348>
 8007e56:	bf00      	nop
 8007e58:	efff69f3 	.word	0xefff69f3
 8007e5c:	40011000 	.word	0x40011000
 8007e60:	40023800 	.word	0x40023800
 8007e64:	40004400 	.word	0x40004400
 8007e68:	40004800 	.word	0x40004800
 8007e6c:	40004c00 	.word	0x40004c00
 8007e70:	40005000 	.word	0x40005000
 8007e74:	40011400 	.word	0x40011400
 8007e78:	40007800 	.word	0x40007800
 8007e7c:	2310      	movs	r3, #16
 8007e7e:	77fb      	strb	r3, [r7, #31]
 8007e80:	e02c      	b.n	8007edc <UART_SetConfig+0x348>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a72      	ldr	r2, [pc, #456]	@ (8008050 <UART_SetConfig+0x4bc>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d125      	bne.n	8007ed8 <UART_SetConfig+0x344>
 8007e8c:	4b71      	ldr	r3, [pc, #452]	@ (8008054 <UART_SetConfig+0x4c0>)
 8007e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e92:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007e96:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007e9a:	d017      	beq.n	8007ecc <UART_SetConfig+0x338>
 8007e9c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007ea0:	d817      	bhi.n	8007ed2 <UART_SetConfig+0x33e>
 8007ea2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ea6:	d00b      	beq.n	8007ec0 <UART_SetConfig+0x32c>
 8007ea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007eac:	d811      	bhi.n	8007ed2 <UART_SetConfig+0x33e>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <UART_SetConfig+0x326>
 8007eb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007eb6:	d006      	beq.n	8007ec6 <UART_SetConfig+0x332>
 8007eb8:	e00b      	b.n	8007ed2 <UART_SetConfig+0x33e>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	77fb      	strb	r3, [r7, #31]
 8007ebe:	e00d      	b.n	8007edc <UART_SetConfig+0x348>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	77fb      	strb	r3, [r7, #31]
 8007ec4:	e00a      	b.n	8007edc <UART_SetConfig+0x348>
 8007ec6:	2304      	movs	r3, #4
 8007ec8:	77fb      	strb	r3, [r7, #31]
 8007eca:	e007      	b.n	8007edc <UART_SetConfig+0x348>
 8007ecc:	2308      	movs	r3, #8
 8007ece:	77fb      	strb	r3, [r7, #31]
 8007ed0:	e004      	b.n	8007edc <UART_SetConfig+0x348>
 8007ed2:	2310      	movs	r3, #16
 8007ed4:	77fb      	strb	r3, [r7, #31]
 8007ed6:	e001      	b.n	8007edc <UART_SetConfig+0x348>
 8007ed8:	2310      	movs	r3, #16
 8007eda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	69db      	ldr	r3, [r3, #28]
 8007ee0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ee4:	d15b      	bne.n	8007f9e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007ee6:	7ffb      	ldrb	r3, [r7, #31]
 8007ee8:	2b08      	cmp	r3, #8
 8007eea:	d828      	bhi.n	8007f3e <UART_SetConfig+0x3aa>
 8007eec:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef4 <UART_SetConfig+0x360>)
 8007eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef2:	bf00      	nop
 8007ef4:	08007f19 	.word	0x08007f19
 8007ef8:	08007f21 	.word	0x08007f21
 8007efc:	08007f29 	.word	0x08007f29
 8007f00:	08007f3f 	.word	0x08007f3f
 8007f04:	08007f2f 	.word	0x08007f2f
 8007f08:	08007f3f 	.word	0x08007f3f
 8007f0c:	08007f3f 	.word	0x08007f3f
 8007f10:	08007f3f 	.word	0x08007f3f
 8007f14:	08007f37 	.word	0x08007f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f18:	f7fc fd92 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 8007f1c:	61b8      	str	r0, [r7, #24]
        break;
 8007f1e:	e013      	b.n	8007f48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f20:	f7fc fda2 	bl	8004a68 <HAL_RCC_GetPCLK2Freq>
 8007f24:	61b8      	str	r0, [r7, #24]
        break;
 8007f26:	e00f      	b.n	8007f48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f28:	4b4b      	ldr	r3, [pc, #300]	@ (8008058 <UART_SetConfig+0x4c4>)
 8007f2a:	61bb      	str	r3, [r7, #24]
        break;
 8007f2c:	e00c      	b.n	8007f48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f2e:	f7fc fc75 	bl	800481c <HAL_RCC_GetSysClockFreq>
 8007f32:	61b8      	str	r0, [r7, #24]
        break;
 8007f34:	e008      	b.n	8007f48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f3a:	61bb      	str	r3, [r7, #24]
        break;
 8007f3c:	e004      	b.n	8007f48 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	77bb      	strb	r3, [r7, #30]
        break;
 8007f46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d074      	beq.n	8008038 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	005a      	lsls	r2, r3, #1
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	085b      	lsrs	r3, r3, #1
 8007f58:	441a      	add	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	2b0f      	cmp	r3, #15
 8007f68:	d916      	bls.n	8007f98 <UART_SetConfig+0x404>
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f70:	d212      	bcs.n	8007f98 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	f023 030f 	bic.w	r3, r3, #15
 8007f7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	085b      	lsrs	r3, r3, #1
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	f003 0307 	and.w	r3, r3, #7
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	89fb      	ldrh	r3, [r7, #14]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	89fa      	ldrh	r2, [r7, #14]
 8007f94:	60da      	str	r2, [r3, #12]
 8007f96:	e04f      	b.n	8008038 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	77bb      	strb	r3, [r7, #30]
 8007f9c:	e04c      	b.n	8008038 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f9e:	7ffb      	ldrb	r3, [r7, #31]
 8007fa0:	2b08      	cmp	r3, #8
 8007fa2:	d828      	bhi.n	8007ff6 <UART_SetConfig+0x462>
 8007fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fac <UART_SetConfig+0x418>)
 8007fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007faa:	bf00      	nop
 8007fac:	08007fd1 	.word	0x08007fd1
 8007fb0:	08007fd9 	.word	0x08007fd9
 8007fb4:	08007fe1 	.word	0x08007fe1
 8007fb8:	08007ff7 	.word	0x08007ff7
 8007fbc:	08007fe7 	.word	0x08007fe7
 8007fc0:	08007ff7 	.word	0x08007ff7
 8007fc4:	08007ff7 	.word	0x08007ff7
 8007fc8:	08007ff7 	.word	0x08007ff7
 8007fcc:	08007fef 	.word	0x08007fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fd0:	f7fc fd36 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 8007fd4:	61b8      	str	r0, [r7, #24]
        break;
 8007fd6:	e013      	b.n	8008000 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fd8:	f7fc fd46 	bl	8004a68 <HAL_RCC_GetPCLK2Freq>
 8007fdc:	61b8      	str	r0, [r7, #24]
        break;
 8007fde:	e00f      	b.n	8008000 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8008058 <UART_SetConfig+0x4c4>)
 8007fe2:	61bb      	str	r3, [r7, #24]
        break;
 8007fe4:	e00c      	b.n	8008000 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fe6:	f7fc fc19 	bl	800481c <HAL_RCC_GetSysClockFreq>
 8007fea:	61b8      	str	r0, [r7, #24]
        break;
 8007fec:	e008      	b.n	8008000 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ff2:	61bb      	str	r3, [r7, #24]
        break;
 8007ff4:	e004      	b.n	8008000 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	77bb      	strb	r3, [r7, #30]
        break;
 8007ffe:	bf00      	nop
    }

    if (pclk != 0U)
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d018      	beq.n	8008038 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	085a      	lsrs	r2, r3, #1
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	441a      	add	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	fbb2 f3f3 	udiv	r3, r2, r3
 8008018:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	2b0f      	cmp	r3, #15
 800801e:	d909      	bls.n	8008034 <UART_SetConfig+0x4a0>
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008026:	d205      	bcs.n	8008034 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	b29a      	uxth	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	60da      	str	r2, [r3, #12]
 8008032:	e001      	b.n	8008038 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008044:	7fbb      	ldrb	r3, [r7, #30]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3720      	adds	r7, #32
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	40007c00 	.word	0x40007c00
 8008054:	40023800 	.word	0x40023800
 8008058:	00f42400 	.word	0x00f42400

0800805c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008068:	f003 0308 	and.w	r3, r3, #8
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00a      	beq.n	8008086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	430a      	orrs	r2, r1
 8008084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00a      	beq.n	80080a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	430a      	orrs	r2, r1
 80080a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ac:	f003 0302 	and.w	r3, r3, #2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00a      	beq.n	80080ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ce:	f003 0304 	and.w	r3, r3, #4
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00a      	beq.n	80080ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	430a      	orrs	r2, r1
 80080ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f0:	f003 0310 	and.w	r3, r3, #16
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00a      	beq.n	800810e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008112:	f003 0320 	and.w	r3, r3, #32
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00a      	beq.n	8008130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	430a      	orrs	r2, r1
 800812e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008138:	2b00      	cmp	r3, #0
 800813a:	d01a      	beq.n	8008172 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	430a      	orrs	r2, r1
 8008150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008156:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800815a:	d10a      	bne.n	8008172 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	430a      	orrs	r2, r1
 8008170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	605a      	str	r2, [r3, #4]
  }
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b098      	sub	sp, #96	@ 0x60
 80081a4:	af02      	add	r7, sp, #8
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081b0:	f7fa fdb8 	bl	8002d24 <HAL_GetTick>
 80081b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0308 	and.w	r3, r3, #8
 80081c0:	2b08      	cmp	r3, #8
 80081c2:	d12e      	bne.n	8008222 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081cc:	2200      	movs	r2, #0
 80081ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f88c 	bl	80082f0 <UART_WaitOnFlagUntilTimeout>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d021      	beq.n	8008222 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e6:	e853 3f00 	ldrex	r3, [r3]
 80081ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	461a      	mov	r2, r3
 80081fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80081fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008200:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008204:	e841 2300 	strex	r3, r2, [r1]
 8008208:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800820a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1e6      	bne.n	80081de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2220      	movs	r2, #32
 8008214:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e062      	b.n	80082e8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0304 	and.w	r3, r3, #4
 800822c:	2b04      	cmp	r3, #4
 800822e:	d149      	bne.n	80082c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008230:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008238:	2200      	movs	r2, #0
 800823a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f856 	bl	80082f0 <UART_WaitOnFlagUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d03c      	beq.n	80082c4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008252:	e853 3f00 	ldrex	r3, [r3]
 8008256:	623b      	str	r3, [r7, #32]
   return(result);
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800825e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	461a      	mov	r2, r3
 8008266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008268:	633b      	str	r3, [r7, #48]	@ 0x30
 800826a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800826e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008270:	e841 2300 	strex	r3, r2, [r1]
 8008274:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1e6      	bne.n	800824a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	3308      	adds	r3, #8
 8008282:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	e853 3f00 	ldrex	r3, [r3]
 800828a:	60fb      	str	r3, [r7, #12]
   return(result);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f023 0301 	bic.w	r3, r3, #1
 8008292:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	3308      	adds	r3, #8
 800829a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800829c:	61fa      	str	r2, [r7, #28]
 800829e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a0:	69b9      	ldr	r1, [r7, #24]
 80082a2:	69fa      	ldr	r2, [r7, #28]
 80082a4:	e841 2300 	strex	r3, r2, [r1]
 80082a8:	617b      	str	r3, [r7, #20]
   return(result);
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1e5      	bne.n	800827c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2220      	movs	r2, #32
 80082b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e011      	b.n	80082e8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2220      	movs	r2, #32
 80082c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2220      	movs	r2, #32
 80082ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3758      	adds	r7, #88	@ 0x58
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	603b      	str	r3, [r7, #0]
 80082fc:	4613      	mov	r3, r2
 80082fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008300:	e04f      	b.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008308:	d04b      	beq.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800830a:	f7fa fd0b 	bl	8002d24 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	69ba      	ldr	r2, [r7, #24]
 8008316:	429a      	cmp	r2, r3
 8008318:	d302      	bcc.n	8008320 <UART_WaitOnFlagUntilTimeout+0x30>
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d101      	bne.n	8008324 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e04e      	b.n	80083c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0304 	and.w	r3, r3, #4
 800832e:	2b00      	cmp	r3, #0
 8008330:	d037      	beq.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	2b80      	cmp	r3, #128	@ 0x80
 8008336:	d034      	beq.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b40      	cmp	r3, #64	@ 0x40
 800833c:	d031      	beq.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	f003 0308 	and.w	r3, r3, #8
 8008348:	2b08      	cmp	r3, #8
 800834a:	d110      	bne.n	800836e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2208      	movs	r2, #8
 8008352:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 f8ff 	bl	8008558 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2208      	movs	r2, #8
 800835e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e029      	b.n	80083c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008378:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800837c:	d111      	bne.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008386:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 f8e5 	bl	8008558 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2220      	movs	r2, #32
 8008392:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e00f      	b.n	80083c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	69da      	ldr	r2, [r3, #28]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	4013      	ands	r3, r2
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	bf0c      	ite	eq
 80083b2:	2301      	moveq	r3, #1
 80083b4:	2300      	movne	r3, #0
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	461a      	mov	r2, r3
 80083ba:	79fb      	ldrb	r3, [r7, #7]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d0a0      	beq.n	8008302 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b097      	sub	sp, #92	@ 0x5c
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	4613      	mov	r3, r2
 80083d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	88fa      	ldrh	r2, [r7, #6]
 80083e4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	88fa      	ldrh	r2, [r7, #6]
 80083ec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083fe:	d10e      	bne.n	800841e <UART_Start_Receive_IT+0x52>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d105      	bne.n	8008414 <UART_Start_Receive_IT+0x48>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800840e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008412:	e02d      	b.n	8008470 <UART_Start_Receive_IT+0xa4>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	22ff      	movs	r2, #255	@ 0xff
 8008418:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800841c:	e028      	b.n	8008470 <UART_Start_Receive_IT+0xa4>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10d      	bne.n	8008442 <UART_Start_Receive_IT+0x76>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d104      	bne.n	8008438 <UART_Start_Receive_IT+0x6c>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	22ff      	movs	r2, #255	@ 0xff
 8008432:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008436:	e01b      	b.n	8008470 <UART_Start_Receive_IT+0xa4>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	227f      	movs	r2, #127	@ 0x7f
 800843c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008440:	e016      	b.n	8008470 <UART_Start_Receive_IT+0xa4>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800844a:	d10d      	bne.n	8008468 <UART_Start_Receive_IT+0x9c>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d104      	bne.n	800845e <UART_Start_Receive_IT+0x92>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	227f      	movs	r2, #127	@ 0x7f
 8008458:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800845c:	e008      	b.n	8008470 <UART_Start_Receive_IT+0xa4>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	223f      	movs	r2, #63	@ 0x3f
 8008462:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008466:	e003      	b.n	8008470 <UART_Start_Receive_IT+0xa4>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2222      	movs	r2, #34	@ 0x22
 800847c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3308      	adds	r3, #8
 8008486:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800848a:	e853 3f00 	ldrex	r3, [r3]
 800848e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008492:	f043 0301 	orr.w	r3, r3, #1
 8008496:	657b      	str	r3, [r7, #84]	@ 0x54
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3308      	adds	r3, #8
 800849e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80084a0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80084a2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80084a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084a8:	e841 2300 	strex	r3, r2, [r1]
 80084ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80084ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e5      	bne.n	8008480 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084bc:	d107      	bne.n	80084ce <UART_Start_Receive_IT+0x102>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d103      	bne.n	80084ce <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	4a21      	ldr	r2, [pc, #132]	@ (8008550 <UART_Start_Receive_IT+0x184>)
 80084ca:	669a      	str	r2, [r3, #104]	@ 0x68
 80084cc:	e002      	b.n	80084d4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	4a20      	ldr	r2, [pc, #128]	@ (8008554 <UART_Start_Receive_IT+0x188>)
 80084d2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d019      	beq.n	8008510 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e4:	e853 3f00 	ldrex	r3, [r3]
 80084e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ec:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80084f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80084fc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008500:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e6      	bne.n	80084dc <UART_Start_Receive_IT+0x110>
 800850e:	e018      	b.n	8008542 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	613b      	str	r3, [r7, #16]
   return(result);
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	f043 0320 	orr.w	r3, r3, #32
 8008524:	653b      	str	r3, [r7, #80]	@ 0x50
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800852e:	623b      	str	r3, [r7, #32]
 8008530:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	69f9      	ldr	r1, [r7, #28]
 8008534:	6a3a      	ldr	r2, [r7, #32]
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	61bb      	str	r3, [r7, #24]
   return(result);
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e6      	bne.n	8008510 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	375c      	adds	r7, #92	@ 0x5c
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	08008849 	.word	0x08008849
 8008554:	080086a1 	.word	0x080086a1

08008558 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008558:	b480      	push	{r7}
 800855a:	b095      	sub	sp, #84	@ 0x54
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800856e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800857e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008580:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008584:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800858c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e6      	bne.n	8008560 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3308      	adds	r3, #8
 8008598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	f023 0301 	bic.w	r3, r3, #1
 80085a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3308      	adds	r3, #8
 80085b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1e5      	bne.n	8008592 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d118      	bne.n	8008600 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	e853 3f00 	ldrex	r3, [r3]
 80085da:	60bb      	str	r3, [r7, #8]
   return(result);
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	f023 0310 	bic.w	r3, r3, #16
 80085e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	461a      	mov	r2, r3
 80085ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085ec:	61bb      	str	r3, [r7, #24]
 80085ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f0:	6979      	ldr	r1, [r7, #20]
 80085f2:	69ba      	ldr	r2, [r7, #24]
 80085f4:	e841 2300 	strex	r3, r2, [r1]
 80085f8:	613b      	str	r3, [r7, #16]
   return(result);
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e6      	bne.n	80085ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2220      	movs	r2, #32
 8008604:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008614:	bf00      	nop
 8008616:	3754      	adds	r7, #84	@ 0x54
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800862c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7ff fa88 	bl	8007b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008644:	bf00      	nop
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	e853 3f00 	ldrex	r3, [r3]
 8008660:	60bb      	str	r3, [r7, #8]
   return(result);
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008668:	61fb      	str	r3, [r7, #28]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	461a      	mov	r2, r3
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	61bb      	str	r3, [r7, #24]
 8008674:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008676:	6979      	ldr	r1, [r7, #20]
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	613b      	str	r3, [r7, #16]
   return(result);
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e6      	bne.n	8008654 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2220      	movs	r2, #32
 800868a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7ff fa54 	bl	8007b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008698:	bf00      	nop
 800869a:	3720      	adds	r7, #32
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b09c      	sub	sp, #112	@ 0x70
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80086ae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086b8:	2b22      	cmp	r3, #34	@ 0x22
 80086ba:	f040 80b9 	bne.w	8008830 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80086cc:	b2d9      	uxtb	r1, r3
 80086ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086d8:	400a      	ands	r2, r1
 80086da:	b2d2      	uxtb	r2, r2
 80086dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	3b01      	subs	r3, #1
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008700:	b29b      	uxth	r3, r3
 8008702:	2b00      	cmp	r3, #0
 8008704:	f040 809c 	bne.w	8008840 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008718:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800871c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008726:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008728:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800872c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008734:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e6      	bne.n	8008708 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3308      	adds	r3, #8
 8008740:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008744:	e853 3f00 	ldrex	r3, [r3]
 8008748:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800874a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800874c:	f023 0301 	bic.w	r3, r3, #1
 8008750:	667b      	str	r3, [r7, #100]	@ 0x64
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3308      	adds	r3, #8
 8008758:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800875a:	647a      	str	r2, [r7, #68]	@ 0x44
 800875c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008760:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e5      	bne.n	800873a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2220      	movs	r2, #32
 8008772:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d018      	beq.n	80087c2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	623b      	str	r3, [r7, #32]
   return(result);
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80087a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80087b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1e6      	bne.n	8008790 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d12e      	bne.n	8008828 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f023 0310 	bic.w	r3, r3, #16
 80087e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	461a      	mov	r2, r3
 80087ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087ee:	61fb      	str	r3, [r7, #28]
 80087f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f2:	69b9      	ldr	r1, [r7, #24]
 80087f4:	69fa      	ldr	r2, [r7, #28]
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	617b      	str	r3, [r7, #20]
   return(result);
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1e6      	bne.n	80087d0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	f003 0310 	and.w	r3, r3, #16
 800880c:	2b10      	cmp	r3, #16
 800880e:	d103      	bne.n	8008818 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2210      	movs	r2, #16
 8008816:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff f9a1 	bl	8007b68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008826:	e00b      	b.n	8008840 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7f8 fd8b 	bl	8001344 <HAL_UART_RxCpltCallback>
}
 800882e:	e007      	b.n	8008840 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	699a      	ldr	r2, [r3, #24]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f042 0208 	orr.w	r2, r2, #8
 800883e:	619a      	str	r2, [r3, #24]
}
 8008840:	bf00      	nop
 8008842:	3770      	adds	r7, #112	@ 0x70
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b09c      	sub	sp, #112	@ 0x70
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008856:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008860:	2b22      	cmp	r3, #34	@ 0x22
 8008862:	f040 80b9 	bne.w	80089d8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800886c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008874:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008876:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800887a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800887e:	4013      	ands	r3, r2
 8008880:	b29a      	uxth	r2, r3
 8008882:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008884:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800888a:	1c9a      	adds	r2, r3, #2
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008896:	b29b      	uxth	r3, r3
 8008898:	3b01      	subs	r3, #1
 800889a:	b29a      	uxth	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f040 809c 	bne.w	80089e8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088b8:	e853 3f00 	ldrex	r3, [r3]
 80088bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80088be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	461a      	mov	r2, r3
 80088cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80088d0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80088d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80088d6:	e841 2300 	strex	r3, r2, [r1]
 80088da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80088dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1e6      	bne.n	80088b0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3308      	adds	r3, #8
 80088e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ec:	e853 3f00 	ldrex	r3, [r3]
 80088f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	f023 0301 	bic.w	r3, r3, #1
 80088f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3308      	adds	r3, #8
 8008900:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008902:	643a      	str	r2, [r7, #64]	@ 0x40
 8008904:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008906:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008908:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800890a:	e841 2300 	strex	r3, r2, [r1]
 800890e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1e5      	bne.n	80088e2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2220      	movs	r2, #32
 800891a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d018      	beq.n	800896a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	e853 3f00 	ldrex	r3, [r3]
 8008944:	61fb      	str	r3, [r7, #28]
   return(result);
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800894c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008956:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008958:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800895c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800895e:	e841 2300 	strex	r3, r2, [r1]
 8008962:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1e6      	bne.n	8008938 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800896e:	2b01      	cmp	r3, #1
 8008970:	d12e      	bne.n	80089d0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	e853 3f00 	ldrex	r3, [r3]
 8008984:	60bb      	str	r3, [r7, #8]
   return(result);
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	f023 0310 	bic.w	r3, r3, #16
 800898c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	461a      	mov	r2, r3
 8008994:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008996:	61bb      	str	r3, [r7, #24]
 8008998:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899a:	6979      	ldr	r1, [r7, #20]
 800899c:	69ba      	ldr	r2, [r7, #24]
 800899e:	e841 2300 	strex	r3, r2, [r1]
 80089a2:	613b      	str	r3, [r7, #16]
   return(result);
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1e6      	bne.n	8008978 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	69db      	ldr	r3, [r3, #28]
 80089b0:	f003 0310 	and.w	r3, r3, #16
 80089b4:	2b10      	cmp	r3, #16
 80089b6:	d103      	bne.n	80089c0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2210      	movs	r2, #16
 80089be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7ff f8cd 	bl	8007b68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089ce:	e00b      	b.n	80089e8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7f8 fcb7 	bl	8001344 <HAL_UART_RxCpltCallback>
}
 80089d6:	e007      	b.n	80089e8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	699a      	ldr	r2, [r3, #24]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f042 0208 	orr.w	r2, r2, #8
 80089e6:	619a      	str	r2, [r3, #24]
}
 80089e8:	bf00      	nop
 80089ea:	3770      	adds	r7, #112	@ 0x70
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80089f4:	4904      	ldr	r1, [pc, #16]	@ (8008a08 <MX_FATFS_Init+0x18>)
 80089f6:	4805      	ldr	r0, [pc, #20]	@ (8008a0c <MX_FATFS_Init+0x1c>)
 80089f8:	f002 fee8 	bl	800b7cc <FATFS_LinkDriver>
 80089fc:	4603      	mov	r3, r0
 80089fe:	461a      	mov	r2, r3
 8008a00:	4b03      	ldr	r3, [pc, #12]	@ (8008a10 <MX_FATFS_Init+0x20>)
 8008a02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008a04:	bf00      	nop
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	20000978 	.word	0x20000978
 8008a0c:	2000000c 	.word	0x2000000c
 8008a10:	20000974 	.word	0x20000974

08008a14 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008a14:	b480      	push	{r7}
 8008a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008a18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8008a2e:	79fb      	ldrb	r3, [r7, #7]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 f9d3 	bl	8008ddc <USER_SPI_initialize>
 8008a36:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	4603      	mov	r3, r0
 8008a48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 fab1 	bl	8008fb4 <USER_SPI_status>
 8008a52:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60b9      	str	r1, [r7, #8]
 8008a64:	607a      	str	r2, [r7, #4]
 8008a66:	603b      	str	r3, [r7, #0]
 8008a68:	4603      	mov	r3, r0
 8008a6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8008a6c:	7bf8      	ldrb	r0, [r7, #15]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	68b9      	ldr	r1, [r7, #8]
 8008a74:	f000 fab4 	bl	8008fe0 <USER_SPI_read>
 8008a78:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
 8008a8c:	603b      	str	r3, [r7, #0]
 8008a8e:	4603      	mov	r3, r0
 8008a90:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8008a92:	7bf8      	ldrb	r0, [r7, #15]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	68b9      	ldr	r1, [r7, #8]
 8008a9a:	f000 fb07 	bl	80090ac <USER_SPI_write>
 8008a9e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	603a      	str	r2, [r7, #0]
 8008ab2:	71fb      	strb	r3, [r7, #7]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8008ab8:	79b9      	ldrb	r1, [r7, #6]
 8008aba:	79fb      	ldrb	r3, [r7, #7]
 8008abc:	683a      	ldr	r2, [r7, #0]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 fb70 	bl	80091a4 <USER_SPI_ioctl>
 8008ac4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
	...

08008ad0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008ad8:	f7fa f924 	bl	8002d24 <HAL_GetTick>
 8008adc:	4603      	mov	r3, r0
 8008ade:	4a04      	ldr	r2, [pc, #16]	@ (8008af0 <SPI_Timer_On+0x20>)
 8008ae0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8008ae2:	4a04      	ldr	r2, [pc, #16]	@ (8008af4 <SPI_Timer_On+0x24>)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6013      	str	r3, [r2, #0]
}
 8008ae8:	bf00      	nop
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	20000980 	.word	0x20000980
 8008af4:	20000984 	.word	0x20000984

08008af8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8008af8:	b580      	push	{r7, lr}
 8008afa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8008afc:	f7fa f912 	bl	8002d24 <HAL_GetTick>
 8008b00:	4602      	mov	r2, r0
 8008b02:	4b06      	ldr	r3, [pc, #24]	@ (8008b1c <SPI_Timer_Status+0x24>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	1ad2      	subs	r2, r2, r3
 8008b08:	4b05      	ldr	r3, [pc, #20]	@ (8008b20 <SPI_Timer_Status+0x28>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	bf34      	ite	cc
 8008b10:	2301      	movcc	r3, #1
 8008b12:	2300      	movcs	r3, #0
 8008b14:	b2db      	uxtb	r3, r3
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20000980 	.word	0x20000980
 8008b20:	20000984 	.word	0x20000984

08008b24 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af02      	add	r7, sp, #8
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008b2e:	f107 020f 	add.w	r2, r7, #15
 8008b32:	1df9      	adds	r1, r7, #7
 8008b34:	2332      	movs	r3, #50	@ 0x32
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	2301      	movs	r3, #1
 8008b3a:	4804      	ldr	r0, [pc, #16]	@ (8008b4c <xchg_spi+0x28>)
 8008b3c:	f7fc fe22 	bl	8005784 <HAL_SPI_TransmitReceive>
    return rxDat;
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	200006f8 	.word	0x200006f8

08008b50 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008b50:	b590      	push	{r4, r7, lr}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60fb      	str	r3, [r7, #12]
 8008b5e:	e00a      	b.n	8008b76 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	18d4      	adds	r4, r2, r3
 8008b66:	20ff      	movs	r0, #255	@ 0xff
 8008b68:	f7ff ffdc 	bl	8008b24 <xchg_spi>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	3301      	adds	r3, #1
 8008b74:	60fb      	str	r3, [r7, #12]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d3f0      	bcc.n	8008b60 <rcvr_spi_multi+0x10>
	}
}
 8008b7e:	bf00      	nop
 8008b80:	bf00      	nop
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd90      	pop	{r4, r7, pc}

08008b88 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b9a:	6879      	ldr	r1, [r7, #4]
 8008b9c:	4803      	ldr	r0, [pc, #12]	@ (8008bac <xmit_spi_multi+0x24>)
 8008b9e:	f7fc fc7c 	bl	800549a <HAL_SPI_Transmit>
}
 8008ba2:	bf00      	nop
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	200006f8 	.word	0x200006f8

08008bb0 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008bb8:	f7fa f8b4 	bl	8002d24 <HAL_GetTick>
 8008bbc:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008bc2:	20ff      	movs	r0, #255	@ 0xff
 8008bc4:	f7ff ffae 	bl	8008b24 <xchg_spi>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
 8008bce:	2bff      	cmp	r3, #255	@ 0xff
 8008bd0:	d007      	beq.n	8008be2 <wait_ready+0x32>
 8008bd2:	f7fa f8a7 	bl	8002d24 <HAL_GetTick>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d8ef      	bhi.n	8008bc2 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
 8008be4:	2bff      	cmp	r3, #255	@ 0xff
 8008be6:	bf0c      	ite	eq
 8008be8:	2301      	moveq	r3, #1
 8008bea:	2300      	movne	r3, #0
 8008bec:	b2db      	uxtb	r3, r3
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
	...

08008bf8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	2102      	movs	r1, #2
 8008c00:	4803      	ldr	r0, [pc, #12]	@ (8008c10 <despiselect+0x18>)
 8008c02:	f7fa fbbb 	bl	800337c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008c06:	20ff      	movs	r0, #255	@ 0xff
 8008c08:	f7ff ff8c 	bl	8008b24 <xchg_spi>

}
 8008c0c:	bf00      	nop
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	40020400 	.word	0x40020400

08008c14 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008c18:	2200      	movs	r2, #0
 8008c1a:	2102      	movs	r1, #2
 8008c1c:	4809      	ldr	r0, [pc, #36]	@ (8008c44 <spiselect+0x30>)
 8008c1e:	f7fa fbad 	bl	800337c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008c22:	20ff      	movs	r0, #255	@ 0xff
 8008c24:	f7ff ff7e 	bl	8008b24 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008c28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008c2c:	f7ff ffc0 	bl	8008bb0 <wait_ready>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <spiselect+0x26>
 8008c36:	2301      	movs	r3, #1
 8008c38:	e002      	b.n	8008c40 <spiselect+0x2c>

	despiselect();
 8008c3a:	f7ff ffdd 	bl	8008bf8 <despiselect>
	return 0;	/* Timeout */
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	40020400 	.word	0x40020400

08008c48 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008c52:	20c8      	movs	r0, #200	@ 0xc8
 8008c54:	f7ff ff3c 	bl	8008ad0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008c58:	20ff      	movs	r0, #255	@ 0xff
 8008c5a:	f7ff ff63 	bl	8008b24 <xchg_spi>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
 8008c64:	2bff      	cmp	r3, #255	@ 0xff
 8008c66:	d104      	bne.n	8008c72 <rcvr_datablock+0x2a>
 8008c68:	f7ff ff46 	bl	8008af8 <SPI_Timer_Status>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1f2      	bne.n	8008c58 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
 8008c74:	2bfe      	cmp	r3, #254	@ 0xfe
 8008c76:	d001      	beq.n	8008c7c <rcvr_datablock+0x34>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	e00a      	b.n	8008c92 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7ff ff66 	bl	8008b50 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008c84:	20ff      	movs	r0, #255	@ 0xff
 8008c86:	f7ff ff4d 	bl	8008b24 <xchg_spi>
 8008c8a:	20ff      	movs	r0, #255	@ 0xff
 8008c8c:	f7ff ff4a 	bl	8008b24 <xchg_spi>

	return 1;						/* Function succeeded */
 8008c90:	2301      	movs	r3, #1
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008ca6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008caa:	f7ff ff81 	bl	8008bb0 <wait_ready>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d101      	bne.n	8008cb8 <xmit_datablock+0x1e>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	e01e      	b.n	8008cf6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8008cb8:	78fb      	ldrb	r3, [r7, #3]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7ff ff32 	bl	8008b24 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008cc0:	78fb      	ldrb	r3, [r7, #3]
 8008cc2:	2bfd      	cmp	r3, #253	@ 0xfd
 8008cc4:	d016      	beq.n	8008cf4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8008cc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff ff5c 	bl	8008b88 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008cd0:	20ff      	movs	r0, #255	@ 0xff
 8008cd2:	f7ff ff27 	bl	8008b24 <xchg_spi>
 8008cd6:	20ff      	movs	r0, #255	@ 0xff
 8008cd8:	f7ff ff24 	bl	8008b24 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008cdc:	20ff      	movs	r0, #255	@ 0xff
 8008cde:	f7ff ff21 	bl	8008b24 <xchg_spi>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008ce6:	7bfb      	ldrb	r3, [r7, #15]
 8008ce8:	f003 031f 	and.w	r3, r3, #31
 8008cec:	2b05      	cmp	r3, #5
 8008cee:	d001      	beq.n	8008cf4 <xmit_datablock+0x5a>
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	e000      	b.n	8008cf6 <xmit_datablock+0x5c>
	}
	return 1;
 8008cf4:	2301      	movs	r3, #1
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	4603      	mov	r3, r0
 8008d06:	6039      	str	r1, [r7, #0]
 8008d08:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8008d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	da0e      	bge.n	8008d30 <send_cmd+0x32>
		cmd &= 0x7F;
 8008d12:	79fb      	ldrb	r3, [r7, #7]
 8008d14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d18:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	2037      	movs	r0, #55	@ 0x37
 8008d1e:	f7ff ffee 	bl	8008cfe <send_cmd>
 8008d22:	4603      	mov	r3, r0
 8008d24:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8008d26:	7bbb      	ldrb	r3, [r7, #14]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d901      	bls.n	8008d30 <send_cmd+0x32>
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
 8008d2e:	e051      	b.n	8008dd4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008d30:	79fb      	ldrb	r3, [r7, #7]
 8008d32:	2b0c      	cmp	r3, #12
 8008d34:	d008      	beq.n	8008d48 <send_cmd+0x4a>
		despiselect();
 8008d36:	f7ff ff5f 	bl	8008bf8 <despiselect>
		if (!spiselect()) return 0xFF;
 8008d3a:	f7ff ff6b 	bl	8008c14 <spiselect>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d101      	bne.n	8008d48 <send_cmd+0x4a>
 8008d44:	23ff      	movs	r3, #255	@ 0xff
 8008d46:	e045      	b.n	8008dd4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8008d48:	79fb      	ldrb	r3, [r7, #7]
 8008d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7ff fee7 	bl	8008b24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	0e1b      	lsrs	r3, r3, #24
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7ff fee1 	bl	8008b24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	0c1b      	lsrs	r3, r3, #16
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7ff fedb 	bl	8008b24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	0a1b      	lsrs	r3, r3, #8
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7ff fed5 	bl	8008b24 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7ff fed0 	bl	8008b24 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8008d84:	2301      	movs	r3, #1
 8008d86:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8008d88:	79fb      	ldrb	r3, [r7, #7]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <send_cmd+0x94>
 8008d8e:	2395      	movs	r3, #149	@ 0x95
 8008d90:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8008d92:	79fb      	ldrb	r3, [r7, #7]
 8008d94:	2b08      	cmp	r3, #8
 8008d96:	d101      	bne.n	8008d9c <send_cmd+0x9e>
 8008d98:	2387      	movs	r3, #135	@ 0x87
 8008d9a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7ff fec0 	bl	8008b24 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8008da4:	79fb      	ldrb	r3, [r7, #7]
 8008da6:	2b0c      	cmp	r3, #12
 8008da8:	d102      	bne.n	8008db0 <send_cmd+0xb2>
 8008daa:	20ff      	movs	r0, #255	@ 0xff
 8008dac:	f7ff feba 	bl	8008b24 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8008db0:	230a      	movs	r3, #10
 8008db2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8008db4:	20ff      	movs	r0, #255	@ 0xff
 8008db6:	f7ff feb5 	bl	8008b24 <xchg_spi>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8008dbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	da05      	bge.n	8008dd2 <send_cmd+0xd4>
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	73fb      	strb	r3, [r7, #15]
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1f0      	bne.n	8008db4 <send_cmd+0xb6>

	return res;							/* Return received response */
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008ddc:	b590      	push	{r4, r7, lr}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8008de6:	79fb      	ldrb	r3, [r7, #7]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <USER_SPI_initialize+0x14>
 8008dec:	2301      	movs	r3, #1
 8008dee:	e0d6      	b.n	8008f9e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8008df0:	4b6d      	ldr	r3, [pc, #436]	@ (8008fa8 <USER_SPI_initialize+0x1cc>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d003      	beq.n	8008e06 <USER_SPI_initialize+0x2a>
 8008dfe:	4b6a      	ldr	r3, [pc, #424]	@ (8008fa8 <USER_SPI_initialize+0x1cc>)
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	e0cb      	b.n	8008f9e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8008e06:	4b69      	ldr	r3, [pc, #420]	@ (8008fac <USER_SPI_initialize+0x1d0>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8008e10:	4b66      	ldr	r3, [pc, #408]	@ (8008fac <USER_SPI_initialize+0x1d0>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8008e18:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8008e1a:	230a      	movs	r3, #10
 8008e1c:	73fb      	strb	r3, [r7, #15]
 8008e1e:	e005      	b.n	8008e2c <USER_SPI_initialize+0x50>
 8008e20:	20ff      	movs	r0, #255	@ 0xff
 8008e22:	f7ff fe7f 	bl	8008b24 <xchg_spi>
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	73fb      	strb	r3, [r7, #15]
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1f6      	bne.n	8008e20 <USER_SPI_initialize+0x44>

	ty = 0;
 8008e32:	2300      	movs	r3, #0
 8008e34:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8008e36:	2100      	movs	r1, #0
 8008e38:	2000      	movs	r0, #0
 8008e3a:	f7ff ff60 	bl	8008cfe <send_cmd>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	f040 808b 	bne.w	8008f5c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8008e46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008e4a:	f7ff fe41 	bl	8008ad0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8008e4e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8008e52:	2008      	movs	r0, #8
 8008e54:	f7ff ff53 	bl	8008cfe <send_cmd>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d151      	bne.n	8008f02 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]
 8008e62:	e00d      	b.n	8008e80 <USER_SPI_initialize+0xa4>
 8008e64:	7bfc      	ldrb	r4, [r7, #15]
 8008e66:	20ff      	movs	r0, #255	@ 0xff
 8008e68:	f7ff fe5c 	bl	8008b24 <xchg_spi>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	461a      	mov	r2, r3
 8008e70:	f104 0310 	add.w	r3, r4, #16
 8008e74:	443b      	add	r3, r7
 8008e76:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	73fb      	strb	r3, [r7, #15]
 8008e80:	7bfb      	ldrb	r3, [r7, #15]
 8008e82:	2b03      	cmp	r3, #3
 8008e84:	d9ee      	bls.n	8008e64 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8008e86:	7abb      	ldrb	r3, [r7, #10]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d167      	bne.n	8008f5c <USER_SPI_initialize+0x180>
 8008e8c:	7afb      	ldrb	r3, [r7, #11]
 8008e8e:	2baa      	cmp	r3, #170	@ 0xaa
 8008e90:	d164      	bne.n	8008f5c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8008e92:	bf00      	nop
 8008e94:	f7ff fe30 	bl	8008af8 <SPI_Timer_Status>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d007      	beq.n	8008eae <USER_SPI_initialize+0xd2>
 8008e9e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008ea2:	20a9      	movs	r0, #169	@ 0xa9
 8008ea4:	f7ff ff2b 	bl	8008cfe <send_cmd>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1f2      	bne.n	8008e94 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8008eae:	f7ff fe23 	bl	8008af8 <SPI_Timer_Status>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d051      	beq.n	8008f5c <USER_SPI_initialize+0x180>
 8008eb8:	2100      	movs	r1, #0
 8008eba:	203a      	movs	r0, #58	@ 0x3a
 8008ebc:	f7ff ff1f 	bl	8008cfe <send_cmd>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d14a      	bne.n	8008f5c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]
 8008eca:	e00d      	b.n	8008ee8 <USER_SPI_initialize+0x10c>
 8008ecc:	7bfc      	ldrb	r4, [r7, #15]
 8008ece:	20ff      	movs	r0, #255	@ 0xff
 8008ed0:	f7ff fe28 	bl	8008b24 <xchg_spi>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	f104 0310 	add.w	r3, r4, #16
 8008edc:	443b      	add	r3, r7
 8008ede:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	73fb      	strb	r3, [r7, #15]
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	d9ee      	bls.n	8008ecc <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8008eee:	7a3b      	ldrb	r3, [r7, #8]
 8008ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <USER_SPI_initialize+0x120>
 8008ef8:	230c      	movs	r3, #12
 8008efa:	e000      	b.n	8008efe <USER_SPI_initialize+0x122>
 8008efc:	2304      	movs	r3, #4
 8008efe:	737b      	strb	r3, [r7, #13]
 8008f00:	e02c      	b.n	8008f5c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8008f02:	2100      	movs	r1, #0
 8008f04:	20a9      	movs	r0, #169	@ 0xa9
 8008f06:	f7ff fefa 	bl	8008cfe <send_cmd>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d804      	bhi.n	8008f1a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8008f10:	2302      	movs	r3, #2
 8008f12:	737b      	strb	r3, [r7, #13]
 8008f14:	23a9      	movs	r3, #169	@ 0xa9
 8008f16:	73bb      	strb	r3, [r7, #14]
 8008f18:	e003      	b.n	8008f22 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	737b      	strb	r3, [r7, #13]
 8008f1e:	2301      	movs	r3, #1
 8008f20:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8008f22:	bf00      	nop
 8008f24:	f7ff fde8 	bl	8008af8 <SPI_Timer_Status>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d007      	beq.n	8008f3e <USER_SPI_initialize+0x162>
 8008f2e:	7bbb      	ldrb	r3, [r7, #14]
 8008f30:	2100      	movs	r1, #0
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7ff fee3 	bl	8008cfe <send_cmd>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1f2      	bne.n	8008f24 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8008f3e:	f7ff fddb 	bl	8008af8 <SPI_Timer_Status>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d007      	beq.n	8008f58 <USER_SPI_initialize+0x17c>
 8008f48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f4c:	2010      	movs	r0, #16
 8008f4e:	f7ff fed6 	bl	8008cfe <send_cmd>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <USER_SPI_initialize+0x180>
				ty = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8008f5c:	4a14      	ldr	r2, [pc, #80]	@ (8008fb0 <USER_SPI_initialize+0x1d4>)
 8008f5e:	7b7b      	ldrb	r3, [r7, #13]
 8008f60:	7013      	strb	r3, [r2, #0]
	despiselect();
 8008f62:	f7ff fe49 	bl	8008bf8 <despiselect>

	if (ty) {			/* OK */
 8008f66:	7b7b      	ldrb	r3, [r7, #13]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d012      	beq.n	8008f92 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8008f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8008fac <USER_SPI_initialize+0x1d0>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8008f76:	4b0d      	ldr	r3, [pc, #52]	@ (8008fac <USER_SPI_initialize+0x1d0>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f042 0210 	orr.w	r2, r2, #16
 8008f7e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8008f80:	4b09      	ldr	r3, [pc, #36]	@ (8008fa8 <USER_SPI_initialize+0x1cc>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	f023 0301 	bic.w	r3, r3, #1
 8008f8a:	b2da      	uxtb	r2, r3
 8008f8c:	4b06      	ldr	r3, [pc, #24]	@ (8008fa8 <USER_SPI_initialize+0x1cc>)
 8008f8e:	701a      	strb	r2, [r3, #0]
 8008f90:	e002      	b.n	8008f98 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8008f92:	4b05      	ldr	r3, [pc, #20]	@ (8008fa8 <USER_SPI_initialize+0x1cc>)
 8008f94:	2201      	movs	r2, #1
 8008f96:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8008f98:	4b03      	ldr	r3, [pc, #12]	@ (8008fa8 <USER_SPI_initialize+0x1cc>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	b2db      	uxtb	r3, r3
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd90      	pop	{r4, r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20000020 	.word	0x20000020
 8008fac:	200006f8 	.word	0x200006f8
 8008fb0:	2000097c 	.word	0x2000097c

08008fb4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8008fbe:	79fb      	ldrb	r3, [r7, #7]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <USER_SPI_status+0x14>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e002      	b.n	8008fce <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8008fc8:	4b04      	ldr	r3, [pc, #16]	@ (8008fdc <USER_SPI_status+0x28>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	b2db      	uxtb	r3, r3
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	20000020 	.word	0x20000020

08008fe0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60b9      	str	r1, [r7, #8]
 8008fe8:	607a      	str	r2, [r7, #4]
 8008fea:	603b      	str	r3, [r7, #0]
 8008fec:	4603      	mov	r3, r0
 8008fee:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d102      	bne.n	8008ffc <USER_SPI_read+0x1c>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d101      	bne.n	8009000 <USER_SPI_read+0x20>
 8008ffc:	2304      	movs	r3, #4
 8008ffe:	e04d      	b.n	800909c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009000:	4b28      	ldr	r3, [pc, #160]	@ (80090a4 <USER_SPI_read+0xc4>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	b2db      	uxtb	r3, r3
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <USER_SPI_read+0x32>
 800900e:	2303      	movs	r3, #3
 8009010:	e044      	b.n	800909c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8009012:	4b25      	ldr	r3, [pc, #148]	@ (80090a8 <USER_SPI_read+0xc8>)
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	f003 0308 	and.w	r3, r3, #8
 800901a:	2b00      	cmp	r3, #0
 800901c:	d102      	bne.n	8009024 <USER_SPI_read+0x44>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	025b      	lsls	r3, r3, #9
 8009022:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d111      	bne.n	800904e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800902a:	6879      	ldr	r1, [r7, #4]
 800902c:	2011      	movs	r0, #17
 800902e:	f7ff fe66 	bl	8008cfe <send_cmd>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d129      	bne.n	800908c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8009038:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800903c:	68b8      	ldr	r0, [r7, #8]
 800903e:	f7ff fe03 	bl	8008c48 <rcvr_datablock>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d021      	beq.n	800908c <USER_SPI_read+0xac>
			count = 0;
 8009048:	2300      	movs	r3, #0
 800904a:	603b      	str	r3, [r7, #0]
 800904c:	e01e      	b.n	800908c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800904e:	6879      	ldr	r1, [r7, #4]
 8009050:	2012      	movs	r0, #18
 8009052:	f7ff fe54 	bl	8008cfe <send_cmd>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d117      	bne.n	800908c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800905c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009060:	68b8      	ldr	r0, [r7, #8]
 8009062:	f7ff fdf1 	bl	8008c48 <rcvr_datablock>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00a      	beq.n	8009082 <USER_SPI_read+0xa2>
				buff += 512;
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009072:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	3b01      	subs	r3, #1
 8009078:	603b      	str	r3, [r7, #0]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1ed      	bne.n	800905c <USER_SPI_read+0x7c>
 8009080:	e000      	b.n	8009084 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8009082:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009084:	2100      	movs	r1, #0
 8009086:	200c      	movs	r0, #12
 8009088:	f7ff fe39 	bl	8008cfe <send_cmd>
		}
	}
	despiselect();
 800908c:	f7ff fdb4 	bl	8008bf8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	bf14      	ite	ne
 8009096:	2301      	movne	r3, #1
 8009098:	2300      	moveq	r3, #0
 800909a:	b2db      	uxtb	r3, r3
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	20000020 	.word	0x20000020
 80090a8:	2000097c 	.word	0x2000097c

080090ac <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	607a      	str	r2, [r7, #4]
 80090b6:	603b      	str	r3, [r7, #0]
 80090b8:	4603      	mov	r3, r0
 80090ba:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d102      	bne.n	80090c8 <USER_SPI_write+0x1c>
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d101      	bne.n	80090cc <USER_SPI_write+0x20>
 80090c8:	2304      	movs	r3, #4
 80090ca:	e063      	b.n	8009194 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80090cc:	4b33      	ldr	r3, [pc, #204]	@ (800919c <USER_SPI_write+0xf0>)
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	f003 0301 	and.w	r3, r3, #1
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <USER_SPI_write+0x32>
 80090da:	2303      	movs	r3, #3
 80090dc:	e05a      	b.n	8009194 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80090de:	4b2f      	ldr	r3, [pc, #188]	@ (800919c <USER_SPI_write+0xf0>)
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	f003 0304 	and.w	r3, r3, #4
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d001      	beq.n	80090f0 <USER_SPI_write+0x44>
 80090ec:	2302      	movs	r3, #2
 80090ee:	e051      	b.n	8009194 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80090f0:	4b2b      	ldr	r3, [pc, #172]	@ (80091a0 <USER_SPI_write+0xf4>)
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	f003 0308 	and.w	r3, r3, #8
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d102      	bne.n	8009102 <USER_SPI_write+0x56>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	025b      	lsls	r3, r3, #9
 8009100:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d110      	bne.n	800912a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009108:	6879      	ldr	r1, [r7, #4]
 800910a:	2018      	movs	r0, #24
 800910c:	f7ff fdf7 	bl	8008cfe <send_cmd>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d136      	bne.n	8009184 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8009116:	21fe      	movs	r1, #254	@ 0xfe
 8009118:	68b8      	ldr	r0, [r7, #8]
 800911a:	f7ff fdbe 	bl	8008c9a <xmit_datablock>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d02f      	beq.n	8009184 <USER_SPI_write+0xd8>
			count = 0;
 8009124:	2300      	movs	r3, #0
 8009126:	603b      	str	r3, [r7, #0]
 8009128:	e02c      	b.n	8009184 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800912a:	4b1d      	ldr	r3, [pc, #116]	@ (80091a0 <USER_SPI_write+0xf4>)
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	f003 0306 	and.w	r3, r3, #6
 8009132:	2b00      	cmp	r3, #0
 8009134:	d003      	beq.n	800913e <USER_SPI_write+0x92>
 8009136:	6839      	ldr	r1, [r7, #0]
 8009138:	2097      	movs	r0, #151	@ 0x97
 800913a:	f7ff fde0 	bl	8008cfe <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800913e:	6879      	ldr	r1, [r7, #4]
 8009140:	2019      	movs	r0, #25
 8009142:	f7ff fddc 	bl	8008cfe <send_cmd>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d11b      	bne.n	8009184 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800914c:	21fc      	movs	r1, #252	@ 0xfc
 800914e:	68b8      	ldr	r0, [r7, #8]
 8009150:	f7ff fda3 	bl	8008c9a <xmit_datablock>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00a      	beq.n	8009170 <USER_SPI_write+0xc4>
				buff += 512;
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009160:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	3b01      	subs	r3, #1
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1ee      	bne.n	800914c <USER_SPI_write+0xa0>
 800916e:	e000      	b.n	8009172 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009170:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009172:	21fd      	movs	r1, #253	@ 0xfd
 8009174:	2000      	movs	r0, #0
 8009176:	f7ff fd90 	bl	8008c9a <xmit_datablock>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <USER_SPI_write+0xd8>
 8009180:	2301      	movs	r3, #1
 8009182:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009184:	f7ff fd38 	bl	8008bf8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	bf14      	ite	ne
 800918e:	2301      	movne	r3, #1
 8009190:	2300      	moveq	r3, #0
 8009192:	b2db      	uxtb	r3, r3
}
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	20000020 	.word	0x20000020
 80091a0:	2000097c 	.word	0x2000097c

080091a4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08c      	sub	sp, #48	@ 0x30
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	603a      	str	r2, [r7, #0]
 80091ae:	71fb      	strb	r3, [r7, #7]
 80091b0:	460b      	mov	r3, r1
 80091b2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80091b4:	79fb      	ldrb	r3, [r7, #7]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <USER_SPI_ioctl+0x1a>
 80091ba:	2304      	movs	r3, #4
 80091bc:	e15a      	b.n	8009474 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80091be:	4baf      	ldr	r3, [pc, #700]	@ (800947c <USER_SPI_ioctl+0x2d8>)
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d001      	beq.n	80091d0 <USER_SPI_ioctl+0x2c>
 80091cc:	2303      	movs	r3, #3
 80091ce:	e151      	b.n	8009474 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80091d6:	79bb      	ldrb	r3, [r7, #6]
 80091d8:	2b04      	cmp	r3, #4
 80091da:	f200 8136 	bhi.w	800944a <USER_SPI_ioctl+0x2a6>
 80091de:	a201      	add	r2, pc, #4	@ (adr r2, 80091e4 <USER_SPI_ioctl+0x40>)
 80091e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e4:	080091f9 	.word	0x080091f9
 80091e8:	0800920d 	.word	0x0800920d
 80091ec:	0800944b 	.word	0x0800944b
 80091f0:	080092b9 	.word	0x080092b9
 80091f4:	080093af 	.word	0x080093af
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80091f8:	f7ff fd0c 	bl	8008c14 <spiselect>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f000 8127 	beq.w	8009452 <USER_SPI_ioctl+0x2ae>
 8009204:	2300      	movs	r3, #0
 8009206:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800920a:	e122      	b.n	8009452 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800920c:	2100      	movs	r1, #0
 800920e:	2009      	movs	r0, #9
 8009210:	f7ff fd75 	bl	8008cfe <send_cmd>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	f040 811d 	bne.w	8009456 <USER_SPI_ioctl+0x2b2>
 800921c:	f107 030c 	add.w	r3, r7, #12
 8009220:	2110      	movs	r1, #16
 8009222:	4618      	mov	r0, r3
 8009224:	f7ff fd10 	bl	8008c48 <rcvr_datablock>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	f000 8113 	beq.w	8009456 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009230:	7b3b      	ldrb	r3, [r7, #12]
 8009232:	099b      	lsrs	r3, r3, #6
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b01      	cmp	r3, #1
 8009238:	d111      	bne.n	800925e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800923a:	7d7b      	ldrb	r3, [r7, #21]
 800923c:	461a      	mov	r2, r3
 800923e:	7d3b      	ldrb	r3, [r7, #20]
 8009240:	021b      	lsls	r3, r3, #8
 8009242:	4413      	add	r3, r2
 8009244:	461a      	mov	r2, r3
 8009246:	7cfb      	ldrb	r3, [r7, #19]
 8009248:	041b      	lsls	r3, r3, #16
 800924a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800924e:	4413      	add	r3, r2
 8009250:	3301      	adds	r3, #1
 8009252:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	029a      	lsls	r2, r3, #10
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	601a      	str	r2, [r3, #0]
 800925c:	e028      	b.n	80092b0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800925e:	7c7b      	ldrb	r3, [r7, #17]
 8009260:	f003 030f 	and.w	r3, r3, #15
 8009264:	b2da      	uxtb	r2, r3
 8009266:	7dbb      	ldrb	r3, [r7, #22]
 8009268:	09db      	lsrs	r3, r3, #7
 800926a:	b2db      	uxtb	r3, r3
 800926c:	4413      	add	r3, r2
 800926e:	b2da      	uxtb	r2, r3
 8009270:	7d7b      	ldrb	r3, [r7, #21]
 8009272:	005b      	lsls	r3, r3, #1
 8009274:	b2db      	uxtb	r3, r3
 8009276:	f003 0306 	and.w	r3, r3, #6
 800927a:	b2db      	uxtb	r3, r3
 800927c:	4413      	add	r3, r2
 800927e:	b2db      	uxtb	r3, r3
 8009280:	3302      	adds	r3, #2
 8009282:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8009286:	7d3b      	ldrb	r3, [r7, #20]
 8009288:	099b      	lsrs	r3, r3, #6
 800928a:	b2db      	uxtb	r3, r3
 800928c:	461a      	mov	r2, r3
 800928e:	7cfb      	ldrb	r3, [r7, #19]
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	441a      	add	r2, r3
 8009294:	7cbb      	ldrb	r3, [r7, #18]
 8009296:	029b      	lsls	r3, r3, #10
 8009298:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800929c:	4413      	add	r3, r2
 800929e:	3301      	adds	r3, #1
 80092a0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80092a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80092a6:	3b09      	subs	r3, #9
 80092a8:	69fa      	ldr	r2, [r7, #28]
 80092aa:	409a      	lsls	r2, r3
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80092b6:	e0ce      	b.n	8009456 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80092b8:	4b71      	ldr	r3, [pc, #452]	@ (8009480 <USER_SPI_ioctl+0x2dc>)
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	f003 0304 	and.w	r3, r3, #4
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d031      	beq.n	8009328 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80092c4:	2100      	movs	r1, #0
 80092c6:	208d      	movs	r0, #141	@ 0x8d
 80092c8:	f7ff fd19 	bl	8008cfe <send_cmd>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f040 80c3 	bne.w	800945a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80092d4:	20ff      	movs	r0, #255	@ 0xff
 80092d6:	f7ff fc25 	bl	8008b24 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80092da:	f107 030c 	add.w	r3, r7, #12
 80092de:	2110      	movs	r1, #16
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7ff fcb1 	bl	8008c48 <rcvr_datablock>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 80b6 	beq.w	800945a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80092ee:	2330      	movs	r3, #48	@ 0x30
 80092f0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80092f4:	e007      	b.n	8009306 <USER_SPI_ioctl+0x162>
 80092f6:	20ff      	movs	r0, #255	@ 0xff
 80092f8:	f7ff fc14 	bl	8008b24 <xchg_spi>
 80092fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009300:	3b01      	subs	r3, #1
 8009302:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8009306:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1f3      	bne.n	80092f6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800930e:	7dbb      	ldrb	r3, [r7, #22]
 8009310:	091b      	lsrs	r3, r3, #4
 8009312:	b2db      	uxtb	r3, r3
 8009314:	461a      	mov	r2, r3
 8009316:	2310      	movs	r3, #16
 8009318:	fa03 f202 	lsl.w	r2, r3, r2
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009326:	e098      	b.n	800945a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009328:	2100      	movs	r1, #0
 800932a:	2009      	movs	r0, #9
 800932c:	f7ff fce7 	bl	8008cfe <send_cmd>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	f040 8091 	bne.w	800945a <USER_SPI_ioctl+0x2b6>
 8009338:	f107 030c 	add.w	r3, r7, #12
 800933c:	2110      	movs	r1, #16
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff fc82 	bl	8008c48 <rcvr_datablock>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	f000 8087 	beq.w	800945a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800934c:	4b4c      	ldr	r3, [pc, #304]	@ (8009480 <USER_SPI_ioctl+0x2dc>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	f003 0302 	and.w	r3, r3, #2
 8009354:	2b00      	cmp	r3, #0
 8009356:	d012      	beq.n	800937e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009358:	7dbb      	ldrb	r3, [r7, #22]
 800935a:	005b      	lsls	r3, r3, #1
 800935c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8009360:	7dfa      	ldrb	r2, [r7, #23]
 8009362:	09d2      	lsrs	r2, r2, #7
 8009364:	b2d2      	uxtb	r2, r2
 8009366:	4413      	add	r3, r2
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	7e7b      	ldrb	r3, [r7, #25]
 800936c:	099b      	lsrs	r3, r3, #6
 800936e:	b2db      	uxtb	r3, r3
 8009370:	3b01      	subs	r3, #1
 8009372:	fa02 f303 	lsl.w	r3, r2, r3
 8009376:	461a      	mov	r2, r3
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	e013      	b.n	80093a6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800937e:	7dbb      	ldrb	r3, [r7, #22]
 8009380:	109b      	asrs	r3, r3, #2
 8009382:	b29b      	uxth	r3, r3
 8009384:	f003 031f 	and.w	r3, r3, #31
 8009388:	3301      	adds	r3, #1
 800938a:	7dfa      	ldrb	r2, [r7, #23]
 800938c:	00d2      	lsls	r2, r2, #3
 800938e:	f002 0218 	and.w	r2, r2, #24
 8009392:	7df9      	ldrb	r1, [r7, #23]
 8009394:	0949      	lsrs	r1, r1, #5
 8009396:	b2c9      	uxtb	r1, r1
 8009398:	440a      	add	r2, r1
 800939a:	3201      	adds	r2, #1
 800939c:	fb02 f303 	mul.w	r3, r2, r3
 80093a0:	461a      	mov	r2, r3
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80093a6:	2300      	movs	r3, #0
 80093a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80093ac:	e055      	b.n	800945a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80093ae:	4b34      	ldr	r3, [pc, #208]	@ (8009480 <USER_SPI_ioctl+0x2dc>)
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	f003 0306 	and.w	r3, r3, #6
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d051      	beq.n	800945e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80093ba:	f107 020c 	add.w	r2, r7, #12
 80093be:	79fb      	ldrb	r3, [r7, #7]
 80093c0:	210b      	movs	r1, #11
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7ff feee 	bl	80091a4 <USER_SPI_ioctl>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d149      	bne.n	8009462 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80093ce:	7b3b      	ldrb	r3, [r7, #12]
 80093d0:	099b      	lsrs	r3, r3, #6
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d104      	bne.n	80093e2 <USER_SPI_ioctl+0x23e>
 80093d8:	7dbb      	ldrb	r3, [r7, #22]
 80093da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d041      	beq.n	8009466 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	623b      	str	r3, [r7, #32]
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80093ec:	6a3b      	ldr	r3, [r7, #32]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80093f2:	4b23      	ldr	r3, [pc, #140]	@ (8009480 <USER_SPI_ioctl+0x2dc>)
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	f003 0308 	and.w	r3, r3, #8
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d105      	bne.n	800940a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80093fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009400:	025b      	lsls	r3, r3, #9
 8009402:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009406:	025b      	lsls	r3, r3, #9
 8009408:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800940a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800940c:	2020      	movs	r0, #32
 800940e:	f7ff fc76 	bl	8008cfe <send_cmd>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d128      	bne.n	800946a <USER_SPI_ioctl+0x2c6>
 8009418:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800941a:	2021      	movs	r0, #33	@ 0x21
 800941c:	f7ff fc6f 	bl	8008cfe <send_cmd>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d121      	bne.n	800946a <USER_SPI_ioctl+0x2c6>
 8009426:	2100      	movs	r1, #0
 8009428:	2026      	movs	r0, #38	@ 0x26
 800942a:	f7ff fc68 	bl	8008cfe <send_cmd>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d11a      	bne.n	800946a <USER_SPI_ioctl+0x2c6>
 8009434:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009438:	f7ff fbba 	bl	8008bb0 <wait_ready>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d013      	beq.n	800946a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009442:	2300      	movs	r3, #0
 8009444:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8009448:	e00f      	b.n	800946a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800944a:	2304      	movs	r3, #4
 800944c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009450:	e00c      	b.n	800946c <USER_SPI_ioctl+0x2c8>
		break;
 8009452:	bf00      	nop
 8009454:	e00a      	b.n	800946c <USER_SPI_ioctl+0x2c8>
		break;
 8009456:	bf00      	nop
 8009458:	e008      	b.n	800946c <USER_SPI_ioctl+0x2c8>
		break;
 800945a:	bf00      	nop
 800945c:	e006      	b.n	800946c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800945e:	bf00      	nop
 8009460:	e004      	b.n	800946c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009462:	bf00      	nop
 8009464:	e002      	b.n	800946c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009466:	bf00      	nop
 8009468:	e000      	b.n	800946c <USER_SPI_ioctl+0x2c8>
		break;
 800946a:	bf00      	nop
	}

	despiselect();
 800946c:	f7ff fbc4 	bl	8008bf8 <despiselect>

	return res;
 8009470:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009474:	4618      	mov	r0, r3
 8009476:	3730      	adds	r7, #48	@ 0x30
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	20000020 	.word	0x20000020
 8009480:	2000097c 	.word	0x2000097c

08009484 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	4603      	mov	r3, r0
 800948c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800948e:	79fb      	ldrb	r3, [r7, #7]
 8009490:	4a08      	ldr	r2, [pc, #32]	@ (80094b4 <disk_status+0x30>)
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	79fa      	ldrb	r2, [r7, #7]
 800949c:	4905      	ldr	r1, [pc, #20]	@ (80094b4 <disk_status+0x30>)
 800949e:	440a      	add	r2, r1
 80094a0:	7a12      	ldrb	r2, [r2, #8]
 80094a2:	4610      	mov	r0, r2
 80094a4:	4798      	blx	r3
 80094a6:	4603      	mov	r3, r0
 80094a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80094aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	200009b0 	.word	0x200009b0

080094b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	4603      	mov	r3, r0
 80094c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80094c2:	2300      	movs	r3, #0
 80094c4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80094c6:	79fb      	ldrb	r3, [r7, #7]
 80094c8:	4a0d      	ldr	r2, [pc, #52]	@ (8009500 <disk_initialize+0x48>)
 80094ca:	5cd3      	ldrb	r3, [r2, r3]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d111      	bne.n	80094f4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80094d0:	79fb      	ldrb	r3, [r7, #7]
 80094d2:	4a0b      	ldr	r2, [pc, #44]	@ (8009500 <disk_initialize+0x48>)
 80094d4:	2101      	movs	r1, #1
 80094d6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80094d8:	79fb      	ldrb	r3, [r7, #7]
 80094da:	4a09      	ldr	r2, [pc, #36]	@ (8009500 <disk_initialize+0x48>)
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	4413      	add	r3, r2
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	79fa      	ldrb	r2, [r7, #7]
 80094e6:	4906      	ldr	r1, [pc, #24]	@ (8009500 <disk_initialize+0x48>)
 80094e8:	440a      	add	r2, r1
 80094ea:	7a12      	ldrb	r2, [r2, #8]
 80094ec:	4610      	mov	r0, r2
 80094ee:	4798      	blx	r3
 80094f0:	4603      	mov	r3, r0
 80094f2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	200009b0 	.word	0x200009b0

08009504 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009504:	b590      	push	{r4, r7, lr}
 8009506:	b087      	sub	sp, #28
 8009508:	af00      	add	r7, sp, #0
 800950a:	60b9      	str	r1, [r7, #8]
 800950c:	607a      	str	r2, [r7, #4]
 800950e:	603b      	str	r3, [r7, #0]
 8009510:	4603      	mov	r3, r0
 8009512:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	4a0a      	ldr	r2, [pc, #40]	@ (8009540 <disk_read+0x3c>)
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	689c      	ldr	r4, [r3, #8]
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	4a07      	ldr	r2, [pc, #28]	@ (8009540 <disk_read+0x3c>)
 8009524:	4413      	add	r3, r2
 8009526:	7a18      	ldrb	r0, [r3, #8]
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	68b9      	ldr	r1, [r7, #8]
 800952e:	47a0      	blx	r4
 8009530:	4603      	mov	r3, r0
 8009532:	75fb      	strb	r3, [r7, #23]
  return res;
 8009534:	7dfb      	ldrb	r3, [r7, #23]
}
 8009536:	4618      	mov	r0, r3
 8009538:	371c      	adds	r7, #28
 800953a:	46bd      	mov	sp, r7
 800953c:	bd90      	pop	{r4, r7, pc}
 800953e:	bf00      	nop
 8009540:	200009b0 	.word	0x200009b0

08009544 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009544:	b590      	push	{r4, r7, lr}
 8009546:	b087      	sub	sp, #28
 8009548:	af00      	add	r7, sp, #0
 800954a:	60b9      	str	r1, [r7, #8]
 800954c:	607a      	str	r2, [r7, #4]
 800954e:	603b      	str	r3, [r7, #0]
 8009550:	4603      	mov	r3, r0
 8009552:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009554:	7bfb      	ldrb	r3, [r7, #15]
 8009556:	4a0a      	ldr	r2, [pc, #40]	@ (8009580 <disk_write+0x3c>)
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	68dc      	ldr	r4, [r3, #12]
 8009560:	7bfb      	ldrb	r3, [r7, #15]
 8009562:	4a07      	ldr	r2, [pc, #28]	@ (8009580 <disk_write+0x3c>)
 8009564:	4413      	add	r3, r2
 8009566:	7a18      	ldrb	r0, [r3, #8]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	68b9      	ldr	r1, [r7, #8]
 800956e:	47a0      	blx	r4
 8009570:	4603      	mov	r3, r0
 8009572:	75fb      	strb	r3, [r7, #23]
  return res;
 8009574:	7dfb      	ldrb	r3, [r7, #23]
}
 8009576:	4618      	mov	r0, r3
 8009578:	371c      	adds	r7, #28
 800957a:	46bd      	mov	sp, r7
 800957c:	bd90      	pop	{r4, r7, pc}
 800957e:	bf00      	nop
 8009580:	200009b0 	.word	0x200009b0

08009584 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	4603      	mov	r3, r0
 800958c:	603a      	str	r2, [r7, #0]
 800958e:	71fb      	strb	r3, [r7, #7]
 8009590:	460b      	mov	r3, r1
 8009592:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009594:	79fb      	ldrb	r3, [r7, #7]
 8009596:	4a09      	ldr	r2, [pc, #36]	@ (80095bc <disk_ioctl+0x38>)
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4413      	add	r3, r2
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	79fa      	ldrb	r2, [r7, #7]
 80095a2:	4906      	ldr	r1, [pc, #24]	@ (80095bc <disk_ioctl+0x38>)
 80095a4:	440a      	add	r2, r1
 80095a6:	7a10      	ldrb	r0, [r2, #8]
 80095a8:	79b9      	ldrb	r1, [r7, #6]
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	4798      	blx	r3
 80095ae:	4603      	mov	r3, r0
 80095b0:	73fb      	strb	r3, [r7, #15]
  return res;
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	200009b0 	.word	0x200009b0

080095c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	3301      	adds	r3, #1
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80095d0:	89fb      	ldrh	r3, [r7, #14]
 80095d2:	021b      	lsls	r3, r3, #8
 80095d4:	b21a      	sxth	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	b21b      	sxth	r3, r3
 80095dc:	4313      	orrs	r3, r2
 80095de:	b21b      	sxth	r3, r3
 80095e0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80095e2:	89fb      	ldrh	r3, [r7, #14]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	3303      	adds	r3, #3
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	021b      	lsls	r3, r3, #8
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	3202      	adds	r2, #2
 8009608:	7812      	ldrb	r2, [r2, #0]
 800960a:	4313      	orrs	r3, r2
 800960c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	021b      	lsls	r3, r3, #8
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	3201      	adds	r2, #1
 8009616:	7812      	ldrb	r2, [r2, #0]
 8009618:	4313      	orrs	r3, r2
 800961a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	021b      	lsls	r3, r3, #8
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	7812      	ldrb	r2, [r2, #0]
 8009624:	4313      	orrs	r3, r2
 8009626:	60fb      	str	r3, [r7, #12]
	return rv;
 8009628:	68fb      	ldr	r3, [r7, #12]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3714      	adds	r7, #20
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr

08009636 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009636:	b480      	push	{r7}
 8009638:	b083      	sub	sp, #12
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	460b      	mov	r3, r1
 8009640:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	1c5a      	adds	r2, r3, #1
 8009646:	607a      	str	r2, [r7, #4]
 8009648:	887a      	ldrh	r2, [r7, #2]
 800964a:	b2d2      	uxtb	r2, r2
 800964c:	701a      	strb	r2, [r3, #0]
 800964e:	887b      	ldrh	r3, [r7, #2]
 8009650:	0a1b      	lsrs	r3, r3, #8
 8009652:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	1c5a      	adds	r2, r3, #1
 8009658:	607a      	str	r2, [r7, #4]
 800965a:	887a      	ldrh	r2, [r7, #2]
 800965c:	b2d2      	uxtb	r2, r2
 800965e:	701a      	strb	r2, [r3, #0]
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	1c5a      	adds	r2, r3, #1
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	b2d2      	uxtb	r2, r2
 8009680:	701a      	strb	r2, [r3, #0]
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	0a1b      	lsrs	r3, r3, #8
 8009686:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	1c5a      	adds	r2, r3, #1
 800968c:	607a      	str	r2, [r7, #4]
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	b2d2      	uxtb	r2, r2
 8009692:	701a      	strb	r2, [r3, #0]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	0a1b      	lsrs	r3, r3, #8
 8009698:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	1c5a      	adds	r2, r3, #1
 800969e:	607a      	str	r2, [r7, #4]
 80096a0:	683a      	ldr	r2, [r7, #0]
 80096a2:	b2d2      	uxtb	r2, r2
 80096a4:	701a      	strb	r2, [r3, #0]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	0a1b      	lsrs	r3, r3, #8
 80096aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	1c5a      	adds	r2, r3, #1
 80096b0:	607a      	str	r2, [r7, #4]
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	b2d2      	uxtb	r2, r2
 80096b6:	701a      	strb	r2, [r3, #0]
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80096c4:	b480      	push	{r7}
 80096c6:	b087      	sub	sp, #28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00d      	beq.n	80096fa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	1c53      	adds	r3, r2, #1
 80096e2:	613b      	str	r3, [r7, #16]
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	1c59      	adds	r1, r3, #1
 80096e8:	6179      	str	r1, [r7, #20]
 80096ea:	7812      	ldrb	r2, [r2, #0]
 80096ec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	3b01      	subs	r3, #1
 80096f2:	607b      	str	r3, [r7, #4]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1f1      	bne.n	80096de <mem_cpy+0x1a>
	}
}
 80096fa:	bf00      	nop
 80096fc:	371c      	adds	r7, #28
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009706:	b480      	push	{r7}
 8009708:	b087      	sub	sp, #28
 800970a:	af00      	add	r7, sp, #0
 800970c:	60f8      	str	r0, [r7, #12]
 800970e:	60b9      	str	r1, [r7, #8]
 8009710:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	1c5a      	adds	r2, r3, #1
 800971a:	617a      	str	r2, [r7, #20]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	b2d2      	uxtb	r2, r2
 8009720:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	3b01      	subs	r3, #1
 8009726:	607b      	str	r3, [r7, #4]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1f3      	bne.n	8009716 <mem_set+0x10>
}
 800972e:	bf00      	nop
 8009730:	bf00      	nop
 8009732:	371c      	adds	r7, #28
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800973c:	b480      	push	{r7}
 800973e:	b089      	sub	sp, #36	@ 0x24
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	61fb      	str	r3, [r7, #28]
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009750:	2300      	movs	r3, #0
 8009752:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	1c5a      	adds	r2, r3, #1
 8009758:	61fa      	str	r2, [r7, #28]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	4619      	mov	r1, r3
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	1c5a      	adds	r2, r3, #1
 8009762:	61ba      	str	r2, [r7, #24]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	1acb      	subs	r3, r1, r3
 8009768:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	3b01      	subs	r3, #1
 800976e:	607b      	str	r3, [r7, #4]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d002      	beq.n	800977c <mem_cmp+0x40>
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d0eb      	beq.n	8009754 <mem_cmp+0x18>

	return r;
 800977c:	697b      	ldr	r3, [r7, #20]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3724      	adds	r7, #36	@ 0x24
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr

0800978a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800978a:	b480      	push	{r7}
 800978c:	b083      	sub	sp, #12
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009794:	e002      	b.n	800979c <chk_chr+0x12>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	3301      	adds	r3, #1
 800979a:	607b      	str	r3, [r7, #4]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d005      	beq.n	80097b0 <chk_chr+0x26>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	461a      	mov	r2, r3
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d1f2      	bne.n	8009796 <chk_chr+0xc>
	return *str;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	781b      	ldrb	r3, [r3, #0]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80097ca:	2300      	movs	r3, #0
 80097cc:	60bb      	str	r3, [r7, #8]
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	60fb      	str	r3, [r7, #12]
 80097d2:	e029      	b.n	8009828 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80097d4:	4a27      	ldr	r2, [pc, #156]	@ (8009874 <chk_lock+0xb4>)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	011b      	lsls	r3, r3, #4
 80097da:	4413      	add	r3, r2
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d01d      	beq.n	800981e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80097e2:	4a24      	ldr	r2, [pc, #144]	@ (8009874 <chk_lock+0xb4>)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	011b      	lsls	r3, r3, #4
 80097e8:	4413      	add	r3, r2
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d116      	bne.n	8009822 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80097f4:	4a1f      	ldr	r2, [pc, #124]	@ (8009874 <chk_lock+0xb4>)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	011b      	lsls	r3, r3, #4
 80097fa:	4413      	add	r3, r2
 80097fc:	3304      	adds	r3, #4
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009804:	429a      	cmp	r2, r3
 8009806:	d10c      	bne.n	8009822 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009808:	4a1a      	ldr	r2, [pc, #104]	@ (8009874 <chk_lock+0xb4>)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	011b      	lsls	r3, r3, #4
 800980e:	4413      	add	r3, r2
 8009810:	3308      	adds	r3, #8
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009818:	429a      	cmp	r2, r3
 800981a:	d102      	bne.n	8009822 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800981c:	e007      	b.n	800982e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800981e:	2301      	movs	r3, #1
 8009820:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	3301      	adds	r3, #1
 8009826:	60fb      	str	r3, [r7, #12]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d9d2      	bls.n	80097d4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2b02      	cmp	r3, #2
 8009832:	d109      	bne.n	8009848 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d102      	bne.n	8009840 <chk_lock+0x80>
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	2b02      	cmp	r3, #2
 800983e:	d101      	bne.n	8009844 <chk_lock+0x84>
 8009840:	2300      	movs	r3, #0
 8009842:	e010      	b.n	8009866 <chk_lock+0xa6>
 8009844:	2312      	movs	r3, #18
 8009846:	e00e      	b.n	8009866 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d108      	bne.n	8009860 <chk_lock+0xa0>
 800984e:	4a09      	ldr	r2, [pc, #36]	@ (8009874 <chk_lock+0xb4>)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	011b      	lsls	r3, r3, #4
 8009854:	4413      	add	r3, r2
 8009856:	330c      	adds	r3, #12
 8009858:	881b      	ldrh	r3, [r3, #0]
 800985a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800985e:	d101      	bne.n	8009864 <chk_lock+0xa4>
 8009860:	2310      	movs	r3, #16
 8009862:	e000      	b.n	8009866 <chk_lock+0xa6>
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3714      	adds	r7, #20
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	20000990 	.word	0x20000990

08009878 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800987e:	2300      	movs	r3, #0
 8009880:	607b      	str	r3, [r7, #4]
 8009882:	e002      	b.n	800988a <enq_lock+0x12>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	3301      	adds	r3, #1
 8009888:	607b      	str	r3, [r7, #4]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d806      	bhi.n	800989e <enq_lock+0x26>
 8009890:	4a09      	ldr	r2, [pc, #36]	@ (80098b8 <enq_lock+0x40>)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	011b      	lsls	r3, r3, #4
 8009896:	4413      	add	r3, r2
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1f2      	bne.n	8009884 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	bf14      	ite	ne
 80098a4:	2301      	movne	r3, #1
 80098a6:	2300      	moveq	r3, #0
 80098a8:	b2db      	uxtb	r3, r3
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	370c      	adds	r7, #12
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	20000990 	.word	0x20000990

080098bc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80098c6:	2300      	movs	r3, #0
 80098c8:	60fb      	str	r3, [r7, #12]
 80098ca:	e01f      	b.n	800990c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80098cc:	4a41      	ldr	r2, [pc, #260]	@ (80099d4 <inc_lock+0x118>)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	011b      	lsls	r3, r3, #4
 80098d2:	4413      	add	r3, r2
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d113      	bne.n	8009906 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80098de:	4a3d      	ldr	r2, [pc, #244]	@ (80099d4 <inc_lock+0x118>)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	011b      	lsls	r3, r3, #4
 80098e4:	4413      	add	r3, r2
 80098e6:	3304      	adds	r3, #4
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d109      	bne.n	8009906 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80098f2:	4a38      	ldr	r2, [pc, #224]	@ (80099d4 <inc_lock+0x118>)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	011b      	lsls	r3, r3, #4
 80098f8:	4413      	add	r3, r2
 80098fa:	3308      	adds	r3, #8
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009902:	429a      	cmp	r2, r3
 8009904:	d006      	beq.n	8009914 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	3301      	adds	r3, #1
 800990a:	60fb      	str	r3, [r7, #12]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d9dc      	bls.n	80098cc <inc_lock+0x10>
 8009912:	e000      	b.n	8009916 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009914:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2b02      	cmp	r3, #2
 800991a:	d132      	bne.n	8009982 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800991c:	2300      	movs	r3, #0
 800991e:	60fb      	str	r3, [r7, #12]
 8009920:	e002      	b.n	8009928 <inc_lock+0x6c>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	3301      	adds	r3, #1
 8009926:	60fb      	str	r3, [r7, #12]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d806      	bhi.n	800993c <inc_lock+0x80>
 800992e:	4a29      	ldr	r2, [pc, #164]	@ (80099d4 <inc_lock+0x118>)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	011b      	lsls	r3, r3, #4
 8009934:	4413      	add	r3, r2
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1f2      	bne.n	8009922 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2b02      	cmp	r3, #2
 8009940:	d101      	bne.n	8009946 <inc_lock+0x8a>
 8009942:	2300      	movs	r3, #0
 8009944:	e040      	b.n	80099c8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	4922      	ldr	r1, [pc, #136]	@ (80099d4 <inc_lock+0x118>)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	011b      	lsls	r3, r3, #4
 8009950:	440b      	add	r3, r1
 8009952:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	689a      	ldr	r2, [r3, #8]
 8009958:	491e      	ldr	r1, [pc, #120]	@ (80099d4 <inc_lock+0x118>)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	011b      	lsls	r3, r3, #4
 800995e:	440b      	add	r3, r1
 8009960:	3304      	adds	r3, #4
 8009962:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	695a      	ldr	r2, [r3, #20]
 8009968:	491a      	ldr	r1, [pc, #104]	@ (80099d4 <inc_lock+0x118>)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	011b      	lsls	r3, r3, #4
 800996e:	440b      	add	r3, r1
 8009970:	3308      	adds	r3, #8
 8009972:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009974:	4a17      	ldr	r2, [pc, #92]	@ (80099d4 <inc_lock+0x118>)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	011b      	lsls	r3, r3, #4
 800997a:	4413      	add	r3, r2
 800997c:	330c      	adds	r3, #12
 800997e:	2200      	movs	r2, #0
 8009980:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d009      	beq.n	800999c <inc_lock+0xe0>
 8009988:	4a12      	ldr	r2, [pc, #72]	@ (80099d4 <inc_lock+0x118>)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	011b      	lsls	r3, r3, #4
 800998e:	4413      	add	r3, r2
 8009990:	330c      	adds	r3, #12
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <inc_lock+0xe0>
 8009998:	2300      	movs	r3, #0
 800999a:	e015      	b.n	80099c8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d108      	bne.n	80099b4 <inc_lock+0xf8>
 80099a2:	4a0c      	ldr	r2, [pc, #48]	@ (80099d4 <inc_lock+0x118>)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	011b      	lsls	r3, r3, #4
 80099a8:	4413      	add	r3, r2
 80099aa:	330c      	adds	r3, #12
 80099ac:	881b      	ldrh	r3, [r3, #0]
 80099ae:	3301      	adds	r3, #1
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	e001      	b.n	80099b8 <inc_lock+0xfc>
 80099b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80099b8:	4906      	ldr	r1, [pc, #24]	@ (80099d4 <inc_lock+0x118>)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	011b      	lsls	r3, r3, #4
 80099be:	440b      	add	r3, r1
 80099c0:	330c      	adds	r3, #12
 80099c2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	3301      	adds	r3, #1
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3714      	adds	r7, #20
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr
 80099d4:	20000990 	.word	0x20000990

080099d8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3b01      	subs	r3, #1
 80099e4:	607b      	str	r3, [r7, #4]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d825      	bhi.n	8009a38 <dec_lock+0x60>
		n = Files[i].ctr;
 80099ec:	4a17      	ldr	r2, [pc, #92]	@ (8009a4c <dec_lock+0x74>)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	011b      	lsls	r3, r3, #4
 80099f2:	4413      	add	r3, r2
 80099f4:	330c      	adds	r3, #12
 80099f6:	881b      	ldrh	r3, [r3, #0]
 80099f8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80099fa:	89fb      	ldrh	r3, [r7, #14]
 80099fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a00:	d101      	bne.n	8009a06 <dec_lock+0x2e>
 8009a02:	2300      	movs	r3, #0
 8009a04:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009a06:	89fb      	ldrh	r3, [r7, #14]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d002      	beq.n	8009a12 <dec_lock+0x3a>
 8009a0c:	89fb      	ldrh	r3, [r7, #14]
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009a12:	4a0e      	ldr	r2, [pc, #56]	@ (8009a4c <dec_lock+0x74>)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	011b      	lsls	r3, r3, #4
 8009a18:	4413      	add	r3, r2
 8009a1a:	330c      	adds	r3, #12
 8009a1c:	89fa      	ldrh	r2, [r7, #14]
 8009a1e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009a20:	89fb      	ldrh	r3, [r7, #14]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d105      	bne.n	8009a32 <dec_lock+0x5a>
 8009a26:	4a09      	ldr	r2, [pc, #36]	@ (8009a4c <dec_lock+0x74>)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	011b      	lsls	r3, r3, #4
 8009a2c:	4413      	add	r3, r2
 8009a2e:	2200      	movs	r2, #0
 8009a30:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	737b      	strb	r3, [r7, #13]
 8009a36:	e001      	b.n	8009a3c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009a38:	2302      	movs	r3, #2
 8009a3a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009a3c:	7b7b      	ldrb	r3, [r7, #13]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	20000990 	.word	0x20000990

08009a50 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009a58:	2300      	movs	r3, #0
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	e010      	b.n	8009a80 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8009a94 <clear_lock+0x44>)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	011b      	lsls	r3, r3, #4
 8009a64:	4413      	add	r3, r2
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d105      	bne.n	8009a7a <clear_lock+0x2a>
 8009a6e:	4a09      	ldr	r2, [pc, #36]	@ (8009a94 <clear_lock+0x44>)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	011b      	lsls	r3, r3, #4
 8009a74:	4413      	add	r3, r2
 8009a76:	2200      	movs	r2, #0
 8009a78:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	60fb      	str	r3, [r7, #12]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d9eb      	bls.n	8009a5e <clear_lock+0xe>
	}
}
 8009a86:	bf00      	nop
 8009a88:	bf00      	nop
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	20000990 	.word	0x20000990

08009a98 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	78db      	ldrb	r3, [r3, #3]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d034      	beq.n	8009b16 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	7858      	ldrb	r0, [r3, #1]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009abc:	2301      	movs	r3, #1
 8009abe:	697a      	ldr	r2, [r7, #20]
 8009ac0:	f7ff fd40 	bl	8009544 <disk_write>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d002      	beq.n	8009ad0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	73fb      	strb	r3, [r7, #15]
 8009ace:	e022      	b.n	8009b16 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a1b      	ldr	r3, [r3, #32]
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	1ad2      	subs	r2, r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d217      	bcs.n	8009b16 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	789b      	ldrb	r3, [r3, #2]
 8009aea:	613b      	str	r3, [r7, #16]
 8009aec:	e010      	b.n	8009b10 <sync_window+0x78>
					wsect += fs->fsize;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	697a      	ldr	r2, [r7, #20]
 8009af4:	4413      	add	r3, r2
 8009af6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	7858      	ldrb	r0, [r3, #1]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009b02:	2301      	movs	r3, #1
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	f7ff fd1d 	bl	8009544 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	3b01      	subs	r3, #1
 8009b0e:	613b      	str	r3, [r7, #16]
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d8eb      	bhi.n	8009aee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b32:	683a      	ldr	r2, [r7, #0]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d01b      	beq.n	8009b70 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7ff ffad 	bl	8009a98 <sync_window>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d113      	bne.n	8009b70 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	7858      	ldrb	r0, [r3, #1]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009b52:	2301      	movs	r3, #1
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	f7ff fcd5 	bl	8009504 <disk_read>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d004      	beq.n	8009b6a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009b60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009b64:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
	...

08009b7c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7ff ff87 	bl	8009a98 <sync_window>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009b8e:	7bfb      	ldrb	r3, [r7, #15]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d158      	bne.n	8009c46 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	2b03      	cmp	r3, #3
 8009b9a:	d148      	bne.n	8009c2e <sync_fs+0xb2>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	791b      	ldrb	r3, [r3, #4]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d144      	bne.n	8009c2e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	3330      	adds	r3, #48	@ 0x30
 8009ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009bac:	2100      	movs	r1, #0
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7ff fda9 	bl	8009706 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	3330      	adds	r3, #48	@ 0x30
 8009bb8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009bbc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7ff fd38 	bl	8009636 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	3330      	adds	r3, #48	@ 0x30
 8009bca:	4921      	ldr	r1, [pc, #132]	@ (8009c50 <sync_fs+0xd4>)
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7ff fd4d 	bl	800966c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	3330      	adds	r3, #48	@ 0x30
 8009bd6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009bda:	491e      	ldr	r1, [pc, #120]	@ (8009c54 <sync_fs+0xd8>)
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7ff fd45 	bl	800966c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	3330      	adds	r3, #48	@ 0x30
 8009be6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	4619      	mov	r1, r3
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	f7ff fd3b 	bl	800966c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	3330      	adds	r3, #48	@ 0x30
 8009bfa:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	4619      	mov	r1, r3
 8009c04:	4610      	mov	r0, r2
 8009c06:	f7ff fd31 	bl	800966c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	1c5a      	adds	r2, r3, #1
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	7858      	ldrb	r0, [r3, #1]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c22:	2301      	movs	r3, #1
 8009c24:	f7ff fc8e 	bl	8009544 <disk_write>
			fs->fsi_flag = 0;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	785b      	ldrb	r3, [r3, #1]
 8009c32:	2200      	movs	r2, #0
 8009c34:	2100      	movs	r1, #0
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7ff fca4 	bl	8009584 <disk_ioctl>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <sync_fs+0xca>
 8009c42:	2301      	movs	r3, #1
 8009c44:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	41615252 	.word	0x41615252
 8009c54:	61417272 	.word	0x61417272

08009c58 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	3b02      	subs	r3, #2
 8009c66:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	695b      	ldr	r3, [r3, #20]
 8009c6c:	3b02      	subs	r3, #2
 8009c6e:	683a      	ldr	r2, [r7, #0]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d301      	bcc.n	8009c78 <clust2sect+0x20>
 8009c74:	2300      	movs	r3, #0
 8009c76:	e008      	b.n	8009c8a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	895b      	ldrh	r3, [r3, #10]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	fb03 f202 	mul.w	r2, r3, r2
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c88:	4413      	add	r3, r2
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	370c      	adds	r7, #12
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b086      	sub	sp, #24
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
 8009c9e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d904      	bls.n	8009cb6 <get_fat+0x20>
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	695b      	ldr	r3, [r3, #20]
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d302      	bcc.n	8009cbc <get_fat+0x26>
		val = 1;	/* Internal error */
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	617b      	str	r3, [r7, #20]
 8009cba:	e08e      	b.n	8009dda <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009cbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009cc0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	2b03      	cmp	r3, #3
 8009cc8:	d061      	beq.n	8009d8e <get_fat+0xf8>
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	dc7b      	bgt.n	8009dc6 <get_fat+0x130>
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d002      	beq.n	8009cd8 <get_fat+0x42>
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d041      	beq.n	8009d5a <get_fat+0xc4>
 8009cd6:	e076      	b.n	8009dc6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	60fb      	str	r3, [r7, #12]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	085b      	lsrs	r3, r3, #1
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	6a1a      	ldr	r2, [r3, #32]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	0a5b      	lsrs	r3, r3, #9
 8009cee:	4413      	add	r3, r2
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	6938      	ldr	r0, [r7, #16]
 8009cf4:	f7ff ff14 	bl	8009b20 <move_window>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d166      	bne.n	8009dcc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	1c5a      	adds	r2, r3, #1
 8009d02:	60fa      	str	r2, [r7, #12]
 8009d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d08:	693a      	ldr	r2, [r7, #16]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009d10:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	6a1a      	ldr	r2, [r3, #32]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	0a5b      	lsrs	r3, r3, #9
 8009d1a:	4413      	add	r3, r2
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6938      	ldr	r0, [r7, #16]
 8009d20:	f7ff fefe 	bl	8009b20 <move_window>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d152      	bne.n	8009dd0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	4413      	add	r3, r2
 8009d34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009d38:	021b      	lsls	r3, r3, #8
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	f003 0301 	and.w	r3, r3, #1
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d002      	beq.n	8009d50 <get_fat+0xba>
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	091b      	lsrs	r3, r3, #4
 8009d4e:	e002      	b.n	8009d56 <get_fat+0xc0>
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d56:	617b      	str	r3, [r7, #20]
			break;
 8009d58:	e03f      	b.n	8009dda <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	6a1a      	ldr	r2, [r3, #32]
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	0a1b      	lsrs	r3, r3, #8
 8009d62:	4413      	add	r3, r2
 8009d64:	4619      	mov	r1, r3
 8009d66:	6938      	ldr	r0, [r7, #16]
 8009d68:	f7ff feda 	bl	8009b20 <move_window>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d130      	bne.n	8009dd4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	005b      	lsls	r3, r3, #1
 8009d7c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009d80:	4413      	add	r3, r2
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7ff fc1c 	bl	80095c0 <ld_word>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	617b      	str	r3, [r7, #20]
			break;
 8009d8c:	e025      	b.n	8009dda <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	6a1a      	ldr	r2, [r3, #32]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	09db      	lsrs	r3, r3, #7
 8009d96:	4413      	add	r3, r2
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6938      	ldr	r0, [r7, #16]
 8009d9c:	f7ff fec0 	bl	8009b20 <move_window>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d118      	bne.n	8009dd8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009db4:	4413      	add	r3, r2
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7ff fc1a 	bl	80095f0 <ld_dword>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009dc2:	617b      	str	r3, [r7, #20]
			break;
 8009dc4:	e009      	b.n	8009dda <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	617b      	str	r3, [r7, #20]
 8009dca:	e006      	b.n	8009dda <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009dcc:	bf00      	nop
 8009dce:	e004      	b.n	8009dda <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009dd0:	bf00      	nop
 8009dd2:	e002      	b.n	8009dda <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009dd4:	bf00      	nop
 8009dd6:	e000      	b.n	8009dda <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009dd8:	bf00      	nop
		}
	}

	return val;
 8009dda:	697b      	ldr	r3, [r7, #20]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3718      	adds	r7, #24
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009de4:	b590      	push	{r4, r7, lr}
 8009de6:	b089      	sub	sp, #36	@ 0x24
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009df0:	2302      	movs	r3, #2
 8009df2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	f240 80d9 	bls.w	8009fae <put_fat+0x1ca>
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	695b      	ldr	r3, [r3, #20]
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	f080 80d3 	bcs.w	8009fae <put_fat+0x1ca>
		switch (fs->fs_type) {
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	2b03      	cmp	r3, #3
 8009e0e:	f000 8096 	beq.w	8009f3e <put_fat+0x15a>
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	f300 80cb 	bgt.w	8009fae <put_fat+0x1ca>
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d002      	beq.n	8009e22 <put_fat+0x3e>
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d06e      	beq.n	8009efe <put_fat+0x11a>
 8009e20:	e0c5      	b.n	8009fae <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	61bb      	str	r3, [r7, #24]
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	085b      	lsrs	r3, r3, #1
 8009e2a:	69ba      	ldr	r2, [r7, #24]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6a1a      	ldr	r2, [r3, #32]
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	0a5b      	lsrs	r3, r3, #9
 8009e38:	4413      	add	r3, r2
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f7ff fe6f 	bl	8009b20 <move_window>
 8009e42:	4603      	mov	r3, r0
 8009e44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e46:	7ffb      	ldrb	r3, [r7, #31]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f040 80a9 	bne.w	8009fa0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	1c59      	adds	r1, r3, #1
 8009e58:	61b9      	str	r1, [r7, #24]
 8009e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e5e:	4413      	add	r3, r2
 8009e60:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	f003 0301 	and.w	r3, r3, #1
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00d      	beq.n	8009e88 <put_fat+0xa4>
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	b25b      	sxtb	r3, r3
 8009e72:	f003 030f 	and.w	r3, r3, #15
 8009e76:	b25a      	sxtb	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	011b      	lsls	r3, r3, #4
 8009e7e:	b25b      	sxtb	r3, r3
 8009e80:	4313      	orrs	r3, r2
 8009e82:	b25b      	sxtb	r3, r3
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	e001      	b.n	8009e8c <put_fat+0xa8>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2201      	movs	r2, #1
 8009e94:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6a1a      	ldr	r2, [r3, #32]
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	0a5b      	lsrs	r3, r3, #9
 8009e9e:	4413      	add	r3, r2
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f7ff fe3c 	bl	8009b20 <move_window>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009eac:	7ffb      	ldrb	r3, [r7, #31]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d178      	bne.n	8009fa4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ebe:	4413      	add	r3, r2
 8009ec0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	f003 0301 	and.w	r3, r3, #1
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d003      	beq.n	8009ed4 <put_fat+0xf0>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	091b      	lsrs	r3, r3, #4
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	e00e      	b.n	8009ef2 <put_fat+0x10e>
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	b25b      	sxtb	r3, r3
 8009eda:	f023 030f 	bic.w	r3, r3, #15
 8009ede:	b25a      	sxtb	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	0a1b      	lsrs	r3, r3, #8
 8009ee4:	b25b      	sxtb	r3, r3
 8009ee6:	f003 030f 	and.w	r3, r3, #15
 8009eea:	b25b      	sxtb	r3, r3
 8009eec:	4313      	orrs	r3, r2
 8009eee:	b25b      	sxtb	r3, r3
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	697a      	ldr	r2, [r7, #20]
 8009ef4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	70da      	strb	r2, [r3, #3]
			break;
 8009efc:	e057      	b.n	8009fae <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6a1a      	ldr	r2, [r3, #32]
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	0a1b      	lsrs	r3, r3, #8
 8009f06:	4413      	add	r3, r2
 8009f08:	4619      	mov	r1, r3
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f7ff fe08 	bl	8009b20 <move_window>
 8009f10:	4603      	mov	r3, r0
 8009f12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f14:	7ffb      	ldrb	r3, [r7, #31]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d146      	bne.n	8009fa8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	005b      	lsls	r3, r3, #1
 8009f24:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009f28:	4413      	add	r3, r2
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	b292      	uxth	r2, r2
 8009f2e:	4611      	mov	r1, r2
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7ff fb80 	bl	8009636 <st_word>
			fs->wflag = 1;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	70da      	strb	r2, [r3, #3]
			break;
 8009f3c:	e037      	b.n	8009fae <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6a1a      	ldr	r2, [r3, #32]
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	09db      	lsrs	r3, r3, #7
 8009f46:	4413      	add	r3, r2
 8009f48:	4619      	mov	r1, r3
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f7ff fde8 	bl	8009b20 <move_window>
 8009f50:	4603      	mov	r3, r0
 8009f52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f54:	7ffb      	ldrb	r3, [r7, #31]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d128      	bne.n	8009fac <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009f6e:	4413      	add	r3, r2
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7ff fb3d 	bl	80095f0 <ld_dword>
 8009f76:	4603      	mov	r3, r0
 8009f78:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009f7c:	4323      	orrs	r3, r4
 8009f7e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009f8e:	4413      	add	r3, r2
 8009f90:	6879      	ldr	r1, [r7, #4]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7ff fb6a 	bl	800966c <st_dword>
			fs->wflag = 1;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	70da      	strb	r2, [r3, #3]
			break;
 8009f9e:	e006      	b.n	8009fae <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009fa0:	bf00      	nop
 8009fa2:	e004      	b.n	8009fae <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009fa4:	bf00      	nop
 8009fa6:	e002      	b.n	8009fae <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009fa8:	bf00      	nop
 8009faa:	e000      	b.n	8009fae <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009fac:	bf00      	nop
		}
	}
	return res;
 8009fae:	7ffb      	ldrb	r3, [r7, #31]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3724      	adds	r7, #36	@ 0x24
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd90      	pop	{r4, r7, pc}

08009fb8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d904      	bls.n	8009fde <remove_chain+0x26>
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	695b      	ldr	r3, [r3, #20]
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d301      	bcc.n	8009fe2 <remove_chain+0x2a>
 8009fde:	2302      	movs	r3, #2
 8009fe0:	e04b      	b.n	800a07a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00c      	beq.n	800a002 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009fe8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009fec:	6879      	ldr	r1, [r7, #4]
 8009fee:	69b8      	ldr	r0, [r7, #24]
 8009ff0:	f7ff fef8 	bl	8009de4 <put_fat>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009ff8:	7ffb      	ldrb	r3, [r7, #31]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d001      	beq.n	800a002 <remove_chain+0x4a>
 8009ffe:	7ffb      	ldrb	r3, [r7, #31]
 800a000:	e03b      	b.n	800a07a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a002:	68b9      	ldr	r1, [r7, #8]
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f7ff fe46 	bl	8009c96 <get_fat>
 800a00a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d031      	beq.n	800a076 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d101      	bne.n	800a01c <remove_chain+0x64>
 800a018:	2302      	movs	r3, #2
 800a01a:	e02e      	b.n	800a07a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a022:	d101      	bne.n	800a028 <remove_chain+0x70>
 800a024:	2301      	movs	r3, #1
 800a026:	e028      	b.n	800a07a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a028:	2200      	movs	r2, #0
 800a02a:	68b9      	ldr	r1, [r7, #8]
 800a02c:	69b8      	ldr	r0, [r7, #24]
 800a02e:	f7ff fed9 	bl	8009de4 <put_fat>
 800a032:	4603      	mov	r3, r0
 800a034:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a036:	7ffb      	ldrb	r3, [r7, #31]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d001      	beq.n	800a040 <remove_chain+0x88>
 800a03c:	7ffb      	ldrb	r3, [r7, #31]
 800a03e:	e01c      	b.n	800a07a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	691a      	ldr	r2, [r3, #16]
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	695b      	ldr	r3, [r3, #20]
 800a048:	3b02      	subs	r3, #2
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d20b      	bcs.n	800a066 <remove_chain+0xae>
			fs->free_clst++;
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	1c5a      	adds	r2, r3, #1
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	791b      	ldrb	r3, [r3, #4]
 800a05c:	f043 0301 	orr.w	r3, r3, #1
 800a060:	b2da      	uxtb	r2, r3
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	695b      	ldr	r3, [r3, #20]
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	429a      	cmp	r2, r3
 800a072:	d3c6      	bcc.n	800a002 <remove_chain+0x4a>
 800a074:	e000      	b.n	800a078 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a076:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3720      	adds	r7, #32
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b088      	sub	sp, #32
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10d      	bne.n	800a0b4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d004      	beq.n	800a0ae <create_chain+0x2c>
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	695b      	ldr	r3, [r3, #20]
 800a0a8:	69ba      	ldr	r2, [r7, #24]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d31b      	bcc.n	800a0e6 <create_chain+0x64>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	61bb      	str	r3, [r7, #24]
 800a0b2:	e018      	b.n	800a0e6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f7ff fded 	bl	8009c96 <get_fat>
 800a0bc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d801      	bhi.n	800a0c8 <create_chain+0x46>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e070      	b.n	800a1aa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0ce:	d101      	bne.n	800a0d4 <create_chain+0x52>
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	e06a      	b.n	800a1aa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d201      	bcs.n	800a0e2 <create_chain+0x60>
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	e063      	b.n	800a1aa <create_chain+0x128>
		scl = clst;
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	695b      	ldr	r3, [r3, #20]
 800a0f4:	69fa      	ldr	r2, [r7, #28]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d307      	bcc.n	800a10a <create_chain+0x88>
				ncl = 2;
 800a0fa:	2302      	movs	r3, #2
 800a0fc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a0fe:	69fa      	ldr	r2, [r7, #28]
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	429a      	cmp	r2, r3
 800a104:	d901      	bls.n	800a10a <create_chain+0x88>
 800a106:	2300      	movs	r3, #0
 800a108:	e04f      	b.n	800a1aa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a10a:	69f9      	ldr	r1, [r7, #28]
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f7ff fdc2 	bl	8009c96 <get_fat>
 800a112:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00e      	beq.n	800a138 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d003      	beq.n	800a128 <create_chain+0xa6>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a126:	d101      	bne.n	800a12c <create_chain+0xaa>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	e03e      	b.n	800a1aa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a12c:	69fa      	ldr	r2, [r7, #28]
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	429a      	cmp	r2, r3
 800a132:	d1da      	bne.n	800a0ea <create_chain+0x68>
 800a134:	2300      	movs	r3, #0
 800a136:	e038      	b.n	800a1aa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a138:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a13a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a13e:	69f9      	ldr	r1, [r7, #28]
 800a140:	6938      	ldr	r0, [r7, #16]
 800a142:	f7ff fe4f 	bl	8009de4 <put_fat>
 800a146:	4603      	mov	r3, r0
 800a148:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a14a:	7dfb      	ldrb	r3, [r7, #23]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d109      	bne.n	800a164 <create_chain+0xe2>
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d006      	beq.n	800a164 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a156:	69fa      	ldr	r2, [r7, #28]
 800a158:	6839      	ldr	r1, [r7, #0]
 800a15a:	6938      	ldr	r0, [r7, #16]
 800a15c:	f7ff fe42 	bl	8009de4 <put_fat>
 800a160:	4603      	mov	r3, r0
 800a162:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a164:	7dfb      	ldrb	r3, [r7, #23]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d116      	bne.n	800a198 <create_chain+0x116>
		fs->last_clst = ncl;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	69fa      	ldr	r2, [r7, #28]
 800a16e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	691a      	ldr	r2, [r3, #16]
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	695b      	ldr	r3, [r3, #20]
 800a178:	3b02      	subs	r3, #2
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d804      	bhi.n	800a188 <create_chain+0x106>
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	1e5a      	subs	r2, r3, #1
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	791b      	ldrb	r3, [r3, #4]
 800a18c:	f043 0301 	orr.w	r3, r3, #1
 800a190:	b2da      	uxtb	r2, r3
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	711a      	strb	r2, [r3, #4]
 800a196:	e007      	b.n	800a1a8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a198:	7dfb      	ldrb	r3, [r7, #23]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d102      	bne.n	800a1a4 <create_chain+0x122>
 800a19e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a1a2:	e000      	b.n	800a1a6 <create_chain+0x124>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a1a8:	69fb      	ldr	r3, [r7, #28]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3720      	adds	r7, #32
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a1b2:	b480      	push	{r7}
 800a1b4:	b087      	sub	sp, #28
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
 800a1ba:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1c6:	3304      	adds	r3, #4
 800a1c8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	0a5b      	lsrs	r3, r3, #9
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	8952      	ldrh	r2, [r2, #10]
 800a1d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1d6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	1d1a      	adds	r2, r3, #4
 800a1dc:	613a      	str	r2, [r7, #16]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d101      	bne.n	800a1ec <clmt_clust+0x3a>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	e010      	b.n	800a20e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a1ec:	697a      	ldr	r2, [r7, #20]
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d307      	bcc.n	800a204 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	617b      	str	r3, [r7, #20]
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	3304      	adds	r3, #4
 800a200:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a202:	e7e9      	b.n	800a1d8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a204:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	4413      	add	r3, r2
}
 800a20e:	4618      	mov	r0, r3
 800a210:	371c      	adds	r7, #28
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b086      	sub	sp, #24
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
 800a222:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a230:	d204      	bcs.n	800a23c <dir_sdi+0x22>
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	f003 031f 	and.w	r3, r3, #31
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a23c:	2302      	movs	r3, #2
 800a23e:	e063      	b.n	800a308 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d106      	bne.n	800a260 <dir_sdi+0x46>
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	2b02      	cmp	r3, #2
 800a258:	d902      	bls.n	800a260 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a25e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10c      	bne.n	800a280 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	095b      	lsrs	r3, r3, #5
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	8912      	ldrh	r2, [r2, #8]
 800a26e:	4293      	cmp	r3, r2
 800a270:	d301      	bcc.n	800a276 <dir_sdi+0x5c>
 800a272:	2302      	movs	r3, #2
 800a274:	e048      	b.n	800a308 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	61da      	str	r2, [r3, #28]
 800a27e:	e029      	b.n	800a2d4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	895b      	ldrh	r3, [r3, #10]
 800a284:	025b      	lsls	r3, r3, #9
 800a286:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a288:	e019      	b.n	800a2be <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6979      	ldr	r1, [r7, #20]
 800a28e:	4618      	mov	r0, r3
 800a290:	f7ff fd01 	bl	8009c96 <get_fat>
 800a294:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a29c:	d101      	bne.n	800a2a2 <dir_sdi+0x88>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e032      	b.n	800a308 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d904      	bls.n	800a2b2 <dir_sdi+0x98>
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	695b      	ldr	r3, [r3, #20]
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d301      	bcc.n	800a2b6 <dir_sdi+0x9c>
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	e028      	b.n	800a308 <dir_sdi+0xee>
			ofs -= csz;
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a2be:	683a      	ldr	r2, [r7, #0]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d2e1      	bcs.n	800a28a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a2c6:	6979      	ldr	r1, [r7, #20]
 800a2c8:	6938      	ldr	r0, [r7, #16]
 800a2ca:	f7ff fcc5 	bl	8009c58 <clust2sect>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	69db      	ldr	r3, [r3, #28]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d101      	bne.n	800a2e6 <dir_sdi+0xcc>
 800a2e2:	2302      	movs	r3, #2
 800a2e4:	e010      	b.n	800a308 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	69da      	ldr	r2, [r3, #28]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	0a5b      	lsrs	r3, r3, #9
 800a2ee:	441a      	add	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a300:	441a      	add	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3718      	adds	r7, #24
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	695b      	ldr	r3, [r3, #20]
 800a324:	3320      	adds	r3, #32
 800a326:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	69db      	ldr	r3, [r3, #28]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d003      	beq.n	800a338 <dir_next+0x28>
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a336:	d301      	bcc.n	800a33c <dir_next+0x2c>
 800a338:	2304      	movs	r3, #4
 800a33a:	e0aa      	b.n	800a492 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a342:	2b00      	cmp	r3, #0
 800a344:	f040 8098 	bne.w	800a478 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	69db      	ldr	r3, [r3, #28]
 800a34c:	1c5a      	adds	r2, r3, #1
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10b      	bne.n	800a372 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	095b      	lsrs	r3, r3, #5
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	8912      	ldrh	r2, [r2, #8]
 800a362:	4293      	cmp	r3, r2
 800a364:	f0c0 8088 	bcc.w	800a478 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	61da      	str	r2, [r3, #28]
 800a36e:	2304      	movs	r3, #4
 800a370:	e08f      	b.n	800a492 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	0a5b      	lsrs	r3, r3, #9
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	8952      	ldrh	r2, [r2, #10]
 800a37a:	3a01      	subs	r2, #1
 800a37c:	4013      	ands	r3, r2
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d17a      	bne.n	800a478 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	4619      	mov	r1, r3
 800a38a:	4610      	mov	r0, r2
 800a38c:	f7ff fc83 	bl	8009c96 <get_fat>
 800a390:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d801      	bhi.n	800a39c <dir_next+0x8c>
 800a398:	2302      	movs	r3, #2
 800a39a:	e07a      	b.n	800a492 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3a2:	d101      	bne.n	800a3a8 <dir_next+0x98>
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e074      	b.n	800a492 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	695b      	ldr	r3, [r3, #20]
 800a3ac:	697a      	ldr	r2, [r7, #20]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d358      	bcc.n	800a464 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d104      	bne.n	800a3c2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	61da      	str	r2, [r3, #28]
 800a3be:	2304      	movs	r3, #4
 800a3c0:	e067      	b.n	800a492 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	4610      	mov	r0, r2
 800a3cc:	f7ff fe59 	bl	800a082 <create_chain>
 800a3d0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d101      	bne.n	800a3dc <dir_next+0xcc>
 800a3d8:	2307      	movs	r3, #7
 800a3da:	e05a      	b.n	800a492 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d101      	bne.n	800a3e6 <dir_next+0xd6>
 800a3e2:	2302      	movs	r3, #2
 800a3e4:	e055      	b.n	800a492 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3ec:	d101      	bne.n	800a3f2 <dir_next+0xe2>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e04f      	b.n	800a492 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f7ff fb50 	bl	8009a98 <sync_window>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <dir_next+0xf2>
 800a3fe:	2301      	movs	r3, #1
 800a400:	e047      	b.n	800a492 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	3330      	adds	r3, #48	@ 0x30
 800a406:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a40a:	2100      	movs	r1, #0
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7ff f97a 	bl	8009706 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a412:	2300      	movs	r3, #0
 800a414:	613b      	str	r3, [r7, #16]
 800a416:	6979      	ldr	r1, [r7, #20]
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f7ff fc1d 	bl	8009c58 <clust2sect>
 800a41e:	4602      	mov	r2, r0
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a424:	e012      	b.n	800a44c <dir_next+0x13c>
						fs->wflag = 1;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2201      	movs	r2, #1
 800a42a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	f7ff fb33 	bl	8009a98 <sync_window>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d001      	beq.n	800a43c <dir_next+0x12c>
 800a438:	2301      	movs	r3, #1
 800a43a:	e02a      	b.n	800a492 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	3301      	adds	r3, #1
 800a440:	613b      	str	r3, [r7, #16]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a446:	1c5a      	adds	r2, r3, #1
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	895b      	ldrh	r3, [r3, #10]
 800a450:	461a      	mov	r2, r3
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	4293      	cmp	r3, r2
 800a456:	d3e6      	bcc.n	800a426 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	1ad2      	subs	r2, r2, r3
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a46a:	6979      	ldr	r1, [r7, #20]
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f7ff fbf3 	bl	8009c58 <clust2sect>
 800a472:	4602      	mov	r2, r0
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a48a:	441a      	add	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3718      	adds	r7, #24
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b086      	sub	sp, #24
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7ff feb4 	bl	800a21a <dir_sdi>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a4b6:	7dfb      	ldrb	r3, [r7, #23]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d12b      	bne.n	800a514 <dir_alloc+0x7a>
		n = 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	69db      	ldr	r3, [r3, #28]
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f7ff fb2a 	bl	8009b20 <move_window>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a4d0:	7dfb      	ldrb	r3, [r7, #23]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d11d      	bne.n	800a512 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2be5      	cmp	r3, #229	@ 0xe5
 800a4de:	d004      	beq.n	800a4ea <dir_alloc+0x50>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a1b      	ldr	r3, [r3, #32]
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d107      	bne.n	800a4fa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	613b      	str	r3, [r7, #16]
 800a4f0:	693a      	ldr	r2, [r7, #16]
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d102      	bne.n	800a4fe <dir_alloc+0x64>
 800a4f8:	e00c      	b.n	800a514 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a4fe:	2101      	movs	r1, #1
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f7ff ff05 	bl	800a310 <dir_next>
 800a506:	4603      	mov	r3, r0
 800a508:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a50a:	7dfb      	ldrb	r3, [r7, #23]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d0d7      	beq.n	800a4c0 <dir_alloc+0x26>
 800a510:	e000      	b.n	800a514 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a512:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a514:	7dfb      	ldrb	r3, [r7, #23]
 800a516:	2b04      	cmp	r3, #4
 800a518:	d101      	bne.n	800a51e <dir_alloc+0x84>
 800a51a:	2307      	movs	r3, #7
 800a51c:	75fb      	strb	r3, [r7, #23]
	return res;
 800a51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3718      	adds	r7, #24
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	331a      	adds	r3, #26
 800a536:	4618      	mov	r0, r3
 800a538:	f7ff f842 	bl	80095c0 <ld_word>
 800a53c:	4603      	mov	r3, r0
 800a53e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	2b03      	cmp	r3, #3
 800a546:	d109      	bne.n	800a55c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	3314      	adds	r3, #20
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7ff f837 	bl	80095c0 <ld_word>
 800a552:	4603      	mov	r3, r0
 800a554:	041b      	lsls	r3, r3, #16
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	4313      	orrs	r3, r2
 800a55a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a55c:	68fb      	ldr	r3, [r7, #12]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b084      	sub	sp, #16
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	60f8      	str	r0, [r7, #12]
 800a56e:	60b9      	str	r1, [r7, #8]
 800a570:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	331a      	adds	r3, #26
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	b292      	uxth	r2, r2
 800a57a:	4611      	mov	r1, r2
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7ff f85a 	bl	8009636 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	2b03      	cmp	r3, #3
 800a588:	d109      	bne.n	800a59e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	f103 0214 	add.w	r2, r3, #20
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	0c1b      	lsrs	r3, r3, #16
 800a594:	b29b      	uxth	r3, r3
 800a596:	4619      	mov	r1, r3
 800a598:	4610      	mov	r0, r2
 800a59a:	f7ff f84c 	bl	8009636 <st_word>
	}
}
 800a59e:	bf00      	nop
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b086      	sub	sp, #24
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7ff fe2f 	bl	800a21a <dir_sdi>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a5c0:	7dfb      	ldrb	r3, [r7, #23]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <dir_find+0x24>
 800a5c6:	7dfb      	ldrb	r3, [r7, #23]
 800a5c8:	e03e      	b.n	800a648 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	69db      	ldr	r3, [r3, #28]
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	6938      	ldr	r0, [r7, #16]
 800a5d2:	f7ff faa5 	bl	8009b20 <move_window>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a5da:	7dfb      	ldrb	r3, [r7, #23]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d12f      	bne.n	800a640 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a1b      	ldr	r3, [r3, #32]
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d102      	bne.n	800a5f4 <dir_find+0x4e>
 800a5ee:	2304      	movs	r3, #4
 800a5f0:	75fb      	strb	r3, [r7, #23]
 800a5f2:	e028      	b.n	800a646 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6a1b      	ldr	r3, [r3, #32]
 800a5f8:	330b      	adds	r3, #11
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a600:	b2da      	uxtb	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a1b      	ldr	r3, [r3, #32]
 800a60a:	330b      	adds	r3, #11
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	f003 0308 	and.w	r3, r3, #8
 800a612:	2b00      	cmp	r3, #0
 800a614:	d10a      	bne.n	800a62c <dir_find+0x86>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6a18      	ldr	r0, [r3, #32]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	3324      	adds	r3, #36	@ 0x24
 800a61e:	220b      	movs	r2, #11
 800a620:	4619      	mov	r1, r3
 800a622:	f7ff f88b 	bl	800973c <mem_cmp>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00b      	beq.n	800a644 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a62c:	2100      	movs	r1, #0
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f7ff fe6e 	bl	800a310 <dir_next>
 800a634:	4603      	mov	r3, r0
 800a636:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a638:	7dfb      	ldrb	r3, [r7, #23]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d0c5      	beq.n	800a5ca <dir_find+0x24>
 800a63e:	e002      	b.n	800a646 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a640:	bf00      	nop
 800a642:	e000      	b.n	800a646 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a644:	bf00      	nop

	return res;
 800a646:	7dfb      	ldrb	r3, [r7, #23]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3718      	adds	r7, #24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a65e:	2101      	movs	r1, #1
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7ff ff1a 	bl	800a49a <dir_alloc>
 800a666:	4603      	mov	r3, r0
 800a668:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a66a:	7bfb      	ldrb	r3, [r7, #15]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d11c      	bne.n	800a6aa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	69db      	ldr	r3, [r3, #28]
 800a674:	4619      	mov	r1, r3
 800a676:	68b8      	ldr	r0, [r7, #8]
 800a678:	f7ff fa52 	bl	8009b20 <move_window>
 800a67c:	4603      	mov	r3, r0
 800a67e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a680:	7bfb      	ldrb	r3, [r7, #15]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d111      	bne.n	800a6aa <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a1b      	ldr	r3, [r3, #32]
 800a68a:	2220      	movs	r2, #32
 800a68c:	2100      	movs	r1, #0
 800a68e:	4618      	mov	r0, r3
 800a690:	f7ff f839 	bl	8009706 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a18      	ldr	r0, [r3, #32]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	3324      	adds	r3, #36	@ 0x24
 800a69c:	220b      	movs	r2, #11
 800a69e:	4619      	mov	r1, r3
 800a6a0:	f7ff f810 	bl	80096c4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a6aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3710      	adds	r7, #16
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b088      	sub	sp, #32
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	60fb      	str	r3, [r7, #12]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	3324      	adds	r3, #36	@ 0x24
 800a6c8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a6ca:	220b      	movs	r2, #11
 800a6cc:	2120      	movs	r1, #32
 800a6ce:	68b8      	ldr	r0, [r7, #8]
 800a6d0:	f7ff f819 	bl	8009706 <mem_set>
	si = i = 0; ni = 8;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	613b      	str	r3, [r7, #16]
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	61fb      	str	r3, [r7, #28]
 800a6dc:	2308      	movs	r3, #8
 800a6de:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	1c5a      	adds	r2, r3, #1
 800a6e4:	61fa      	str	r2, [r7, #28]
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a6ee:	7efb      	ldrb	r3, [r7, #27]
 800a6f0:	2b20      	cmp	r3, #32
 800a6f2:	d94e      	bls.n	800a792 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a6f4:	7efb      	ldrb	r3, [r7, #27]
 800a6f6:	2b2f      	cmp	r3, #47	@ 0x2f
 800a6f8:	d006      	beq.n	800a708 <create_name+0x54>
 800a6fa:	7efb      	ldrb	r3, [r7, #27]
 800a6fc:	2b5c      	cmp	r3, #92	@ 0x5c
 800a6fe:	d110      	bne.n	800a722 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a700:	e002      	b.n	800a708 <create_name+0x54>
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	3301      	adds	r3, #1
 800a706:	61fb      	str	r3, [r7, #28]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	4413      	add	r3, r2
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	2b2f      	cmp	r3, #47	@ 0x2f
 800a712:	d0f6      	beq.n	800a702 <create_name+0x4e>
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	69fb      	ldr	r3, [r7, #28]
 800a718:	4413      	add	r3, r2
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	2b5c      	cmp	r3, #92	@ 0x5c
 800a71e:	d0f0      	beq.n	800a702 <create_name+0x4e>
			break;
 800a720:	e038      	b.n	800a794 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a722:	7efb      	ldrb	r3, [r7, #27]
 800a724:	2b2e      	cmp	r3, #46	@ 0x2e
 800a726:	d003      	beq.n	800a730 <create_name+0x7c>
 800a728:	693a      	ldr	r2, [r7, #16]
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d30c      	bcc.n	800a74a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	2b0b      	cmp	r3, #11
 800a734:	d002      	beq.n	800a73c <create_name+0x88>
 800a736:	7efb      	ldrb	r3, [r7, #27]
 800a738:	2b2e      	cmp	r3, #46	@ 0x2e
 800a73a:	d001      	beq.n	800a740 <create_name+0x8c>
 800a73c:	2306      	movs	r3, #6
 800a73e:	e044      	b.n	800a7ca <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a740:	2308      	movs	r3, #8
 800a742:	613b      	str	r3, [r7, #16]
 800a744:	230b      	movs	r3, #11
 800a746:	617b      	str	r3, [r7, #20]
			continue;
 800a748:	e022      	b.n	800a790 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a74a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	da04      	bge.n	800a75c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a752:	7efb      	ldrb	r3, [r7, #27]
 800a754:	3b80      	subs	r3, #128	@ 0x80
 800a756:	4a1f      	ldr	r2, [pc, #124]	@ (800a7d4 <create_name+0x120>)
 800a758:	5cd3      	ldrb	r3, [r2, r3]
 800a75a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a75c:	7efb      	ldrb	r3, [r7, #27]
 800a75e:	4619      	mov	r1, r3
 800a760:	481d      	ldr	r0, [pc, #116]	@ (800a7d8 <create_name+0x124>)
 800a762:	f7ff f812 	bl	800978a <chk_chr>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <create_name+0xbc>
 800a76c:	2306      	movs	r3, #6
 800a76e:	e02c      	b.n	800a7ca <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a770:	7efb      	ldrb	r3, [r7, #27]
 800a772:	2b60      	cmp	r3, #96	@ 0x60
 800a774:	d905      	bls.n	800a782 <create_name+0xce>
 800a776:	7efb      	ldrb	r3, [r7, #27]
 800a778:	2b7a      	cmp	r3, #122	@ 0x7a
 800a77a:	d802      	bhi.n	800a782 <create_name+0xce>
 800a77c:	7efb      	ldrb	r3, [r7, #27]
 800a77e:	3b20      	subs	r3, #32
 800a780:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	1c5a      	adds	r2, r3, #1
 800a786:	613a      	str	r2, [r7, #16]
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	4413      	add	r3, r2
 800a78c:	7efa      	ldrb	r2, [r7, #27]
 800a78e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a790:	e7a6      	b.n	800a6e0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a792:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	441a      	add	r2, r3
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d101      	bne.n	800a7a8 <create_name+0xf4>
 800a7a4:	2306      	movs	r3, #6
 800a7a6:	e010      	b.n	800a7ca <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	2be5      	cmp	r3, #229	@ 0xe5
 800a7ae:	d102      	bne.n	800a7b6 <create_name+0x102>
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	2205      	movs	r2, #5
 800a7b4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a7b6:	7efb      	ldrb	r3, [r7, #27]
 800a7b8:	2b20      	cmp	r3, #32
 800a7ba:	d801      	bhi.n	800a7c0 <create_name+0x10c>
 800a7bc:	2204      	movs	r2, #4
 800a7be:	e000      	b.n	800a7c2 <create_name+0x10e>
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	330b      	adds	r3, #11
 800a7c6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a7c8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3720      	adds	r7, #32
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	080129a8 	.word	0x080129a8
 800a7d8:	080127f0 	.word	0x080127f0

0800a7dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a7f0:	e002      	b.n	800a7f8 <follow_path+0x1c>
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	603b      	str	r3, [r7, #0]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	2b2f      	cmp	r3, #47	@ 0x2f
 800a7fe:	d0f8      	beq.n	800a7f2 <follow_path+0x16>
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	2b5c      	cmp	r3, #92	@ 0x5c
 800a806:	d0f4      	beq.n	800a7f2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	2200      	movs	r2, #0
 800a80c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	2b1f      	cmp	r3, #31
 800a814:	d80a      	bhi.n	800a82c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2280      	movs	r2, #128	@ 0x80
 800a81a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800a81e:	2100      	movs	r1, #0
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7ff fcfa 	bl	800a21a <dir_sdi>
 800a826:	4603      	mov	r3, r0
 800a828:	75fb      	strb	r3, [r7, #23]
 800a82a:	e043      	b.n	800a8b4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a82c:	463b      	mov	r3, r7
 800a82e:	4619      	mov	r1, r3
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f7ff ff3f 	bl	800a6b4 <create_name>
 800a836:	4603      	mov	r3, r0
 800a838:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a83a:	7dfb      	ldrb	r3, [r7, #23]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d134      	bne.n	800a8aa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f7ff feb0 	bl	800a5a6 <dir_find>
 800a846:	4603      	mov	r3, r0
 800a848:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a850:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a852:	7dfb      	ldrb	r3, [r7, #23]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00a      	beq.n	800a86e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a858:	7dfb      	ldrb	r3, [r7, #23]
 800a85a:	2b04      	cmp	r3, #4
 800a85c:	d127      	bne.n	800a8ae <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a85e:	7afb      	ldrb	r3, [r7, #11]
 800a860:	f003 0304 	and.w	r3, r3, #4
 800a864:	2b00      	cmp	r3, #0
 800a866:	d122      	bne.n	800a8ae <follow_path+0xd2>
 800a868:	2305      	movs	r3, #5
 800a86a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a86c:	e01f      	b.n	800a8ae <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a86e:	7afb      	ldrb	r3, [r7, #11]
 800a870:	f003 0304 	and.w	r3, r3, #4
 800a874:	2b00      	cmp	r3, #0
 800a876:	d11c      	bne.n	800a8b2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	799b      	ldrb	r3, [r3, #6]
 800a87c:	f003 0310 	and.w	r3, r3, #16
 800a880:	2b00      	cmp	r3, #0
 800a882:	d102      	bne.n	800a88a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a884:	2305      	movs	r3, #5
 800a886:	75fb      	strb	r3, [r7, #23]
 800a888:	e014      	b.n	800a8b4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	695b      	ldr	r3, [r3, #20]
 800a894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a898:	4413      	add	r3, r2
 800a89a:	4619      	mov	r1, r3
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f7ff fe43 	bl	800a528 <ld_clust>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a8a8:	e7c0      	b.n	800a82c <follow_path+0x50>
			if (res != FR_OK) break;
 800a8aa:	bf00      	nop
 800a8ac:	e002      	b.n	800a8b4 <follow_path+0xd8>
				break;
 800a8ae:	bf00      	nop
 800a8b0:	e000      	b.n	800a8b4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a8b2:	bf00      	nop
			}
		}
	}

	return res;
 800a8b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3718      	adds	r7, #24
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b087      	sub	sp, #28
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a8c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a8ca:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d031      	beq.n	800a938 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	617b      	str	r3, [r7, #20]
 800a8da:	e002      	b.n	800a8e2 <get_ldnumber+0x24>
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	617b      	str	r3, [r7, #20]
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	2b20      	cmp	r3, #32
 800a8e8:	d903      	bls.n	800a8f2 <get_ldnumber+0x34>
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	2b3a      	cmp	r3, #58	@ 0x3a
 800a8f0:	d1f4      	bne.n	800a8dc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	2b3a      	cmp	r3, #58	@ 0x3a
 800a8f8:	d11c      	bne.n	800a934 <get_ldnumber+0x76>
			tp = *path;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	1c5a      	adds	r2, r3, #1
 800a904:	60fa      	str	r2, [r7, #12]
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	3b30      	subs	r3, #48	@ 0x30
 800a90a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	2b09      	cmp	r3, #9
 800a910:	d80e      	bhi.n	800a930 <get_ldnumber+0x72>
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	429a      	cmp	r2, r3
 800a918:	d10a      	bne.n	800a930 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d107      	bne.n	800a930 <get_ldnumber+0x72>
					vol = (int)i;
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	3301      	adds	r3, #1
 800a928:	617b      	str	r3, [r7, #20]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	697a      	ldr	r2, [r7, #20]
 800a92e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	e002      	b.n	800a93a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a934:	2300      	movs	r3, #0
 800a936:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a938:	693b      	ldr	r3, [r7, #16]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	371c      	adds	r7, #28
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr
	...

0800a948 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	70da      	strb	r2, [r3, #3]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a95e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a960:	6839      	ldr	r1, [r7, #0]
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7ff f8dc 	bl	8009b20 <move_window>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d001      	beq.n	800a972 <check_fs+0x2a>
 800a96e:	2304      	movs	r3, #4
 800a970:	e038      	b.n	800a9e4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	3330      	adds	r3, #48	@ 0x30
 800a976:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7fe fe20 	bl	80095c0 <ld_word>
 800a980:	4603      	mov	r3, r0
 800a982:	461a      	mov	r2, r3
 800a984:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a988:	429a      	cmp	r2, r3
 800a98a:	d001      	beq.n	800a990 <check_fs+0x48>
 800a98c:	2303      	movs	r3, #3
 800a98e:	e029      	b.n	800a9e4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a996:	2be9      	cmp	r3, #233	@ 0xe9
 800a998:	d009      	beq.n	800a9ae <check_fs+0x66>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a9a0:	2beb      	cmp	r3, #235	@ 0xeb
 800a9a2:	d11e      	bne.n	800a9e2 <check_fs+0x9a>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a9aa:	2b90      	cmp	r3, #144	@ 0x90
 800a9ac:	d119      	bne.n	800a9e2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	3330      	adds	r3, #48	@ 0x30
 800a9b2:	3336      	adds	r3, #54	@ 0x36
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fe fe1b 	bl	80095f0 <ld_dword>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a9c0:	4a0a      	ldr	r2, [pc, #40]	@ (800a9ec <check_fs+0xa4>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d101      	bne.n	800a9ca <check_fs+0x82>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	e00c      	b.n	800a9e4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	3330      	adds	r3, #48	@ 0x30
 800a9ce:	3352      	adds	r3, #82	@ 0x52
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7fe fe0d 	bl	80095f0 <ld_dword>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	4a05      	ldr	r2, [pc, #20]	@ (800a9f0 <check_fs+0xa8>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d101      	bne.n	800a9e2 <check_fs+0x9a>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	e000      	b.n	800a9e4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a9e2:	2302      	movs	r3, #2
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3708      	adds	r7, #8
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	00544146 	.word	0x00544146
 800a9f0:	33544146 	.word	0x33544146

0800a9f4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b096      	sub	sp, #88	@ 0x58
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	4613      	mov	r3, r2
 800aa00:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	2200      	movs	r2, #0
 800aa06:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f7ff ff58 	bl	800a8be <get_ldnumber>
 800aa0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800aa10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	da01      	bge.n	800aa1a <find_volume+0x26>
 800aa16:	230b      	movs	r3, #11
 800aa18:	e22d      	b.n	800ae76 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800aa1a:	4aa1      	ldr	r2, [pc, #644]	@ (800aca0 <find_volume+0x2ac>)
 800aa1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa22:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800aa24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d101      	bne.n	800aa2e <find_volume+0x3a>
 800aa2a:	230c      	movs	r3, #12
 800aa2c:	e223      	b.n	800ae76 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa32:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800aa34:	79fb      	ldrb	r3, [r7, #7]
 800aa36:	f023 0301 	bic.w	r3, r3, #1
 800aa3a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aa3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d01a      	beq.n	800aa7a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800aa44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa46:	785b      	ldrb	r3, [r3, #1]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fe fd1b 	bl	8009484 <disk_status>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800aa54:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aa58:	f003 0301 	and.w	r3, r3, #1
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10c      	bne.n	800aa7a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800aa60:	79fb      	ldrb	r3, [r7, #7]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d007      	beq.n	800aa76 <find_volume+0x82>
 800aa66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aa6a:	f003 0304 	and.w	r3, r3, #4
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800aa72:	230a      	movs	r3, #10
 800aa74:	e1ff      	b.n	800ae76 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800aa76:	2300      	movs	r3, #0
 800aa78:	e1fd      	b.n	800ae76 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800aa7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800aa80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa82:	b2da      	uxtb	r2, r3
 800aa84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa86:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800aa88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8a:	785b      	ldrb	r3, [r3, #1]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7fe fd13 	bl	80094b8 <disk_initialize>
 800aa92:	4603      	mov	r3, r0
 800aa94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800aa98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aa9c:	f003 0301 	and.w	r3, r3, #1
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d001      	beq.n	800aaa8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e1e6      	b.n	800ae76 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800aaa8:	79fb      	ldrb	r3, [r7, #7]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d007      	beq.n	800aabe <find_volume+0xca>
 800aaae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aab2:	f003 0304 	and.w	r3, r3, #4
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d001      	beq.n	800aabe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800aaba:	230a      	movs	r3, #10
 800aabc:	e1db      	b.n	800ae76 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800aac2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aac4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aac6:	f7ff ff3f 	bl	800a948 <check_fs>
 800aaca:	4603      	mov	r3, r0
 800aacc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800aad0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	d149      	bne.n	800ab6c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aad8:	2300      	movs	r3, #0
 800aada:	643b      	str	r3, [r7, #64]	@ 0x40
 800aadc:	e01e      	b.n	800ab1c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800aade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aae6:	011b      	lsls	r3, r3, #4
 800aae8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800aaec:	4413      	add	r3, r2
 800aaee:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800aaf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf2:	3304      	adds	r3, #4
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d006      	beq.n	800ab08 <find_volume+0x114>
 800aafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafc:	3308      	adds	r3, #8
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fe fd76 	bl	80095f0 <ld_dword>
 800ab04:	4602      	mov	r2, r0
 800ab06:	e000      	b.n	800ab0a <find_volume+0x116>
 800ab08:	2200      	movs	r2, #0
 800ab0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	3358      	adds	r3, #88	@ 0x58
 800ab10:	443b      	add	r3, r7
 800ab12:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ab16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab18:	3301      	adds	r3, #1
 800ab1a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab1e:	2b03      	cmp	r3, #3
 800ab20:	d9dd      	bls.n	800aade <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ab22:	2300      	movs	r3, #0
 800ab24:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ab26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d002      	beq.n	800ab32 <find_volume+0x13e>
 800ab2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ab32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	3358      	adds	r3, #88	@ 0x58
 800ab38:	443b      	add	r3, r7
 800ab3a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ab3e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ab40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d005      	beq.n	800ab52 <find_volume+0x15e>
 800ab46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ab48:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ab4a:	f7ff fefd 	bl	800a948 <check_fs>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	e000      	b.n	800ab54 <find_volume+0x160>
 800ab52:	2303      	movs	r3, #3
 800ab54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ab58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d905      	bls.n	800ab6c <find_volume+0x178>
 800ab60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab62:	3301      	adds	r3, #1
 800ab64:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	d9e2      	bls.n	800ab32 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ab6c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ab70:	2b04      	cmp	r3, #4
 800ab72:	d101      	bne.n	800ab78 <find_volume+0x184>
 800ab74:	2301      	movs	r3, #1
 800ab76:	e17e      	b.n	800ae76 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ab78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d901      	bls.n	800ab84 <find_volume+0x190>
 800ab80:	230d      	movs	r3, #13
 800ab82:	e178      	b.n	800ae76 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ab84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab86:	3330      	adds	r3, #48	@ 0x30
 800ab88:	330b      	adds	r3, #11
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fe fd18 	bl	80095c0 <ld_word>
 800ab90:	4603      	mov	r3, r0
 800ab92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab96:	d001      	beq.n	800ab9c <find_volume+0x1a8>
 800ab98:	230d      	movs	r3, #13
 800ab9a:	e16c      	b.n	800ae76 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ab9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab9e:	3330      	adds	r3, #48	@ 0x30
 800aba0:	3316      	adds	r3, #22
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fe fd0c 	bl	80095c0 <ld_word>
 800aba8:	4603      	mov	r3, r0
 800abaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800abac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d106      	bne.n	800abc0 <find_volume+0x1cc>
 800abb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb4:	3330      	adds	r3, #48	@ 0x30
 800abb6:	3324      	adds	r3, #36	@ 0x24
 800abb8:	4618      	mov	r0, r3
 800abba:	f7fe fd19 	bl	80095f0 <ld_dword>
 800abbe:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800abc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800abc4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800abc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800abcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800abd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd2:	789b      	ldrb	r3, [r3, #2]
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d005      	beq.n	800abe4 <find_volume+0x1f0>
 800abd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abda:	789b      	ldrb	r3, [r3, #2]
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d001      	beq.n	800abe4 <find_volume+0x1f0>
 800abe0:	230d      	movs	r3, #13
 800abe2:	e148      	b.n	800ae76 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800abe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe6:	789b      	ldrb	r3, [r3, #2]
 800abe8:	461a      	mov	r2, r3
 800abea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abec:	fb02 f303 	mul.w	r3, r2, r3
 800abf0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800abf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abf8:	461a      	mov	r2, r3
 800abfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abfc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800abfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac00:	895b      	ldrh	r3, [r3, #10]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d008      	beq.n	800ac18 <find_volume+0x224>
 800ac06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac08:	895b      	ldrh	r3, [r3, #10]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac0e:	895b      	ldrh	r3, [r3, #10]
 800ac10:	3b01      	subs	r3, #1
 800ac12:	4013      	ands	r3, r2
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d001      	beq.n	800ac1c <find_volume+0x228>
 800ac18:	230d      	movs	r3, #13
 800ac1a:	e12c      	b.n	800ae76 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ac1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1e:	3330      	adds	r3, #48	@ 0x30
 800ac20:	3311      	adds	r3, #17
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fe fccc 	bl	80095c0 <ld_word>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac2e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ac30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac32:	891b      	ldrh	r3, [r3, #8]
 800ac34:	f003 030f 	and.w	r3, r3, #15
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <find_volume+0x24e>
 800ac3e:	230d      	movs	r3, #13
 800ac40:	e119      	b.n	800ae76 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ac42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac44:	3330      	adds	r3, #48	@ 0x30
 800ac46:	3313      	adds	r3, #19
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7fe fcb9 	bl	80095c0 <ld_word>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ac52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d106      	bne.n	800ac66 <find_volume+0x272>
 800ac58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac5a:	3330      	adds	r3, #48	@ 0x30
 800ac5c:	3320      	adds	r3, #32
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fe fcc6 	bl	80095f0 <ld_dword>
 800ac64:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ac66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac68:	3330      	adds	r3, #48	@ 0x30
 800ac6a:	330e      	adds	r3, #14
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7fe fca7 	bl	80095c0 <ld_word>
 800ac72:	4603      	mov	r3, r0
 800ac74:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ac76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <find_volume+0x28c>
 800ac7c:	230d      	movs	r3, #13
 800ac7e:	e0fa      	b.n	800ae76 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ac80:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ac82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac84:	4413      	add	r3, r2
 800ac86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac88:	8912      	ldrh	r2, [r2, #8]
 800ac8a:	0912      	lsrs	r2, r2, #4
 800ac8c:	b292      	uxth	r2, r2
 800ac8e:	4413      	add	r3, r2
 800ac90:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ac92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d204      	bcs.n	800aca4 <find_volume+0x2b0>
 800ac9a:	230d      	movs	r3, #13
 800ac9c:	e0eb      	b.n	800ae76 <find_volume+0x482>
 800ac9e:	bf00      	nop
 800aca0:	20000988 	.word	0x20000988
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800aca4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800acac:	8952      	ldrh	r2, [r2, #10]
 800acae:	fbb3 f3f2 	udiv	r3, r3, r2
 800acb2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800acb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d101      	bne.n	800acbe <find_volume+0x2ca>
 800acba:	230d      	movs	r3, #13
 800acbc:	e0db      	b.n	800ae76 <find_volume+0x482>
		fmt = FS_FAT32;
 800acbe:	2303      	movs	r3, #3
 800acc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800acc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800acca:	4293      	cmp	r3, r2
 800accc:	d802      	bhi.n	800acd4 <find_volume+0x2e0>
 800acce:	2302      	movs	r3, #2
 800acd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800acd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800acda:	4293      	cmp	r3, r2
 800acdc:	d802      	bhi.n	800ace4 <find_volume+0x2f0>
 800acde:	2301      	movs	r3, #1
 800ace0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ace4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace6:	1c9a      	adds	r2, r3, #2
 800ace8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acea:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800acec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800acf0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800acf2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800acf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acf6:	441a      	add	r2, r3
 800acf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acfa:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800acfc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800acfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad00:	441a      	add	r2, r3
 800ad02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad04:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800ad06:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad0a:	2b03      	cmp	r3, #3
 800ad0c:	d11e      	bne.n	800ad4c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad10:	3330      	adds	r3, #48	@ 0x30
 800ad12:	332a      	adds	r3, #42	@ 0x2a
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fe fc53 	bl	80095c0 <ld_word>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d001      	beq.n	800ad24 <find_volume+0x330>
 800ad20:	230d      	movs	r3, #13
 800ad22:	e0a8      	b.n	800ae76 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ad24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad26:	891b      	ldrh	r3, [r3, #8]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d001      	beq.n	800ad30 <find_volume+0x33c>
 800ad2c:	230d      	movs	r3, #13
 800ad2e:	e0a2      	b.n	800ae76 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ad30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad32:	3330      	adds	r3, #48	@ 0x30
 800ad34:	332c      	adds	r3, #44	@ 0x2c
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fe fc5a 	bl	80095f0 <ld_dword>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad40:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ad42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad44:	695b      	ldr	r3, [r3, #20]
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad4a:	e01f      	b.n	800ad8c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ad4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad4e:	891b      	ldrh	r3, [r3, #8]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d101      	bne.n	800ad58 <find_volume+0x364>
 800ad54:	230d      	movs	r3, #13
 800ad56:	e08e      	b.n	800ae76 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ad58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad5a:	6a1a      	ldr	r2, [r3, #32]
 800ad5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad5e:	441a      	add	r2, r3
 800ad60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad62:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ad64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	d103      	bne.n	800ad74 <find_volume+0x380>
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad6e:	695b      	ldr	r3, [r3, #20]
 800ad70:	005b      	lsls	r3, r3, #1
 800ad72:	e00a      	b.n	800ad8a <find_volume+0x396>
 800ad74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad76:	695a      	ldr	r2, [r3, #20]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	005b      	lsls	r3, r3, #1
 800ad7c:	4413      	add	r3, r2
 800ad7e:	085a      	lsrs	r2, r3, #1
 800ad80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad82:	695b      	ldr	r3, [r3, #20]
 800ad84:	f003 0301 	and.w	r3, r3, #1
 800ad88:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ad8a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad8e:	699a      	ldr	r2, [r3, #24]
 800ad90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad92:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800ad96:	0a5b      	lsrs	r3, r3, #9
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d201      	bcs.n	800ada0 <find_volume+0x3ac>
 800ad9c:	230d      	movs	r3, #13
 800ad9e:	e06a      	b.n	800ae76 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ada0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ada6:	611a      	str	r2, [r3, #16]
 800ada8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adaa:	691a      	ldr	r2, [r3, #16]
 800adac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adae:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800adb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb2:	2280      	movs	r2, #128	@ 0x80
 800adb4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800adb6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800adba:	2b03      	cmp	r3, #3
 800adbc:	d149      	bne.n	800ae52 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800adbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc0:	3330      	adds	r3, #48	@ 0x30
 800adc2:	3330      	adds	r3, #48	@ 0x30
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7fe fbfb 	bl	80095c0 <ld_word>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d140      	bne.n	800ae52 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800add0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800add2:	3301      	adds	r3, #1
 800add4:	4619      	mov	r1, r3
 800add6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800add8:	f7fe fea2 	bl	8009b20 <move_window>
 800addc:	4603      	mov	r3, r0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d137      	bne.n	800ae52 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ade2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade4:	2200      	movs	r2, #0
 800ade6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ade8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adea:	3330      	adds	r3, #48	@ 0x30
 800adec:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7fe fbe5 	bl	80095c0 <ld_word>
 800adf6:	4603      	mov	r3, r0
 800adf8:	461a      	mov	r2, r3
 800adfa:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d127      	bne.n	800ae52 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ae02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae04:	3330      	adds	r3, #48	@ 0x30
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7fe fbf2 	bl	80095f0 <ld_dword>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	4a1c      	ldr	r2, [pc, #112]	@ (800ae80 <find_volume+0x48c>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d11e      	bne.n	800ae52 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ae14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae16:	3330      	adds	r3, #48	@ 0x30
 800ae18:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7fe fbe7 	bl	80095f0 <ld_dword>
 800ae22:	4603      	mov	r3, r0
 800ae24:	4a17      	ldr	r2, [pc, #92]	@ (800ae84 <find_volume+0x490>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d113      	bne.n	800ae52 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ae2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae2c:	3330      	adds	r3, #48	@ 0x30
 800ae2e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7fe fbdc 	bl	80095f0 <ld_dword>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae3c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae40:	3330      	adds	r3, #48	@ 0x30
 800ae42:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fe fbd2 	bl	80095f0 <ld_dword>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae50:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ae52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae54:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ae58:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ae5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ae88 <find_volume+0x494>)
 800ae5c:	881b      	ldrh	r3, [r3, #0]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	b29a      	uxth	r2, r3
 800ae62:	4b09      	ldr	r3, [pc, #36]	@ (800ae88 <find_volume+0x494>)
 800ae64:	801a      	strh	r2, [r3, #0]
 800ae66:	4b08      	ldr	r3, [pc, #32]	@ (800ae88 <find_volume+0x494>)
 800ae68:	881a      	ldrh	r2, [r3, #0]
 800ae6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae6c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ae6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ae70:	f7fe fdee 	bl	8009a50 <clear_lock>
#endif
	return FR_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3758      	adds	r7, #88	@ 0x58
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	41615252 	.word	0x41615252
 800ae84:	61417272 	.word	0x61417272
 800ae88:	2000098c 	.word	0x2000098c

0800ae8c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ae96:	2309      	movs	r3, #9
 800ae98:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d01c      	beq.n	800aeda <validate+0x4e>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d018      	beq.n	800aeda <validate+0x4e>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d013      	beq.n	800aeda <validate+0x4e>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	889a      	ldrh	r2, [r3, #4]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	88db      	ldrh	r3, [r3, #6]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d10c      	bne.n	800aeda <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	785b      	ldrb	r3, [r3, #1]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fe fadc 	bl	8009484 <disk_status>
 800aecc:	4603      	mov	r3, r0
 800aece:	f003 0301 	and.w	r3, r3, #1
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d101      	bne.n	800aeda <validate+0x4e>
			res = FR_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aeda:	7bfb      	ldrb	r3, [r7, #15]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d102      	bne.n	800aee6 <validate+0x5a>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	e000      	b.n	800aee8 <validate+0x5c>
 800aee6:	2300      	movs	r3, #0
 800aee8:	683a      	ldr	r2, [r7, #0]
 800aeea:	6013      	str	r3, [r2, #0]
	return res;
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
	...

0800aef8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b088      	sub	sp, #32
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	4613      	mov	r3, r2
 800af04:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800af0a:	f107 0310 	add.w	r3, r7, #16
 800af0e:	4618      	mov	r0, r3
 800af10:	f7ff fcd5 	bl	800a8be <get_ldnumber>
 800af14:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	da01      	bge.n	800af20 <f_mount+0x28>
 800af1c:	230b      	movs	r3, #11
 800af1e:	e02b      	b.n	800af78 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800af20:	4a17      	ldr	r2, [pc, #92]	@ (800af80 <f_mount+0x88>)
 800af22:	69fb      	ldr	r3, [r7, #28]
 800af24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af28:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d005      	beq.n	800af3c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800af30:	69b8      	ldr	r0, [r7, #24]
 800af32:	f7fe fd8d 	bl	8009a50 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	2200      	movs	r2, #0
 800af3a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d002      	beq.n	800af48 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	490d      	ldr	r1, [pc, #52]	@ (800af80 <f_mount+0x88>)
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d002      	beq.n	800af5e <f_mount+0x66>
 800af58:	79fb      	ldrb	r3, [r7, #7]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d001      	beq.n	800af62 <f_mount+0x6a>
 800af5e:	2300      	movs	r3, #0
 800af60:	e00a      	b.n	800af78 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800af62:	f107 010c 	add.w	r1, r7, #12
 800af66:	f107 0308 	add.w	r3, r7, #8
 800af6a:	2200      	movs	r2, #0
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7ff fd41 	bl	800a9f4 <find_volume>
 800af72:	4603      	mov	r3, r0
 800af74:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800af76:	7dfb      	ldrb	r3, [r7, #23]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3720      	adds	r7, #32
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	20000988 	.word	0x20000988

0800af84 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b098      	sub	sp, #96	@ 0x60
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	4613      	mov	r3, r2
 800af90:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d101      	bne.n	800af9c <f_open+0x18>
 800af98:	2309      	movs	r3, #9
 800af9a:	e1a9      	b.n	800b2f0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800af9c:	79fb      	ldrb	r3, [r7, #7]
 800af9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800afa2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800afa4:	79fa      	ldrb	r2, [r7, #7]
 800afa6:	f107 0110 	add.w	r1, r7, #16
 800afaa:	f107 0308 	add.w	r3, r7, #8
 800afae:	4618      	mov	r0, r3
 800afb0:	f7ff fd20 	bl	800a9f4 <find_volume>
 800afb4:	4603      	mov	r3, r0
 800afb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800afba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f040 818d 	bne.w	800b2de <f_open+0x35a>
		dj.obj.fs = fs;
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800afc8:	68ba      	ldr	r2, [r7, #8]
 800afca:	f107 0314 	add.w	r3, r7, #20
 800afce:	4611      	mov	r1, r2
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7ff fc03 	bl	800a7dc <follow_path>
 800afd6:	4603      	mov	r3, r0
 800afd8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800afdc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d118      	bne.n	800b016 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800afe4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800afe8:	b25b      	sxtb	r3, r3
 800afea:	2b00      	cmp	r3, #0
 800afec:	da03      	bge.n	800aff6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800afee:	2306      	movs	r3, #6
 800aff0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800aff4:	e00f      	b.n	800b016 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aff6:	79fb      	ldrb	r3, [r7, #7]
 800aff8:	2b01      	cmp	r3, #1
 800affa:	bf8c      	ite	hi
 800affc:	2301      	movhi	r3, #1
 800affe:	2300      	movls	r3, #0
 800b000:	b2db      	uxtb	r3, r3
 800b002:	461a      	mov	r2, r3
 800b004:	f107 0314 	add.w	r3, r7, #20
 800b008:	4611      	mov	r1, r2
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7fe fbd8 	bl	80097c0 <chk_lock>
 800b010:	4603      	mov	r3, r0
 800b012:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b016:	79fb      	ldrb	r3, [r7, #7]
 800b018:	f003 031c 	and.w	r3, r3, #28
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d07f      	beq.n	800b120 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b020:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b024:	2b00      	cmp	r3, #0
 800b026:	d017      	beq.n	800b058 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b028:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b02c:	2b04      	cmp	r3, #4
 800b02e:	d10e      	bne.n	800b04e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b030:	f7fe fc22 	bl	8009878 <enq_lock>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d006      	beq.n	800b048 <f_open+0xc4>
 800b03a:	f107 0314 	add.w	r3, r7, #20
 800b03e:	4618      	mov	r0, r3
 800b040:	f7ff fb06 	bl	800a650 <dir_register>
 800b044:	4603      	mov	r3, r0
 800b046:	e000      	b.n	800b04a <f_open+0xc6>
 800b048:	2312      	movs	r3, #18
 800b04a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b04e:	79fb      	ldrb	r3, [r7, #7]
 800b050:	f043 0308 	orr.w	r3, r3, #8
 800b054:	71fb      	strb	r3, [r7, #7]
 800b056:	e010      	b.n	800b07a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b058:	7ebb      	ldrb	r3, [r7, #26]
 800b05a:	f003 0311 	and.w	r3, r3, #17
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d003      	beq.n	800b06a <f_open+0xe6>
					res = FR_DENIED;
 800b062:	2307      	movs	r3, #7
 800b064:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b068:	e007      	b.n	800b07a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b06a:	79fb      	ldrb	r3, [r7, #7]
 800b06c:	f003 0304 	and.w	r3, r3, #4
 800b070:	2b00      	cmp	r3, #0
 800b072:	d002      	beq.n	800b07a <f_open+0xf6>
 800b074:	2308      	movs	r3, #8
 800b076:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b07a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d168      	bne.n	800b154 <f_open+0x1d0>
 800b082:	79fb      	ldrb	r3, [r7, #7]
 800b084:	f003 0308 	and.w	r3, r3, #8
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d063      	beq.n	800b154 <f_open+0x1d0>
				dw = GET_FATTIME();
 800b08c:	f7fd fcc2 	bl	8008a14 <get_fattime>
 800b090:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b094:	330e      	adds	r3, #14
 800b096:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b098:	4618      	mov	r0, r3
 800b09a:	f7fe fae7 	bl	800966c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b09e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0a0:	3316      	adds	r3, #22
 800b0a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7fe fae1 	bl	800966c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b0aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0ac:	330b      	adds	r3, #11
 800b0ae:	2220      	movs	r2, #32
 800b0b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0b6:	4611      	mov	r1, r2
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7ff fa35 	bl	800a528 <ld_clust>
 800b0be:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7ff fa4d 	bl	800a566 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b0cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0ce:	331c      	adds	r3, #28
 800b0d0:	2100      	movs	r1, #0
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7fe faca 	bl	800966c <st_dword>
					fs->wflag = 1;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b0de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d037      	beq.n	800b154 <f_open+0x1d0>
						dw = fs->winsect;
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0e8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b0ea:	f107 0314 	add.w	r3, r7, #20
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7fe ff60 	bl	8009fb8 <remove_chain>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800b0fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b102:	2b00      	cmp	r3, #0
 800b104:	d126      	bne.n	800b154 <f_open+0x1d0>
							res = move_window(fs, dw);
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7fe fd08 	bl	8009b20 <move_window>
 800b110:	4603      	mov	r3, r0
 800b112:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b11a:	3a01      	subs	r2, #1
 800b11c:	60da      	str	r2, [r3, #12]
 800b11e:	e019      	b.n	800b154 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b120:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b124:	2b00      	cmp	r3, #0
 800b126:	d115      	bne.n	800b154 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b128:	7ebb      	ldrb	r3, [r7, #26]
 800b12a:	f003 0310 	and.w	r3, r3, #16
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d003      	beq.n	800b13a <f_open+0x1b6>
					res = FR_NO_FILE;
 800b132:	2304      	movs	r3, #4
 800b134:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b138:	e00c      	b.n	800b154 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b13a:	79fb      	ldrb	r3, [r7, #7]
 800b13c:	f003 0302 	and.w	r3, r3, #2
 800b140:	2b00      	cmp	r3, #0
 800b142:	d007      	beq.n	800b154 <f_open+0x1d0>
 800b144:	7ebb      	ldrb	r3, [r7, #26]
 800b146:	f003 0301 	and.w	r3, r3, #1
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d002      	beq.n	800b154 <f_open+0x1d0>
						res = FR_DENIED;
 800b14e:	2307      	movs	r3, #7
 800b150:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b154:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d126      	bne.n	800b1aa <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b15c:	79fb      	ldrb	r3, [r7, #7]
 800b15e:	f003 0308 	and.w	r3, r3, #8
 800b162:	2b00      	cmp	r3, #0
 800b164:	d003      	beq.n	800b16e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b166:	79fb      	ldrb	r3, [r7, #7]
 800b168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b16c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b176:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b17c:	79fb      	ldrb	r3, [r7, #7]
 800b17e:	2b01      	cmp	r3, #1
 800b180:	bf8c      	ite	hi
 800b182:	2301      	movhi	r3, #1
 800b184:	2300      	movls	r3, #0
 800b186:	b2db      	uxtb	r3, r3
 800b188:	461a      	mov	r2, r3
 800b18a:	f107 0314 	add.w	r3, r7, #20
 800b18e:	4611      	mov	r1, r2
 800b190:	4618      	mov	r0, r3
 800b192:	f7fe fb93 	bl	80098bc <inc_lock>
 800b196:	4602      	mov	r2, r0
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	691b      	ldr	r3, [r3, #16]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d102      	bne.n	800b1aa <f_open+0x226>
 800b1a4:	2302      	movs	r3, #2
 800b1a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b1aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	f040 8095 	bne.w	800b2de <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1b8:	4611      	mov	r1, r2
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7ff f9b4 	bl	800a528 <ld_clust>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b1c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1c8:	331c      	adds	r3, #28
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fe fa10 	bl	80095f0 <ld_dword>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b1dc:	693a      	ldr	r2, [r7, #16]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	88da      	ldrh	r2, [r3, #6]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	79fa      	ldrb	r2, [r7, #7]
 800b1ee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2200      	movs	r2, #0
 800b200:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	3330      	adds	r3, #48	@ 0x30
 800b206:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b20a:	2100      	movs	r1, #0
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fe fa7a 	bl	8009706 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b212:	79fb      	ldrb	r3, [r7, #7]
 800b214:	f003 0320 	and.w	r3, r3, #32
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d060      	beq.n	800b2de <f_open+0x35a>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d05c      	beq.n	800b2de <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	68da      	ldr	r2, [r3, #12]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	895b      	ldrh	r3, [r3, #10]
 800b230:	025b      	lsls	r3, r3, #9
 800b232:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b240:	e016      	b.n	800b270 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b246:	4618      	mov	r0, r3
 800b248:	f7fe fd25 	bl	8009c96 <get_fat>
 800b24c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b24e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b250:	2b01      	cmp	r3, #1
 800b252:	d802      	bhi.n	800b25a <f_open+0x2d6>
 800b254:	2302      	movs	r3, #2
 800b256:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b25a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b25c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b260:	d102      	bne.n	800b268 <f_open+0x2e4>
 800b262:	2301      	movs	r3, #1
 800b264:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b268:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b26a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b26c:	1ad3      	subs	r3, r2, r3
 800b26e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b270:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b274:	2b00      	cmp	r3, #0
 800b276:	d103      	bne.n	800b280 <f_open+0x2fc>
 800b278:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b27a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d8e0      	bhi.n	800b242 <f_open+0x2be>
				}
				fp->clust = clst;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b284:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b286:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d127      	bne.n	800b2de <f_open+0x35a>
 800b28e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b294:	2b00      	cmp	r3, #0
 800b296:	d022      	beq.n	800b2de <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7fe fcdb 	bl	8009c58 <clust2sect>
 800b2a2:	6478      	str	r0, [r7, #68]	@ 0x44
 800b2a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d103      	bne.n	800b2b2 <f_open+0x32e>
						res = FR_INT_ERR;
 800b2aa:	2302      	movs	r3, #2
 800b2ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b2b0:	e015      	b.n	800b2de <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b2b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2b4:	0a5a      	lsrs	r2, r3, #9
 800b2b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2b8:	441a      	add	r2, r3
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	7858      	ldrb	r0, [r3, #1]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6a1a      	ldr	r2, [r3, #32]
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	f7fe f919 	bl	8009504 <disk_read>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d002      	beq.n	800b2de <f_open+0x35a>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b2de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d002      	beq.n	800b2ec <f_open+0x368>
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b2ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3760      	adds	r7, #96	@ 0x60
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b08c      	sub	sp, #48	@ 0x30
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	607a      	str	r2, [r7, #4]
 800b304:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	2200      	movs	r2, #0
 800b30e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f107 0210 	add.w	r2, r7, #16
 800b316:	4611      	mov	r1, r2
 800b318:	4618      	mov	r0, r3
 800b31a:	f7ff fdb7 	bl	800ae8c <validate>
 800b31e:	4603      	mov	r3, r0
 800b320:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b324:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d107      	bne.n	800b33c <f_write+0x44>
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	7d5b      	ldrb	r3, [r3, #21]
 800b330:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b334:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d002      	beq.n	800b342 <f_write+0x4a>
 800b33c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b340:	e14b      	b.n	800b5da <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	7d1b      	ldrb	r3, [r3, #20]
 800b346:	f003 0302 	and.w	r3, r3, #2
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d101      	bne.n	800b352 <f_write+0x5a>
 800b34e:	2307      	movs	r3, #7
 800b350:	e143      	b.n	800b5da <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	699a      	ldr	r2, [r3, #24]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	441a      	add	r2, r3
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	699b      	ldr	r3, [r3, #24]
 800b35e:	429a      	cmp	r2, r3
 800b360:	f080 812d 	bcs.w	800b5be <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	699b      	ldr	r3, [r3, #24]
 800b368:	43db      	mvns	r3, r3
 800b36a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b36c:	e127      	b.n	800b5be <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	699b      	ldr	r3, [r3, #24]
 800b372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b376:	2b00      	cmp	r3, #0
 800b378:	f040 80e3 	bne.w	800b542 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	699b      	ldr	r3, [r3, #24]
 800b380:	0a5b      	lsrs	r3, r3, #9
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	8952      	ldrh	r2, [r2, #10]
 800b386:	3a01      	subs	r2, #1
 800b388:	4013      	ands	r3, r2
 800b38a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d143      	bne.n	800b41a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	699b      	ldr	r3, [r3, #24]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d10c      	bne.n	800b3b4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d11a      	bne.n	800b3dc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fe fe69 	bl	800a082 <create_chain>
 800b3b0:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b3b2:	e013      	b.n	800b3dc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d007      	beq.n	800b3cc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	699b      	ldr	r3, [r3, #24]
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	f7fe fef5 	bl	800a1b2 <clmt_clust>
 800b3c8:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b3ca:	e007      	b.n	800b3dc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	69db      	ldr	r3, [r3, #28]
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	4610      	mov	r0, r2
 800b3d6:	f7fe fe54 	bl	800a082 <create_chain>
 800b3da:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	f000 80f2 	beq.w	800b5c8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d104      	bne.n	800b3f4 <f_write+0xfc>
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2202      	movs	r2, #2
 800b3ee:	755a      	strb	r2, [r3, #21]
 800b3f0:	2302      	movs	r3, #2
 800b3f2:	e0f2      	b.n	800b5da <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3fa:	d104      	bne.n	800b406 <f_write+0x10e>
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2201      	movs	r2, #1
 800b400:	755a      	strb	r2, [r3, #21]
 800b402:	2301      	movs	r3, #1
 800b404:	e0e9      	b.n	800b5da <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b40a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d102      	bne.n	800b41a <f_write+0x122>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b418:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	7d1b      	ldrb	r3, [r3, #20]
 800b41e:	b25b      	sxtb	r3, r3
 800b420:	2b00      	cmp	r3, #0
 800b422:	da18      	bge.n	800b456 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	7858      	ldrb	r0, [r3, #1]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6a1a      	ldr	r2, [r3, #32]
 800b432:	2301      	movs	r3, #1
 800b434:	f7fe f886 	bl	8009544 <disk_write>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d004      	beq.n	800b448 <f_write+0x150>
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2201      	movs	r2, #1
 800b442:	755a      	strb	r2, [r3, #21]
 800b444:	2301      	movs	r3, #1
 800b446:	e0c8      	b.n	800b5da <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	7d1b      	ldrb	r3, [r3, #20]
 800b44c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b450:	b2da      	uxtb	r2, r3
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b456:	693a      	ldr	r2, [r7, #16]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	69db      	ldr	r3, [r3, #28]
 800b45c:	4619      	mov	r1, r3
 800b45e:	4610      	mov	r0, r2
 800b460:	f7fe fbfa 	bl	8009c58 <clust2sect>
 800b464:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d104      	bne.n	800b476 <f_write+0x17e>
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2202      	movs	r2, #2
 800b470:	755a      	strb	r2, [r3, #21]
 800b472:	2302      	movs	r3, #2
 800b474:	e0b1      	b.n	800b5da <f_write+0x2e2>
			sect += csect;
 800b476:	697a      	ldr	r2, [r7, #20]
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	4413      	add	r3, r2
 800b47c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	0a5b      	lsrs	r3, r3, #9
 800b482:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b484:	6a3b      	ldr	r3, [r7, #32]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d03c      	beq.n	800b504 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b48a:	69ba      	ldr	r2, [r7, #24]
 800b48c:	6a3b      	ldr	r3, [r7, #32]
 800b48e:	4413      	add	r3, r2
 800b490:	693a      	ldr	r2, [r7, #16]
 800b492:	8952      	ldrh	r2, [r2, #10]
 800b494:	4293      	cmp	r3, r2
 800b496:	d905      	bls.n	800b4a4 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	895b      	ldrh	r3, [r3, #10]
 800b49c:	461a      	mov	r2, r3
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	1ad3      	subs	r3, r2, r3
 800b4a2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	7858      	ldrb	r0, [r3, #1]
 800b4a8:	6a3b      	ldr	r3, [r7, #32]
 800b4aa:	697a      	ldr	r2, [r7, #20]
 800b4ac:	69f9      	ldr	r1, [r7, #28]
 800b4ae:	f7fe f849 	bl	8009544 <disk_write>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d004      	beq.n	800b4c2 <f_write+0x1ca>
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	755a      	strb	r2, [r3, #21]
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e08b      	b.n	800b5da <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	6a1a      	ldr	r2, [r3, #32]
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	1ad3      	subs	r3, r2, r3
 800b4ca:	6a3a      	ldr	r2, [r7, #32]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d915      	bls.n	800b4fc <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	6a1a      	ldr	r2, [r3, #32]
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	1ad3      	subs	r3, r2, r3
 800b4de:	025b      	lsls	r3, r3, #9
 800b4e0:	69fa      	ldr	r2, [r7, #28]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	f7fe f8eb 	bl	80096c4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	7d1b      	ldrb	r3, [r3, #20]
 800b4f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4f6:	b2da      	uxtb	r2, r3
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b4fc:	6a3b      	ldr	r3, [r7, #32]
 800b4fe:	025b      	lsls	r3, r3, #9
 800b500:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800b502:	e03f      	b.n	800b584 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6a1b      	ldr	r3, [r3, #32]
 800b508:	697a      	ldr	r2, [r7, #20]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d016      	beq.n	800b53c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	699a      	ldr	r2, [r3, #24]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b516:	429a      	cmp	r2, r3
 800b518:	d210      	bcs.n	800b53c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	7858      	ldrb	r0, [r3, #1]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b524:	2301      	movs	r3, #1
 800b526:	697a      	ldr	r2, [r7, #20]
 800b528:	f7fd ffec 	bl	8009504 <disk_read>
 800b52c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d004      	beq.n	800b53c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2201      	movs	r2, #1
 800b536:	755a      	strb	r2, [r3, #21]
 800b538:	2301      	movs	r3, #1
 800b53a:	e04e      	b.n	800b5da <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	697a      	ldr	r2, [r7, #20]
 800b540:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	699b      	ldr	r3, [r3, #24]
 800b546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b54a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b54e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	429a      	cmp	r2, r3
 800b556:	d901      	bls.n	800b55c <f_write+0x264>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	699b      	ldr	r3, [r3, #24]
 800b566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56a:	4413      	add	r3, r2
 800b56c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b56e:	69f9      	ldr	r1, [r7, #28]
 800b570:	4618      	mov	r0, r3
 800b572:	f7fe f8a7 	bl	80096c4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	7d1b      	ldrb	r3, [r3, #20]
 800b57a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b57e:	b2da      	uxtb	r2, r3
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b584:	69fa      	ldr	r2, [r7, #28]
 800b586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b588:	4413      	add	r3, r2
 800b58a:	61fb      	str	r3, [r7, #28]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	699a      	ldr	r2, [r3, #24]
 800b590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b592:	441a      	add	r2, r3
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	619a      	str	r2, [r3, #24]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	68da      	ldr	r2, [r3, #12]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	699b      	ldr	r3, [r3, #24]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	bf38      	it	cc
 800b5a4:	461a      	movcc	r2, r3
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	60da      	str	r2, [r3, #12]
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b0:	441a      	add	r2, r3
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	601a      	str	r2, [r3, #0]
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f47f aed4 	bne.w	800b36e <f_write+0x76>
 800b5c6:	e000      	b.n	800b5ca <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b5c8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	7d1b      	ldrb	r3, [r3, #20]
 800b5ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5d2:	b2da      	uxtb	r2, r3
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3730      	adds	r7, #48	@ 0x30
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b086      	sub	sp, #24
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f107 0208 	add.w	r2, r7, #8
 800b5f0:	4611      	mov	r1, r2
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7ff fc4a 	bl	800ae8c <validate>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b5fc:	7dfb      	ldrb	r3, [r7, #23]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d168      	bne.n	800b6d4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	7d1b      	ldrb	r3, [r3, #20]
 800b606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d062      	beq.n	800b6d4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	7d1b      	ldrb	r3, [r3, #20]
 800b612:	b25b      	sxtb	r3, r3
 800b614:	2b00      	cmp	r3, #0
 800b616:	da15      	bge.n	800b644 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	7858      	ldrb	r0, [r3, #1]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a1a      	ldr	r2, [r3, #32]
 800b626:	2301      	movs	r3, #1
 800b628:	f7fd ff8c 	bl	8009544 <disk_write>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <f_sync+0x54>
 800b632:	2301      	movs	r3, #1
 800b634:	e04f      	b.n	800b6d6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	7d1b      	ldrb	r3, [r3, #20]
 800b63a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b63e:	b2da      	uxtb	r2, r3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b644:	f7fd f9e6 	bl	8008a14 <get_fattime>
 800b648:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b650:	4619      	mov	r1, r3
 800b652:	4610      	mov	r0, r2
 800b654:	f7fe fa64 	bl	8009b20 <move_window>
 800b658:	4603      	mov	r3, r0
 800b65a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b65c:	7dfb      	ldrb	r3, [r7, #23]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d138      	bne.n	800b6d4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b666:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	330b      	adds	r3, #11
 800b66c:	781a      	ldrb	r2, [r3, #0]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	330b      	adds	r3, #11
 800b672:	f042 0220 	orr.w	r2, r2, #32
 800b676:	b2d2      	uxtb	r2, r2
 800b678:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6818      	ldr	r0, [r3, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	461a      	mov	r2, r3
 800b684:	68f9      	ldr	r1, [r7, #12]
 800b686:	f7fe ff6e 	bl	800a566 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f103 021c 	add.w	r2, r3, #28
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	4619      	mov	r1, r3
 800b696:	4610      	mov	r0, r2
 800b698:	f7fd ffe8 	bl	800966c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	3316      	adds	r3, #22
 800b6a0:	6939      	ldr	r1, [r7, #16]
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7fd ffe2 	bl	800966c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	3312      	adds	r3, #18
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fd ffc1 	bl	8009636 <st_word>
					fs->wflag = 1;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fe fa5d 	bl	8009b7c <sync_fs>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	7d1b      	ldrb	r3, [r3, #20]
 800b6ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6ce:	b2da      	uxtb	r2, r3
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b6d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3718      	adds	r7, #24
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b084      	sub	sp, #16
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f7ff ff7b 	bl	800b5e2 <f_sync>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b6f0:	7bfb      	ldrb	r3, [r7, #15]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d118      	bne.n	800b728 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f107 0208 	add.w	r2, r7, #8
 800b6fc:	4611      	mov	r1, r2
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7ff fbc4 	bl	800ae8c <validate>
 800b704:	4603      	mov	r3, r0
 800b706:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b708:	7bfb      	ldrb	r3, [r7, #15]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d10c      	bne.n	800b728 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	691b      	ldr	r3, [r3, #16]
 800b712:	4618      	mov	r0, r3
 800b714:	f7fe f960 	bl	80099d8 <dec_lock>
 800b718:	4603      	mov	r3, r0
 800b71a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b71c:	7bfb      	ldrb	r3, [r7, #15]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d102      	bne.n	800b728 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b728:	7bfb      	ldrb	r3, [r7, #15]
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3710      	adds	r7, #16
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
	...

0800b734 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b734:	b480      	push	{r7}
 800b736:	b087      	sub	sp, #28
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	4613      	mov	r3, r2
 800b740:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b742:	2301      	movs	r3, #1
 800b744:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b746:	2300      	movs	r3, #0
 800b748:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b74a:	4b1f      	ldr	r3, [pc, #124]	@ (800b7c8 <FATFS_LinkDriverEx+0x94>)
 800b74c:	7a5b      	ldrb	r3, [r3, #9]
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	2b00      	cmp	r3, #0
 800b752:	d131      	bne.n	800b7b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b754:	4b1c      	ldr	r3, [pc, #112]	@ (800b7c8 <FATFS_LinkDriverEx+0x94>)
 800b756:	7a5b      	ldrb	r3, [r3, #9]
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	461a      	mov	r2, r3
 800b75c:	4b1a      	ldr	r3, [pc, #104]	@ (800b7c8 <FATFS_LinkDriverEx+0x94>)
 800b75e:	2100      	movs	r1, #0
 800b760:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b762:	4b19      	ldr	r3, [pc, #100]	@ (800b7c8 <FATFS_LinkDriverEx+0x94>)
 800b764:	7a5b      	ldrb	r3, [r3, #9]
 800b766:	b2db      	uxtb	r3, r3
 800b768:	4a17      	ldr	r2, [pc, #92]	@ (800b7c8 <FATFS_LinkDriverEx+0x94>)
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	4413      	add	r3, r2
 800b76e:	68fa      	ldr	r2, [r7, #12]
 800b770:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b772:	4b15      	ldr	r3, [pc, #84]	@ (800b7c8 <FATFS_LinkDriverEx+0x94>)
 800b774:	7a5b      	ldrb	r3, [r3, #9]
 800b776:	b2db      	uxtb	r3, r3
 800b778:	461a      	mov	r2, r3
 800b77a:	4b13      	ldr	r3, [pc, #76]	@ (800b7c8 <FATFS_LinkDriverEx+0x94>)
 800b77c:	4413      	add	r3, r2
 800b77e:	79fa      	ldrb	r2, [r7, #7]
 800b780:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b782:	4b11      	ldr	r3, [pc, #68]	@ (800b7c8 <FATFS_LinkDriverEx+0x94>)
 800b784:	7a5b      	ldrb	r3, [r3, #9]
 800b786:	b2db      	uxtb	r3, r3
 800b788:	1c5a      	adds	r2, r3, #1
 800b78a:	b2d1      	uxtb	r1, r2
 800b78c:	4a0e      	ldr	r2, [pc, #56]	@ (800b7c8 <FATFS_LinkDriverEx+0x94>)
 800b78e:	7251      	strb	r1, [r2, #9]
 800b790:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b792:	7dbb      	ldrb	r3, [r7, #22]
 800b794:	3330      	adds	r3, #48	@ 0x30
 800b796:	b2da      	uxtb	r2, r3
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	223a      	movs	r2, #58	@ 0x3a
 800b7a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	3302      	adds	r3, #2
 800b7a8:	222f      	movs	r2, #47	@ 0x2f
 800b7aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	3303      	adds	r3, #3
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b7b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	371c      	adds	r7, #28
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop
 800b7c8:	200009b0 	.word	0x200009b0

0800b7cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	6839      	ldr	r1, [r7, #0]
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7ff ffaa 	bl	800b734 <FATFS_LinkDriverEx>
 800b7e0:	4603      	mov	r3, r0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b7ea:	b480      	push	{r7}
 800b7ec:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800b7ee:	bf00      	nop
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7fe:	f3ef 8305 	mrs	r3, IPSR
 800b802:	60bb      	str	r3, [r7, #8]
  return(result);
 800b804:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b806:	2b00      	cmp	r3, #0
 800b808:	d10f      	bne.n	800b82a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b80a:	f3ef 8310 	mrs	r3, PRIMASK
 800b80e:	607b      	str	r3, [r7, #4]
  return(result);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d105      	bne.n	800b822 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b816:	f3ef 8311 	mrs	r3, BASEPRI
 800b81a:	603b      	str	r3, [r7, #0]
  return(result);
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d007      	beq.n	800b832 <osKernelInitialize+0x3a>
 800b822:	4b0e      	ldr	r3, [pc, #56]	@ (800b85c <osKernelInitialize+0x64>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b02      	cmp	r3, #2
 800b828:	d103      	bne.n	800b832 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b82a:	f06f 0305 	mvn.w	r3, #5
 800b82e:	60fb      	str	r3, [r7, #12]
 800b830:	e00c      	b.n	800b84c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b832:	4b0a      	ldr	r3, [pc, #40]	@ (800b85c <osKernelInitialize+0x64>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d105      	bne.n	800b846 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b83a:	4b08      	ldr	r3, [pc, #32]	@ (800b85c <osKernelInitialize+0x64>)
 800b83c:	2201      	movs	r2, #1
 800b83e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b840:	2300      	movs	r3, #0
 800b842:	60fb      	str	r3, [r7, #12]
 800b844:	e002      	b.n	800b84c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b846:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b84a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b84c:	68fb      	ldr	r3, [r7, #12]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3714      	adds	r7, #20
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	200009bc 	.word	0x200009bc

0800b860 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b866:	f3ef 8305 	mrs	r3, IPSR
 800b86a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b86c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10f      	bne.n	800b892 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b872:	f3ef 8310 	mrs	r3, PRIMASK
 800b876:	607b      	str	r3, [r7, #4]
  return(result);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d105      	bne.n	800b88a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b87e:	f3ef 8311 	mrs	r3, BASEPRI
 800b882:	603b      	str	r3, [r7, #0]
  return(result);
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d007      	beq.n	800b89a <osKernelStart+0x3a>
 800b88a:	4b0f      	ldr	r3, [pc, #60]	@ (800b8c8 <osKernelStart+0x68>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b02      	cmp	r3, #2
 800b890:	d103      	bne.n	800b89a <osKernelStart+0x3a>
    stat = osErrorISR;
 800b892:	f06f 0305 	mvn.w	r3, #5
 800b896:	60fb      	str	r3, [r7, #12]
 800b898:	e010      	b.n	800b8bc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b89a:	4b0b      	ldr	r3, [pc, #44]	@ (800b8c8 <osKernelStart+0x68>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d109      	bne.n	800b8b6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b8a2:	f7ff ffa2 	bl	800b7ea <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b8a6:	4b08      	ldr	r3, [pc, #32]	@ (800b8c8 <osKernelStart+0x68>)
 800b8a8:	2202      	movs	r2, #2
 800b8aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b8ac:	f001 fe4e 	bl	800d54c <vTaskStartScheduler>
      stat = osOK;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	60fb      	str	r3, [r7, #12]
 800b8b4:	e002      	b.n	800b8bc <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b8b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b8ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	200009bc 	.word	0x200009bc

0800b8cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b090      	sub	sp, #64	@ 0x40
 800b8d0:	af04      	add	r7, sp, #16
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8dc:	f3ef 8305 	mrs	r3, IPSR
 800b8e0:	61fb      	str	r3, [r7, #28]
  return(result);
 800b8e2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f040 808f 	bne.w	800ba08 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8ea:	f3ef 8310 	mrs	r3, PRIMASK
 800b8ee:	61bb      	str	r3, [r7, #24]
  return(result);
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d105      	bne.n	800b902 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b8f6:	f3ef 8311 	mrs	r3, BASEPRI
 800b8fa:	617b      	str	r3, [r7, #20]
  return(result);
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d003      	beq.n	800b90a <osThreadNew+0x3e>
 800b902:	4b44      	ldr	r3, [pc, #272]	@ (800ba14 <osThreadNew+0x148>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2b02      	cmp	r3, #2
 800b908:	d07e      	beq.n	800ba08 <osThreadNew+0x13c>
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d07b      	beq.n	800ba08 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800b910:	2380      	movs	r3, #128	@ 0x80
 800b912:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b914:	2318      	movs	r3, #24
 800b916:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800b918:	2300      	movs	r3, #0
 800b91a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800b91c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b920:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d045      	beq.n	800b9b4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d002      	beq.n	800b936 <osThreadNew+0x6a>
        name = attr->name;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	699b      	ldr	r3, [r3, #24]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d002      	beq.n	800b944 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b946:	2b00      	cmp	r3, #0
 800b948:	d008      	beq.n	800b95c <osThreadNew+0x90>
 800b94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94c:	2b38      	cmp	r3, #56	@ 0x38
 800b94e:	d805      	bhi.n	800b95c <osThreadNew+0x90>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	f003 0301 	and.w	r3, r3, #1
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d001      	beq.n	800b960 <osThreadNew+0x94>
        return (NULL);
 800b95c:	2300      	movs	r3, #0
 800b95e:	e054      	b.n	800ba0a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	695b      	ldr	r3, [r3, #20]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d003      	beq.n	800b970 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	695b      	ldr	r3, [r3, #20]
 800b96c:	089b      	lsrs	r3, r3, #2
 800b96e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00e      	beq.n	800b996 <osThreadNew+0xca>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	2ba7      	cmp	r3, #167	@ 0xa7
 800b97e:	d90a      	bls.n	800b996 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b984:	2b00      	cmp	r3, #0
 800b986:	d006      	beq.n	800b996 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	695b      	ldr	r3, [r3, #20]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d002      	beq.n	800b996 <osThreadNew+0xca>
        mem = 1;
 800b990:	2301      	movs	r3, #1
 800b992:	623b      	str	r3, [r7, #32]
 800b994:	e010      	b.n	800b9b8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10c      	bne.n	800b9b8 <osThreadNew+0xec>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d108      	bne.n	800b9b8 <osThreadNew+0xec>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d104      	bne.n	800b9b8 <osThreadNew+0xec>
          mem = 0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	623b      	str	r3, [r7, #32]
 800b9b2:	e001      	b.n	800b9b8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b9b8:	6a3b      	ldr	r3, [r7, #32]
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d110      	bne.n	800b9e0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b9c6:	9202      	str	r2, [sp, #8]
 800b9c8:	9301      	str	r3, [sp, #4]
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f001 fbbb 	bl	800d150 <xTaskCreateStatic>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	613b      	str	r3, [r7, #16]
 800b9de:	e013      	b.n	800ba08 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800b9e0:	6a3b      	ldr	r3, [r7, #32]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d110      	bne.n	800ba08 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	f107 0310 	add.w	r3, r7, #16
 800b9ee:	9301      	str	r3, [sp, #4]
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f001 fc0f 	bl	800d21c <xTaskCreate>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d001      	beq.n	800ba08 <osThreadNew+0x13c>
          hTask = NULL;
 800ba04:	2300      	movs	r3, #0
 800ba06:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ba08:	693b      	ldr	r3, [r7, #16]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3730      	adds	r7, #48	@ 0x30
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	200009bc 	.word	0x200009bc

0800ba18 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b086      	sub	sp, #24
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba20:	f3ef 8305 	mrs	r3, IPSR
 800ba24:	613b      	str	r3, [r7, #16]
  return(result);
 800ba26:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10f      	bne.n	800ba4c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba2c:	f3ef 8310 	mrs	r3, PRIMASK
 800ba30:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d105      	bne.n	800ba44 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ba38:	f3ef 8311 	mrs	r3, BASEPRI
 800ba3c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d007      	beq.n	800ba54 <osDelay+0x3c>
 800ba44:	4b0a      	ldr	r3, [pc, #40]	@ (800ba70 <osDelay+0x58>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	d103      	bne.n	800ba54 <osDelay+0x3c>
    stat = osErrorISR;
 800ba4c:	f06f 0305 	mvn.w	r3, #5
 800ba50:	617b      	str	r3, [r7, #20]
 800ba52:	e007      	b.n	800ba64 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ba54:	2300      	movs	r3, #0
 800ba56:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d002      	beq.n	800ba64 <osDelay+0x4c>
      vTaskDelay(ticks);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f001 fd3c 	bl	800d4dc <vTaskDelay>
    }
  }

  return (stat);
 800ba64:	697b      	ldr	r3, [r7, #20]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3718      	adds	r7, #24
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	200009bc 	.word	0x200009bc

0800ba74 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b08a      	sub	sp, #40	@ 0x28
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba80:	f3ef 8305 	mrs	r3, IPSR
 800ba84:	613b      	str	r3, [r7, #16]
  return(result);
 800ba86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f040 8085 	bne.w	800bb98 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba8e:	f3ef 8310 	mrs	r3, PRIMASK
 800ba92:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d105      	bne.n	800baa6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ba9a:	f3ef 8311 	mrs	r3, BASEPRI
 800ba9e:	60bb      	str	r3, [r7, #8]
  return(result);
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d003      	beq.n	800baae <osMutexNew+0x3a>
 800baa6:	4b3f      	ldr	r3, [pc, #252]	@ (800bba4 <osMutexNew+0x130>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2b02      	cmp	r3, #2
 800baac:	d074      	beq.n	800bb98 <osMutexNew+0x124>
    if (attr != NULL) {
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d003      	beq.n	800babc <osMutexNew+0x48>
      type = attr->attr_bits;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	623b      	str	r3, [r7, #32]
 800baba:	e001      	b.n	800bac0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800babc:	2300      	movs	r3, #0
 800babe:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800bac0:	6a3b      	ldr	r3, [r7, #32]
 800bac2:	f003 0301 	and.w	r3, r3, #1
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d002      	beq.n	800bad0 <osMutexNew+0x5c>
      rmtx = 1U;
 800baca:	2301      	movs	r3, #1
 800bacc:	61fb      	str	r3, [r7, #28]
 800bace:	e001      	b.n	800bad4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800bad0:	2300      	movs	r3, #0
 800bad2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800bad4:	6a3b      	ldr	r3, [r7, #32]
 800bad6:	f003 0308 	and.w	r3, r3, #8
 800bada:	2b00      	cmp	r3, #0
 800badc:	d15c      	bne.n	800bb98 <osMutexNew+0x124>
      mem = -1;
 800bade:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bae2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d015      	beq.n	800bb16 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	689b      	ldr	r3, [r3, #8]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d006      	beq.n	800bb00 <osMutexNew+0x8c>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	2b4f      	cmp	r3, #79	@ 0x4f
 800baf8:	d902      	bls.n	800bb00 <osMutexNew+0x8c>
          mem = 1;
 800bafa:	2301      	movs	r3, #1
 800bafc:	61bb      	str	r3, [r7, #24]
 800bafe:	e00c      	b.n	800bb1a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d108      	bne.n	800bb1a <osMutexNew+0xa6>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d104      	bne.n	800bb1a <osMutexNew+0xa6>
            mem = 0;
 800bb10:	2300      	movs	r3, #0
 800bb12:	61bb      	str	r3, [r7, #24]
 800bb14:	e001      	b.n	800bb1a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d112      	bne.n	800bb46 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d007      	beq.n	800bb36 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	2004      	movs	r0, #4
 800bb2e:	f000 fcc8 	bl	800c4c2 <xQueueCreateMutexStatic>
 800bb32:	6278      	str	r0, [r7, #36]	@ 0x24
 800bb34:	e016      	b.n	800bb64 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	2001      	movs	r0, #1
 800bb3e:	f000 fcc0 	bl	800c4c2 <xQueueCreateMutexStatic>
 800bb42:	6278      	str	r0, [r7, #36]	@ 0x24
 800bb44:	e00e      	b.n	800bb64 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10b      	bne.n	800bb64 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d004      	beq.n	800bb5c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800bb52:	2004      	movs	r0, #4
 800bb54:	f000 fc9d 	bl	800c492 <xQueueCreateMutex>
 800bb58:	6278      	str	r0, [r7, #36]	@ 0x24
 800bb5a:	e003      	b.n	800bb64 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800bb5c:	2001      	movs	r0, #1
 800bb5e:	f000 fc98 	bl	800c492 <xQueueCreateMutex>
 800bb62:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800bb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d00c      	beq.n	800bb84 <osMutexNew+0x110>
        if (attr != NULL) {
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d003      	beq.n	800bb78 <osMutexNew+0x104>
          name = attr->name;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	617b      	str	r3, [r7, #20]
 800bb76:	e001      	b.n	800bb7c <osMutexNew+0x108>
        } else {
          name = NULL;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800bb7c:	6979      	ldr	r1, [r7, #20]
 800bb7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bb80:	f001 fa88 	bl	800d094 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800bb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d006      	beq.n	800bb98 <osMutexNew+0x124>
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d003      	beq.n	800bb98 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800bb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb92:	f043 0301 	orr.w	r3, r3, #1
 800bb96:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800bb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3728      	adds	r7, #40	@ 0x28
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	200009bc 	.word	0x200009bc

0800bba8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b088      	sub	sp, #32
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f023 0301 	bic.w	r3, r3, #1
 800bbb8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f003 0301 	and.w	r3, r3, #1
 800bbc0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbc6:	f3ef 8305 	mrs	r3, IPSR
 800bbca:	613b      	str	r3, [r7, #16]
  return(result);
 800bbcc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d10f      	bne.n	800bbf2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbd2:	f3ef 8310 	mrs	r3, PRIMASK
 800bbd6:	60fb      	str	r3, [r7, #12]
  return(result);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d105      	bne.n	800bbea <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bbde:	f3ef 8311 	mrs	r3, BASEPRI
 800bbe2:	60bb      	str	r3, [r7, #8]
  return(result);
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d007      	beq.n	800bbfa <osMutexAcquire+0x52>
 800bbea:	4b1d      	ldr	r3, [pc, #116]	@ (800bc60 <osMutexAcquire+0xb8>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2b02      	cmp	r3, #2
 800bbf0:	d103      	bne.n	800bbfa <osMutexAcquire+0x52>
    stat = osErrorISR;
 800bbf2:	f06f 0305 	mvn.w	r3, #5
 800bbf6:	61fb      	str	r3, [r7, #28]
 800bbf8:	e02c      	b.n	800bc54 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d103      	bne.n	800bc08 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800bc00:	f06f 0303 	mvn.w	r3, #3
 800bc04:	61fb      	str	r3, [r7, #28]
 800bc06:	e025      	b.n	800bc54 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d011      	beq.n	800bc32 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800bc0e:	6839      	ldr	r1, [r7, #0]
 800bc10:	69b8      	ldr	r0, [r7, #24]
 800bc12:	f000 fca8 	bl	800c566 <xQueueTakeMutexRecursive>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d01b      	beq.n	800bc54 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d003      	beq.n	800bc2a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800bc22:	f06f 0301 	mvn.w	r3, #1
 800bc26:	61fb      	str	r3, [r7, #28]
 800bc28:	e014      	b.n	800bc54 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800bc2a:	f06f 0302 	mvn.w	r3, #2
 800bc2e:	61fb      	str	r3, [r7, #28]
 800bc30:	e010      	b.n	800bc54 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800bc32:	6839      	ldr	r1, [r7, #0]
 800bc34:	69b8      	ldr	r0, [r7, #24]
 800bc36:	f000 ff65 	bl	800cb04 <xQueueSemaphoreTake>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d009      	beq.n	800bc54 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d003      	beq.n	800bc4e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800bc46:	f06f 0301 	mvn.w	r3, #1
 800bc4a:	61fb      	str	r3, [r7, #28]
 800bc4c:	e002      	b.n	800bc54 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800bc4e:	f06f 0302 	mvn.w	r3, #2
 800bc52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bc54:	69fb      	ldr	r3, [r7, #28]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3720      	adds	r7, #32
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	200009bc 	.word	0x200009bc

0800bc64 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f023 0301 	bic.w	r3, r3, #1
 800bc72:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f003 0301 	and.w	r3, r3, #1
 800bc7a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc80:	f3ef 8305 	mrs	r3, IPSR
 800bc84:	613b      	str	r3, [r7, #16]
  return(result);
 800bc86:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10f      	bne.n	800bcac <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc8c:	f3ef 8310 	mrs	r3, PRIMASK
 800bc90:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d105      	bne.n	800bca4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bc98:	f3ef 8311 	mrs	r3, BASEPRI
 800bc9c:	60bb      	str	r3, [r7, #8]
  return(result);
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d007      	beq.n	800bcb4 <osMutexRelease+0x50>
 800bca4:	4b16      	ldr	r3, [pc, #88]	@ (800bd00 <osMutexRelease+0x9c>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	2b02      	cmp	r3, #2
 800bcaa:	d103      	bne.n	800bcb4 <osMutexRelease+0x50>
    stat = osErrorISR;
 800bcac:	f06f 0305 	mvn.w	r3, #5
 800bcb0:	61fb      	str	r3, [r7, #28]
 800bcb2:	e01f      	b.n	800bcf4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d103      	bne.n	800bcc2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800bcba:	f06f 0303 	mvn.w	r3, #3
 800bcbe:	61fb      	str	r3, [r7, #28]
 800bcc0:	e018      	b.n	800bcf4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d009      	beq.n	800bcdc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800bcc8:	69b8      	ldr	r0, [r7, #24]
 800bcca:	f000 fc15 	bl	800c4f8 <xQueueGiveMutexRecursive>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d00f      	beq.n	800bcf4 <osMutexRelease+0x90>
        stat = osErrorResource;
 800bcd4:	f06f 0302 	mvn.w	r3, #2
 800bcd8:	61fb      	str	r3, [r7, #28]
 800bcda:	e00b      	b.n	800bcf4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800bcdc:	2300      	movs	r3, #0
 800bcde:	2200      	movs	r2, #0
 800bce0:	2100      	movs	r1, #0
 800bce2:	69b8      	ldr	r0, [r7, #24]
 800bce4:	f000 fc78 	bl	800c5d8 <xQueueGenericSend>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d002      	beq.n	800bcf4 <osMutexRelease+0x90>
        stat = osErrorResource;
 800bcee:	f06f 0302 	mvn.w	r3, #2
 800bcf2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800bcf4:	69fb      	ldr	r3, [r7, #28]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3720      	adds	r7, #32
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	200009bc 	.word	0x200009bc

0800bd04 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b08c      	sub	sp, #48	@ 0x30
 800bd08:	af02      	add	r7, sp, #8
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bd10:	2300      	movs	r3, #0
 800bd12:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd14:	f3ef 8305 	mrs	r3, IPSR
 800bd18:	61bb      	str	r3, [r7, #24]
  return(result);
 800bd1a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d16f      	bne.n	800be00 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd20:	f3ef 8310 	mrs	r3, PRIMASK
 800bd24:	617b      	str	r3, [r7, #20]
  return(result);
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d105      	bne.n	800bd38 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bd2c:	f3ef 8311 	mrs	r3, BASEPRI
 800bd30:	613b      	str	r3, [r7, #16]
  return(result);
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d003      	beq.n	800bd40 <osMessageQueueNew+0x3c>
 800bd38:	4b34      	ldr	r3, [pc, #208]	@ (800be0c <osMessageQueueNew+0x108>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	d05f      	beq.n	800be00 <osMessageQueueNew+0xfc>
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d05c      	beq.n	800be00 <osMessageQueueNew+0xfc>
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d059      	beq.n	800be00 <osMessageQueueNew+0xfc>
    mem = -1;
 800bd4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bd50:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d029      	beq.n	800bdac <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	689b      	ldr	r3, [r3, #8]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d012      	beq.n	800bd86 <osMessageQueueNew+0x82>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	68db      	ldr	r3, [r3, #12]
 800bd64:	2b4f      	cmp	r3, #79	@ 0x4f
 800bd66:	d90e      	bls.n	800bd86 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d00a      	beq.n	800bd86 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	695a      	ldr	r2, [r3, #20]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	68b9      	ldr	r1, [r7, #8]
 800bd78:	fb01 f303 	mul.w	r3, r1, r3
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d302      	bcc.n	800bd86 <osMessageQueueNew+0x82>
        mem = 1;
 800bd80:	2301      	movs	r3, #1
 800bd82:	623b      	str	r3, [r7, #32]
 800bd84:	e014      	b.n	800bdb0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d110      	bne.n	800bdb0 <osMessageQueueNew+0xac>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d10c      	bne.n	800bdb0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d108      	bne.n	800bdb0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	695b      	ldr	r3, [r3, #20]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d104      	bne.n	800bdb0 <osMessageQueueNew+0xac>
          mem = 0;
 800bda6:	2300      	movs	r3, #0
 800bda8:	623b      	str	r3, [r7, #32]
 800bdaa:	e001      	b.n	800bdb0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800bdac:	2300      	movs	r3, #0
 800bdae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800bdb0:	6a3b      	ldr	r3, [r7, #32]
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d10b      	bne.n	800bdce <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	691a      	ldr	r2, [r3, #16]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	689b      	ldr	r3, [r3, #8]
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	9100      	str	r1, [sp, #0]
 800bdc2:	68b9      	ldr	r1, [r7, #8]
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f000 fa5d 	bl	800c284 <xQueueGenericCreateStatic>
 800bdca:	6278      	str	r0, [r7, #36]	@ 0x24
 800bdcc:	e008      	b.n	800bde0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800bdce:	6a3b      	ldr	r3, [r7, #32]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d105      	bne.n	800bde0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	68b9      	ldr	r1, [r7, #8]
 800bdd8:	68f8      	ldr	r0, [r7, #12]
 800bdda:	f000 fada 	bl	800c392 <xQueueGenericCreate>
 800bdde:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00c      	beq.n	800be00 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d003      	beq.n	800bdf4 <osMessageQueueNew+0xf0>
        name = attr->name;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	61fb      	str	r3, [r7, #28]
 800bdf2:	e001      	b.n	800bdf8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800bdf8:	69f9      	ldr	r1, [r7, #28]
 800bdfa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bdfc:	f001 f94a 	bl	800d094 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800be00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800be02:	4618      	mov	r0, r3
 800be04:	3728      	adds	r7, #40	@ 0x28
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	200009bc 	.word	0x200009bc

0800be10 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800be10:	b580      	push	{r7, lr}
 800be12:	b08a      	sub	sp, #40	@ 0x28
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	603b      	str	r3, [r7, #0]
 800be1c:	4613      	mov	r3, r2
 800be1e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800be24:	2300      	movs	r3, #0
 800be26:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be28:	f3ef 8305 	mrs	r3, IPSR
 800be2c:	61fb      	str	r3, [r7, #28]
  return(result);
 800be2e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10f      	bne.n	800be54 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be34:	f3ef 8310 	mrs	r3, PRIMASK
 800be38:	61bb      	str	r3, [r7, #24]
  return(result);
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d105      	bne.n	800be4c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800be40:	f3ef 8311 	mrs	r3, BASEPRI
 800be44:	617b      	str	r3, [r7, #20]
  return(result);
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d02c      	beq.n	800bea6 <osMessageQueuePut+0x96>
 800be4c:	4b28      	ldr	r3, [pc, #160]	@ (800bef0 <osMessageQueuePut+0xe0>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b02      	cmp	r3, #2
 800be52:	d128      	bne.n	800bea6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800be54:	6a3b      	ldr	r3, [r7, #32]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d005      	beq.n	800be66 <osMessageQueuePut+0x56>
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d002      	beq.n	800be66 <osMessageQueuePut+0x56>
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d003      	beq.n	800be6e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800be66:	f06f 0303 	mvn.w	r3, #3
 800be6a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800be6c:	e039      	b.n	800bee2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800be6e:	2300      	movs	r3, #0
 800be70:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800be72:	f107 0210 	add.w	r2, r7, #16
 800be76:	2300      	movs	r3, #0
 800be78:	68b9      	ldr	r1, [r7, #8]
 800be7a:	6a38      	ldr	r0, [r7, #32]
 800be7c:	f000 fcb6 	bl	800c7ec <xQueueGenericSendFromISR>
 800be80:	4603      	mov	r3, r0
 800be82:	2b01      	cmp	r3, #1
 800be84:	d003      	beq.n	800be8e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800be86:	f06f 0302 	mvn.w	r3, #2
 800be8a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800be8c:	e029      	b.n	800bee2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d026      	beq.n	800bee2 <osMessageQueuePut+0xd2>
 800be94:	4b17      	ldr	r3, [pc, #92]	@ (800bef4 <osMessageQueuePut+0xe4>)
 800be96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be9a:	601a      	str	r2, [r3, #0]
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bea4:	e01d      	b.n	800bee2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bea6:	6a3b      	ldr	r3, [r7, #32]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d002      	beq.n	800beb2 <osMessageQueuePut+0xa2>
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d103      	bne.n	800beba <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800beb2:	f06f 0303 	mvn.w	r3, #3
 800beb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800beb8:	e014      	b.n	800bee4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800beba:	2300      	movs	r3, #0
 800bebc:	683a      	ldr	r2, [r7, #0]
 800bebe:	68b9      	ldr	r1, [r7, #8]
 800bec0:	6a38      	ldr	r0, [r7, #32]
 800bec2:	f000 fb89 	bl	800c5d8 <xQueueGenericSend>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d00b      	beq.n	800bee4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d003      	beq.n	800beda <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800bed2:	f06f 0301 	mvn.w	r3, #1
 800bed6:	627b      	str	r3, [r7, #36]	@ 0x24
 800bed8:	e004      	b.n	800bee4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800beda:	f06f 0302 	mvn.w	r3, #2
 800bede:	627b      	str	r3, [r7, #36]	@ 0x24
 800bee0:	e000      	b.n	800bee4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bee2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800bee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3728      	adds	r7, #40	@ 0x28
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	200009bc 	.word	0x200009bc
 800bef4:	e000ed04 	.word	0xe000ed04

0800bef8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bef8:	b580      	push	{r7, lr}
 800befa:	b08a      	sub	sp, #40	@ 0x28
 800befc:	af00      	add	r7, sp, #0
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	607a      	str	r2, [r7, #4]
 800bf04:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf0e:	f3ef 8305 	mrs	r3, IPSR
 800bf12:	61fb      	str	r3, [r7, #28]
  return(result);
 800bf14:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d10f      	bne.n	800bf3a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf1a:	f3ef 8310 	mrs	r3, PRIMASK
 800bf1e:	61bb      	str	r3, [r7, #24]
  return(result);
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d105      	bne.n	800bf32 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bf26:	f3ef 8311 	mrs	r3, BASEPRI
 800bf2a:	617b      	str	r3, [r7, #20]
  return(result);
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d02c      	beq.n	800bf8c <osMessageQueueGet+0x94>
 800bf32:	4b28      	ldr	r3, [pc, #160]	@ (800bfd4 <osMessageQueueGet+0xdc>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2b02      	cmp	r3, #2
 800bf38:	d128      	bne.n	800bf8c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bf3a:	6a3b      	ldr	r3, [r7, #32]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d005      	beq.n	800bf4c <osMessageQueueGet+0x54>
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d002      	beq.n	800bf4c <osMessageQueueGet+0x54>
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d003      	beq.n	800bf54 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800bf4c:	f06f 0303 	mvn.w	r3, #3
 800bf50:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bf52:	e038      	b.n	800bfc6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800bf54:	2300      	movs	r3, #0
 800bf56:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bf58:	f107 0310 	add.w	r3, r7, #16
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	68b9      	ldr	r1, [r7, #8]
 800bf60:	6a38      	ldr	r0, [r7, #32]
 800bf62:	f000 fee7 	bl	800cd34 <xQueueReceiveFromISR>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d003      	beq.n	800bf74 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800bf6c:	f06f 0302 	mvn.w	r3, #2
 800bf70:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bf72:	e028      	b.n	800bfc6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d025      	beq.n	800bfc6 <osMessageQueueGet+0xce>
 800bf7a:	4b17      	ldr	r3, [pc, #92]	@ (800bfd8 <osMessageQueueGet+0xe0>)
 800bf7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf80:	601a      	str	r2, [r3, #0]
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bf8a:	e01c      	b.n	800bfc6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bf8c:	6a3b      	ldr	r3, [r7, #32]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d002      	beq.n	800bf98 <osMessageQueueGet+0xa0>
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d103      	bne.n	800bfa0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800bf98:	f06f 0303 	mvn.w	r3, #3
 800bf9c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf9e:	e013      	b.n	800bfc8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bfa0:	683a      	ldr	r2, [r7, #0]
 800bfa2:	68b9      	ldr	r1, [r7, #8]
 800bfa4:	6a38      	ldr	r0, [r7, #32]
 800bfa6:	f000 fcc5 	bl	800c934 <xQueueReceive>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d00b      	beq.n	800bfc8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d003      	beq.n	800bfbe <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800bfb6:	f06f 0301 	mvn.w	r3, #1
 800bfba:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfbc:	e004      	b.n	800bfc8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800bfbe:	f06f 0302 	mvn.w	r3, #2
 800bfc2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfc4:	e000      	b.n	800bfc8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bfc6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800bfc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3728      	adds	r7, #40	@ 0x28
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	200009bc 	.word	0x200009bc
 800bfd8:	e000ed04 	.word	0xe000ed04

0800bfdc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	4a07      	ldr	r2, [pc, #28]	@ (800c008 <vApplicationGetIdleTaskMemory+0x2c>)
 800bfec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	4a06      	ldr	r2, [pc, #24]	@ (800c00c <vApplicationGetIdleTaskMemory+0x30>)
 800bff2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2280      	movs	r2, #128	@ 0x80
 800bff8:	601a      	str	r2, [r3, #0]
}
 800bffa:	bf00      	nop
 800bffc:	3714      	adds	r7, #20
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	200009c0 	.word	0x200009c0
 800c00c:	20000a68 	.word	0x20000a68

0800c010 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c010:	b480      	push	{r7}
 800c012:	b085      	sub	sp, #20
 800c014:	af00      	add	r7, sp, #0
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	4a07      	ldr	r2, [pc, #28]	@ (800c03c <vApplicationGetTimerTaskMemory+0x2c>)
 800c020:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	4a06      	ldr	r2, [pc, #24]	@ (800c040 <vApplicationGetTimerTaskMemory+0x30>)
 800c026:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c02e:	601a      	str	r2, [r3, #0]
}
 800c030:	bf00      	nop
 800c032:	3714      	adds	r7, #20
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr
 800c03c:	20000c68 	.word	0x20000c68
 800c040:	20000d10 	.word	0x20000d10

0800c044 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f103 0208 	add.w	r2, r3, #8
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c05c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f103 0208 	add.w	r2, r3, #8
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f103 0208 	add.w	r2, r3, #8
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c078:	bf00      	nop
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2200      	movs	r2, #0
 800c090:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c092:	bf00      	nop
 800c094:	370c      	adds	r7, #12
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr

0800c09e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c09e:	b480      	push	{r7}
 800c0a0:	b085      	sub	sp, #20
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
 800c0a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	689a      	ldr	r2, [r3, #8]
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	683a      	ldr	r2, [r7, #0]
 800c0c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	683a      	ldr	r2, [r7, #0]
 800c0c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	1c5a      	adds	r2, r3, #1
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	601a      	str	r2, [r3, #0]
}
 800c0da:	bf00      	nop
 800c0dc:	3714      	adds	r7, #20
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr

0800c0e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c0e6:	b480      	push	{r7}
 800c0e8:	b085      	sub	sp, #20
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0fc:	d103      	bne.n	800c106 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	691b      	ldr	r3, [r3, #16]
 800c102:	60fb      	str	r3, [r7, #12]
 800c104:	e00c      	b.n	800c120 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	3308      	adds	r3, #8
 800c10a:	60fb      	str	r3, [r7, #12]
 800c10c:	e002      	b.n	800c114 <vListInsert+0x2e>
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	60fb      	str	r3, [r7, #12]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d2f6      	bcs.n	800c10e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	685a      	ldr	r2, [r3, #4]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	683a      	ldr	r2, [r7, #0]
 800c12e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	68fa      	ldr	r2, [r7, #12]
 800c134:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	1c5a      	adds	r2, r3, #1
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	601a      	str	r2, [r3, #0]
}
 800c14c:	bf00      	nop
 800c14e:	3714      	adds	r7, #20
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr

0800c158 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c158:	b480      	push	{r7}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	691b      	ldr	r3, [r3, #16]
 800c164:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	6892      	ldr	r2, [r2, #8]
 800c16e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	6852      	ldr	r2, [r2, #4]
 800c178:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	429a      	cmp	r2, r3
 800c182:	d103      	bne.n	800c18c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	689a      	ldr	r2, [r3, #8]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2200      	movs	r2, #0
 800c190:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	1e5a      	subs	r2, r3, #1
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3714      	adds	r7, #20
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10d      	bne.n	800c1dc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c4:	b672      	cpsid	i
 800c1c6:	f383 8811 	msr	BASEPRI, r3
 800c1ca:	f3bf 8f6f 	isb	sy
 800c1ce:	f3bf 8f4f 	dsb	sy
 800c1d2:	b662      	cpsie	i
 800c1d4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c1d6:	bf00      	nop
 800c1d8:	bf00      	nop
 800c1da:	e7fd      	b.n	800c1d8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800c1dc:	f002 fc9e 	bl	800eb1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1e8:	68f9      	ldr	r1, [r7, #12]
 800c1ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c1ec:	fb01 f303 	mul.w	r3, r1, r3
 800c1f0:	441a      	add	r2, r3
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c20c:	3b01      	subs	r3, #1
 800c20e:	68f9      	ldr	r1, [r7, #12]
 800c210:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c212:	fb01 f303 	mul.w	r3, r1, r3
 800c216:	441a      	add	r2, r3
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	22ff      	movs	r2, #255	@ 0xff
 800c220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	22ff      	movs	r2, #255	@ 0xff
 800c228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d114      	bne.n	800c25c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	691b      	ldr	r3, [r3, #16]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d01a      	beq.n	800c270 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	3310      	adds	r3, #16
 800c23e:	4618      	mov	r0, r3
 800c240:	f001 fc30 	bl	800daa4 <xTaskRemoveFromEventList>
 800c244:	4603      	mov	r3, r0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d012      	beq.n	800c270 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c24a:	4b0d      	ldr	r3, [pc, #52]	@ (800c280 <xQueueGenericReset+0xd4>)
 800c24c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c250:	601a      	str	r2, [r3, #0]
 800c252:	f3bf 8f4f 	dsb	sy
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	e009      	b.n	800c270 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	3310      	adds	r3, #16
 800c260:	4618      	mov	r0, r3
 800c262:	f7ff feef 	bl	800c044 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	3324      	adds	r3, #36	@ 0x24
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7ff feea 	bl	800c044 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c270:	f002 fc8a 	bl	800eb88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c274:	2301      	movs	r3, #1
}
 800c276:	4618      	mov	r0, r3
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	e000ed04 	.word	0xe000ed04

0800c284 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c284:	b580      	push	{r7, lr}
 800c286:	b08e      	sub	sp, #56	@ 0x38
 800c288:	af02      	add	r7, sp, #8
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
 800c290:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10d      	bne.n	800c2b4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800c298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c29c:	b672      	cpsid	i
 800c29e:	f383 8811 	msr	BASEPRI, r3
 800c2a2:	f3bf 8f6f 	isb	sy
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	b662      	cpsie	i
 800c2ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c2ae:	bf00      	nop
 800c2b0:	bf00      	nop
 800c2b2:	e7fd      	b.n	800c2b0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d10d      	bne.n	800c2d6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800c2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2be:	b672      	cpsid	i
 800c2c0:	f383 8811 	msr	BASEPRI, r3
 800c2c4:	f3bf 8f6f 	isb	sy
 800c2c8:	f3bf 8f4f 	dsb	sy
 800c2cc:	b662      	cpsie	i
 800c2ce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c2d0:	bf00      	nop
 800c2d2:	bf00      	nop
 800c2d4:	e7fd      	b.n	800c2d2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d002      	beq.n	800c2e2 <xQueueGenericCreateStatic+0x5e>
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d001      	beq.n	800c2e6 <xQueueGenericCreateStatic+0x62>
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	e000      	b.n	800c2e8 <xQueueGenericCreateStatic+0x64>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d10d      	bne.n	800c308 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800c2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f0:	b672      	cpsid	i
 800c2f2:	f383 8811 	msr	BASEPRI, r3
 800c2f6:	f3bf 8f6f 	isb	sy
 800c2fa:	f3bf 8f4f 	dsb	sy
 800c2fe:	b662      	cpsie	i
 800c300:	623b      	str	r3, [r7, #32]
}
 800c302:	bf00      	nop
 800c304:	bf00      	nop
 800c306:	e7fd      	b.n	800c304 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d102      	bne.n	800c314 <xQueueGenericCreateStatic+0x90>
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d101      	bne.n	800c318 <xQueueGenericCreateStatic+0x94>
 800c314:	2301      	movs	r3, #1
 800c316:	e000      	b.n	800c31a <xQueueGenericCreateStatic+0x96>
 800c318:	2300      	movs	r3, #0
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d10d      	bne.n	800c33a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c322:	b672      	cpsid	i
 800c324:	f383 8811 	msr	BASEPRI, r3
 800c328:	f3bf 8f6f 	isb	sy
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	b662      	cpsie	i
 800c332:	61fb      	str	r3, [r7, #28]
}
 800c334:	bf00      	nop
 800c336:	bf00      	nop
 800c338:	e7fd      	b.n	800c336 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c33a:	2350      	movs	r3, #80	@ 0x50
 800c33c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	2b50      	cmp	r3, #80	@ 0x50
 800c342:	d00d      	beq.n	800c360 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800c344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c348:	b672      	cpsid	i
 800c34a:	f383 8811 	msr	BASEPRI, r3
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	b662      	cpsie	i
 800c358:	61bb      	str	r3, [r7, #24]
}
 800c35a:	bf00      	nop
 800c35c:	bf00      	nop
 800c35e:	e7fd      	b.n	800c35c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c360:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d00d      	beq.n	800c388 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c36e:	2201      	movs	r2, #1
 800c370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c374:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c37a:	9300      	str	r3, [sp, #0]
 800c37c:	4613      	mov	r3, r2
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	68b9      	ldr	r1, [r7, #8]
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	f000 f848 	bl	800c418 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3730      	adds	r7, #48	@ 0x30
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c392:	b580      	push	{r7, lr}
 800c394:	b08a      	sub	sp, #40	@ 0x28
 800c396:	af02      	add	r7, sp, #8
 800c398:	60f8      	str	r0, [r7, #12]
 800c39a:	60b9      	str	r1, [r7, #8]
 800c39c:	4613      	mov	r3, r2
 800c39e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d10d      	bne.n	800c3c2 <xQueueGenericCreate+0x30>
	__asm volatile
 800c3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3aa:	b672      	cpsid	i
 800c3ac:	f383 8811 	msr	BASEPRI, r3
 800c3b0:	f3bf 8f6f 	isb	sy
 800c3b4:	f3bf 8f4f 	dsb	sy
 800c3b8:	b662      	cpsie	i
 800c3ba:	613b      	str	r3, [r7, #16]
}
 800c3bc:	bf00      	nop
 800c3be:	bf00      	nop
 800c3c0:	e7fd      	b.n	800c3be <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d102      	bne.n	800c3ce <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	61fb      	str	r3, [r7, #28]
 800c3cc:	e004      	b.n	800c3d8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	fb02 f303 	mul.w	r3, r2, r3
 800c3d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	3350      	adds	r3, #80	@ 0x50
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f002 fccb 	bl	800ed78 <pvPortMalloc>
 800c3e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d011      	beq.n	800c40e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	3350      	adds	r3, #80	@ 0x50
 800c3f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c3fc:	79fa      	ldrb	r2, [r7, #7]
 800c3fe:	69bb      	ldr	r3, [r7, #24]
 800c400:	9300      	str	r3, [sp, #0]
 800c402:	4613      	mov	r3, r2
 800c404:	697a      	ldr	r2, [r7, #20]
 800c406:	68b9      	ldr	r1, [r7, #8]
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f000 f805 	bl	800c418 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c40e:	69bb      	ldr	r3, [r7, #24]
	}
 800c410:	4618      	mov	r0, r3
 800c412:	3720      	adds	r7, #32
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
 800c424:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d103      	bne.n	800c434 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c42c:	69bb      	ldr	r3, [r7, #24]
 800c42e:	69ba      	ldr	r2, [r7, #24]
 800c430:	601a      	str	r2, [r3, #0]
 800c432:	e002      	b.n	800c43a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c440:	69bb      	ldr	r3, [r7, #24]
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c446:	2101      	movs	r1, #1
 800c448:	69b8      	ldr	r0, [r7, #24]
 800c44a:	f7ff feaf 	bl	800c1ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c44e:	69bb      	ldr	r3, [r7, #24]
 800c450:	78fa      	ldrb	r2, [r7, #3]
 800c452:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c456:	bf00      	nop
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b082      	sub	sp, #8
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d00e      	beq.n	800c48a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c47e:	2300      	movs	r3, #0
 800c480:	2200      	movs	r2, #0
 800c482:	2100      	movs	r1, #0
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 f8a7 	bl	800c5d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c48a:	bf00      	nop
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c492:	b580      	push	{r7, lr}
 800c494:	b086      	sub	sp, #24
 800c496:	af00      	add	r7, sp, #0
 800c498:	4603      	mov	r3, r0
 800c49a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c49c:	2301      	movs	r3, #1
 800c49e:	617b      	str	r3, [r7, #20]
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c4a4:	79fb      	ldrb	r3, [r7, #7]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	6939      	ldr	r1, [r7, #16]
 800c4aa:	6978      	ldr	r0, [r7, #20]
 800c4ac:	f7ff ff71 	bl	800c392 <xQueueGenericCreate>
 800c4b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c4b2:	68f8      	ldr	r0, [r7, #12]
 800c4b4:	f7ff ffd3 	bl	800c45e <prvInitialiseMutex>

		return xNewQueue;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
	}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3718      	adds	r7, #24
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}

0800c4c2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b088      	sub	sp, #32
 800c4c6:	af02      	add	r7, sp, #8
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	6039      	str	r1, [r7, #0]
 800c4cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	617b      	str	r3, [r7, #20]
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c4d6:	79fb      	ldrb	r3, [r7, #7]
 800c4d8:	9300      	str	r3, [sp, #0]
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	6939      	ldr	r1, [r7, #16]
 800c4e0:	6978      	ldr	r0, [r7, #20]
 800c4e2:	f7ff fecf 	bl	800c284 <xQueueGenericCreateStatic>
 800c4e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f7ff ffb8 	bl	800c45e <prvInitialiseMutex>

		return xNewQueue;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
	}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3718      	adds	r7, #24
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c4f8:	b590      	push	{r4, r7, lr}
 800c4fa:	b087      	sub	sp, #28
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d10d      	bne.n	800c526 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800c50a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c50e:	b672      	cpsid	i
 800c510:	f383 8811 	msr	BASEPRI, r3
 800c514:	f3bf 8f6f 	isb	sy
 800c518:	f3bf 8f4f 	dsb	sy
 800c51c:	b662      	cpsie	i
 800c51e:	60fb      	str	r3, [r7, #12]
}
 800c520:	bf00      	nop
 800c522:	bf00      	nop
 800c524:	e7fd      	b.n	800c522 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	689c      	ldr	r4, [r3, #8]
 800c52a:	f001 fc89 	bl	800de40 <xTaskGetCurrentTaskHandle>
 800c52e:	4603      	mov	r3, r0
 800c530:	429c      	cmp	r4, r3
 800c532:	d111      	bne.n	800c558 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	1e5a      	subs	r2, r3, #1
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	68db      	ldr	r3, [r3, #12]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d105      	bne.n	800c552 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c546:	2300      	movs	r3, #0
 800c548:	2200      	movs	r2, #0
 800c54a:	2100      	movs	r1, #0
 800c54c:	6938      	ldr	r0, [r7, #16]
 800c54e:	f000 f843 	bl	800c5d8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c552:	2301      	movs	r3, #1
 800c554:	617b      	str	r3, [r7, #20]
 800c556:	e001      	b.n	800c55c <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c558:	2300      	movs	r3, #0
 800c55a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c55c:	697b      	ldr	r3, [r7, #20]
	}
 800c55e:	4618      	mov	r0, r3
 800c560:	371c      	adds	r7, #28
 800c562:	46bd      	mov	sp, r7
 800c564:	bd90      	pop	{r4, r7, pc}

0800c566 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c566:	b590      	push	{r4, r7, lr}
 800c568:	b087      	sub	sp, #28
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
 800c56e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d10d      	bne.n	800c596 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800c57a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c57e:	b672      	cpsid	i
 800c580:	f383 8811 	msr	BASEPRI, r3
 800c584:	f3bf 8f6f 	isb	sy
 800c588:	f3bf 8f4f 	dsb	sy
 800c58c:	b662      	cpsie	i
 800c58e:	60fb      	str	r3, [r7, #12]
}
 800c590:	bf00      	nop
 800c592:	bf00      	nop
 800c594:	e7fd      	b.n	800c592 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	689c      	ldr	r4, [r3, #8]
 800c59a:	f001 fc51 	bl	800de40 <xTaskGetCurrentTaskHandle>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	429c      	cmp	r4, r3
 800c5a2:	d107      	bne.n	800c5b4 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	68db      	ldr	r3, [r3, #12]
 800c5a8:	1c5a      	adds	r2, r3, #1
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	617b      	str	r3, [r7, #20]
 800c5b2:	e00c      	b.n	800c5ce <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c5b4:	6839      	ldr	r1, [r7, #0]
 800c5b6:	6938      	ldr	r0, [r7, #16]
 800c5b8:	f000 faa4 	bl	800cb04 <xQueueSemaphoreTake>
 800c5bc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d004      	beq.n	800c5ce <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	68db      	ldr	r3, [r3, #12]
 800c5c8:	1c5a      	adds	r2, r3, #1
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c5ce:	697b      	ldr	r3, [r7, #20]
	}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	371c      	adds	r7, #28
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd90      	pop	{r4, r7, pc}

0800c5d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b08e      	sub	sp, #56	@ 0x38
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	607a      	str	r2, [r7, #4]
 800c5e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d10d      	bne.n	800c610 <xQueueGenericSend+0x38>
	__asm volatile
 800c5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f8:	b672      	cpsid	i
 800c5fa:	f383 8811 	msr	BASEPRI, r3
 800c5fe:	f3bf 8f6f 	isb	sy
 800c602:	f3bf 8f4f 	dsb	sy
 800c606:	b662      	cpsie	i
 800c608:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c60a:	bf00      	nop
 800c60c:	bf00      	nop
 800c60e:	e7fd      	b.n	800c60c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d103      	bne.n	800c61e <xQueueGenericSend+0x46>
 800c616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d101      	bne.n	800c622 <xQueueGenericSend+0x4a>
 800c61e:	2301      	movs	r3, #1
 800c620:	e000      	b.n	800c624 <xQueueGenericSend+0x4c>
 800c622:	2300      	movs	r3, #0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d10d      	bne.n	800c644 <xQueueGenericSend+0x6c>
	__asm volatile
 800c628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c62c:	b672      	cpsid	i
 800c62e:	f383 8811 	msr	BASEPRI, r3
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	f3bf 8f4f 	dsb	sy
 800c63a:	b662      	cpsie	i
 800c63c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c63e:	bf00      	nop
 800c640:	bf00      	nop
 800c642:	e7fd      	b.n	800c640 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	2b02      	cmp	r3, #2
 800c648:	d103      	bne.n	800c652 <xQueueGenericSend+0x7a>
 800c64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c64c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d101      	bne.n	800c656 <xQueueGenericSend+0x7e>
 800c652:	2301      	movs	r3, #1
 800c654:	e000      	b.n	800c658 <xQueueGenericSend+0x80>
 800c656:	2300      	movs	r3, #0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d10d      	bne.n	800c678 <xQueueGenericSend+0xa0>
	__asm volatile
 800c65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c660:	b672      	cpsid	i
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	b662      	cpsie	i
 800c670:	623b      	str	r3, [r7, #32]
}
 800c672:	bf00      	nop
 800c674:	bf00      	nop
 800c676:	e7fd      	b.n	800c674 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c678:	f001 fbf2 	bl	800de60 <xTaskGetSchedulerState>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d102      	bne.n	800c688 <xQueueGenericSend+0xb0>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d101      	bne.n	800c68c <xQueueGenericSend+0xb4>
 800c688:	2301      	movs	r3, #1
 800c68a:	e000      	b.n	800c68e <xQueueGenericSend+0xb6>
 800c68c:	2300      	movs	r3, #0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d10d      	bne.n	800c6ae <xQueueGenericSend+0xd6>
	__asm volatile
 800c692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c696:	b672      	cpsid	i
 800c698:	f383 8811 	msr	BASEPRI, r3
 800c69c:	f3bf 8f6f 	isb	sy
 800c6a0:	f3bf 8f4f 	dsb	sy
 800c6a4:	b662      	cpsie	i
 800c6a6:	61fb      	str	r3, [r7, #28]
}
 800c6a8:	bf00      	nop
 800c6aa:	bf00      	nop
 800c6ac:	e7fd      	b.n	800c6aa <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c6ae:	f002 fa35 	bl	800eb1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d302      	bcc.n	800c6c4 <xQueueGenericSend+0xec>
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	2b02      	cmp	r3, #2
 800c6c2:	d129      	bne.n	800c718 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c6c4:	683a      	ldr	r2, [r7, #0]
 800c6c6:	68b9      	ldr	r1, [r7, #8]
 800c6c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c6ca:	f000 fbd3 	bl	800ce74 <prvCopyDataToQueue>
 800c6ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d010      	beq.n	800c6fa <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6da:	3324      	adds	r3, #36	@ 0x24
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f001 f9e1 	bl	800daa4 <xTaskRemoveFromEventList>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d013      	beq.n	800c710 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c6e8:	4b3f      	ldr	r3, [pc, #252]	@ (800c7e8 <xQueueGenericSend+0x210>)
 800c6ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6ee:	601a      	str	r2, [r3, #0]
 800c6f0:	f3bf 8f4f 	dsb	sy
 800c6f4:	f3bf 8f6f 	isb	sy
 800c6f8:	e00a      	b.n	800c710 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c6fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d007      	beq.n	800c710 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c700:	4b39      	ldr	r3, [pc, #228]	@ (800c7e8 <xQueueGenericSend+0x210>)
 800c702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c706:	601a      	str	r2, [r3, #0]
 800c708:	f3bf 8f4f 	dsb	sy
 800c70c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c710:	f002 fa3a 	bl	800eb88 <vPortExitCritical>
				return pdPASS;
 800c714:	2301      	movs	r3, #1
 800c716:	e063      	b.n	800c7e0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d103      	bne.n	800c726 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c71e:	f002 fa33 	bl	800eb88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c722:	2300      	movs	r3, #0
 800c724:	e05c      	b.n	800c7e0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d106      	bne.n	800c73a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c72c:	f107 0314 	add.w	r3, r7, #20
 800c730:	4618      	mov	r0, r3
 800c732:	f001 fa1d 	bl	800db70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c736:	2301      	movs	r3, #1
 800c738:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c73a:	f002 fa25 	bl	800eb88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c73e:	f000 ff79 	bl	800d634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c742:	f002 f9eb 	bl	800eb1c <vPortEnterCritical>
 800c746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c748:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c74c:	b25b      	sxtb	r3, r3
 800c74e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c752:	d103      	bne.n	800c75c <xQueueGenericSend+0x184>
 800c754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c756:	2200      	movs	r2, #0
 800c758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c75e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c762:	b25b      	sxtb	r3, r3
 800c764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c768:	d103      	bne.n	800c772 <xQueueGenericSend+0x19a>
 800c76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c76c:	2200      	movs	r2, #0
 800c76e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c772:	f002 fa09 	bl	800eb88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c776:	1d3a      	adds	r2, r7, #4
 800c778:	f107 0314 	add.w	r3, r7, #20
 800c77c:	4611      	mov	r1, r2
 800c77e:	4618      	mov	r0, r3
 800c780:	f001 fa0c 	bl	800db9c <xTaskCheckForTimeOut>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d124      	bne.n	800c7d4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c78a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c78c:	f000 fc6a 	bl	800d064 <prvIsQueueFull>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d018      	beq.n	800c7c8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c798:	3310      	adds	r3, #16
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	4611      	mov	r1, r2
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f001 f92a 	bl	800d9f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c7a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c7a6:	f000 fbf5 	bl	800cf94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c7aa:	f000 ff51 	bl	800d650 <xTaskResumeAll>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f47f af7c 	bne.w	800c6ae <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800c7b6:	4b0c      	ldr	r3, [pc, #48]	@ (800c7e8 <xQueueGenericSend+0x210>)
 800c7b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7bc:	601a      	str	r2, [r3, #0]
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	f3bf 8f6f 	isb	sy
 800c7c6:	e772      	b.n	800c6ae <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c7c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c7ca:	f000 fbe3 	bl	800cf94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7ce:	f000 ff3f 	bl	800d650 <xTaskResumeAll>
 800c7d2:	e76c      	b.n	800c6ae <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c7d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c7d6:	f000 fbdd 	bl	800cf94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7da:	f000 ff39 	bl	800d650 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c7de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3738      	adds	r7, #56	@ 0x38
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	e000ed04 	.word	0xe000ed04

0800c7ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b08e      	sub	sp, #56	@ 0x38
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	607a      	str	r2, [r7, #4]
 800c7f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c800:	2b00      	cmp	r3, #0
 800c802:	d10d      	bne.n	800c820 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800c804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c808:	b672      	cpsid	i
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	b662      	cpsie	i
 800c818:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c81a:	bf00      	nop
 800c81c:	bf00      	nop
 800c81e:	e7fd      	b.n	800c81c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d103      	bne.n	800c82e <xQueueGenericSendFromISR+0x42>
 800c826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d101      	bne.n	800c832 <xQueueGenericSendFromISR+0x46>
 800c82e:	2301      	movs	r3, #1
 800c830:	e000      	b.n	800c834 <xQueueGenericSendFromISR+0x48>
 800c832:	2300      	movs	r3, #0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d10d      	bne.n	800c854 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800c838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c83c:	b672      	cpsid	i
 800c83e:	f383 8811 	msr	BASEPRI, r3
 800c842:	f3bf 8f6f 	isb	sy
 800c846:	f3bf 8f4f 	dsb	sy
 800c84a:	b662      	cpsie	i
 800c84c:	623b      	str	r3, [r7, #32]
}
 800c84e:	bf00      	nop
 800c850:	bf00      	nop
 800c852:	e7fd      	b.n	800c850 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	2b02      	cmp	r3, #2
 800c858:	d103      	bne.n	800c862 <xQueueGenericSendFromISR+0x76>
 800c85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c85c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d101      	bne.n	800c866 <xQueueGenericSendFromISR+0x7a>
 800c862:	2301      	movs	r3, #1
 800c864:	e000      	b.n	800c868 <xQueueGenericSendFromISR+0x7c>
 800c866:	2300      	movs	r3, #0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d10d      	bne.n	800c888 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800c86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c870:	b672      	cpsid	i
 800c872:	f383 8811 	msr	BASEPRI, r3
 800c876:	f3bf 8f6f 	isb	sy
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	b662      	cpsie	i
 800c880:	61fb      	str	r3, [r7, #28]
}
 800c882:	bf00      	nop
 800c884:	bf00      	nop
 800c886:	e7fd      	b.n	800c884 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c888:	f002 fa30 	bl	800ecec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c88c:	f3ef 8211 	mrs	r2, BASEPRI
 800c890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c894:	b672      	cpsid	i
 800c896:	f383 8811 	msr	BASEPRI, r3
 800c89a:	f3bf 8f6f 	isb	sy
 800c89e:	f3bf 8f4f 	dsb	sy
 800c8a2:	b662      	cpsie	i
 800c8a4:	61ba      	str	r2, [r7, #24]
 800c8a6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c8a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c8aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d302      	bcc.n	800c8be <xQueueGenericSendFromISR+0xd2>
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	2b02      	cmp	r3, #2
 800c8bc:	d12c      	bne.n	800c918 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c8c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c8c8:	683a      	ldr	r2, [r7, #0]
 800c8ca:	68b9      	ldr	r1, [r7, #8]
 800c8cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c8ce:	f000 fad1 	bl	800ce74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c8d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800c8d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c8da:	d112      	bne.n	800c902 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d016      	beq.n	800c912 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e6:	3324      	adds	r3, #36	@ 0x24
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f001 f8db 	bl	800daa4 <xTaskRemoveFromEventList>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00e      	beq.n	800c912 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00b      	beq.n	800c912 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	601a      	str	r2, [r3, #0]
 800c900:	e007      	b.n	800c912 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c902:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c906:	3301      	adds	r3, #1
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	b25a      	sxtb	r2, r3
 800c90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c90e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c912:	2301      	movs	r3, #1
 800c914:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800c916:	e001      	b.n	800c91c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c918:	2300      	movs	r3, #0
 800c91a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c91e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c926:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3738      	adds	r7, #56	@ 0x38
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
	...

0800c934 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b08c      	sub	sp, #48	@ 0x30
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c940:	2300      	movs	r3, #0
 800c942:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d10d      	bne.n	800c96a <xQueueReceive+0x36>
	__asm volatile
 800c94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c952:	b672      	cpsid	i
 800c954:	f383 8811 	msr	BASEPRI, r3
 800c958:	f3bf 8f6f 	isb	sy
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	b662      	cpsie	i
 800c962:	623b      	str	r3, [r7, #32]
}
 800c964:	bf00      	nop
 800c966:	bf00      	nop
 800c968:	e7fd      	b.n	800c966 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d103      	bne.n	800c978 <xQueueReceive+0x44>
 800c970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c974:	2b00      	cmp	r3, #0
 800c976:	d101      	bne.n	800c97c <xQueueReceive+0x48>
 800c978:	2301      	movs	r3, #1
 800c97a:	e000      	b.n	800c97e <xQueueReceive+0x4a>
 800c97c:	2300      	movs	r3, #0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d10d      	bne.n	800c99e <xQueueReceive+0x6a>
	__asm volatile
 800c982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c986:	b672      	cpsid	i
 800c988:	f383 8811 	msr	BASEPRI, r3
 800c98c:	f3bf 8f6f 	isb	sy
 800c990:	f3bf 8f4f 	dsb	sy
 800c994:	b662      	cpsie	i
 800c996:	61fb      	str	r3, [r7, #28]
}
 800c998:	bf00      	nop
 800c99a:	bf00      	nop
 800c99c:	e7fd      	b.n	800c99a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c99e:	f001 fa5f 	bl	800de60 <xTaskGetSchedulerState>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d102      	bne.n	800c9ae <xQueueReceive+0x7a>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d101      	bne.n	800c9b2 <xQueueReceive+0x7e>
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e000      	b.n	800c9b4 <xQueueReceive+0x80>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d10d      	bne.n	800c9d4 <xQueueReceive+0xa0>
	__asm volatile
 800c9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9bc:	b672      	cpsid	i
 800c9be:	f383 8811 	msr	BASEPRI, r3
 800c9c2:	f3bf 8f6f 	isb	sy
 800c9c6:	f3bf 8f4f 	dsb	sy
 800c9ca:	b662      	cpsie	i
 800c9cc:	61bb      	str	r3, [r7, #24]
}
 800c9ce:	bf00      	nop
 800c9d0:	bf00      	nop
 800c9d2:	e7fd      	b.n	800c9d0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c9d4:	f002 f8a2 	bl	800eb1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d01f      	beq.n	800ca24 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c9e4:	68b9      	ldr	r1, [r7, #8]
 800c9e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9e8:	f000 faae 	bl	800cf48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ee:	1e5a      	subs	r2, r3, #1
 800c9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9f6:	691b      	ldr	r3, [r3, #16]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d00f      	beq.n	800ca1c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9fe:	3310      	adds	r3, #16
 800ca00:	4618      	mov	r0, r3
 800ca02:	f001 f84f 	bl	800daa4 <xTaskRemoveFromEventList>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d007      	beq.n	800ca1c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ca0c:	4b3c      	ldr	r3, [pc, #240]	@ (800cb00 <xQueueReceive+0x1cc>)
 800ca0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca12:	601a      	str	r2, [r3, #0]
 800ca14:	f3bf 8f4f 	dsb	sy
 800ca18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ca1c:	f002 f8b4 	bl	800eb88 <vPortExitCritical>
				return pdPASS;
 800ca20:	2301      	movs	r3, #1
 800ca22:	e069      	b.n	800caf8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d103      	bne.n	800ca32 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca2a:	f002 f8ad 	bl	800eb88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	e062      	b.n	800caf8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d106      	bne.n	800ca46 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca38:	f107 0310 	add.w	r3, r7, #16
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f001 f897 	bl	800db70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca42:	2301      	movs	r3, #1
 800ca44:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca46:	f002 f89f 	bl	800eb88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca4a:	f000 fdf3 	bl	800d634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca4e:	f002 f865 	bl	800eb1c <vPortEnterCritical>
 800ca52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca58:	b25b      	sxtb	r3, r3
 800ca5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca5e:	d103      	bne.n	800ca68 <xQueueReceive+0x134>
 800ca60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca62:	2200      	movs	r2, #0
 800ca64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca6e:	b25b      	sxtb	r3, r3
 800ca70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca74:	d103      	bne.n	800ca7e <xQueueReceive+0x14a>
 800ca76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ca7e:	f002 f883 	bl	800eb88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca82:	1d3a      	adds	r2, r7, #4
 800ca84:	f107 0310 	add.w	r3, r7, #16
 800ca88:	4611      	mov	r1, r2
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f001 f886 	bl	800db9c <xTaskCheckForTimeOut>
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d123      	bne.n	800cade <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca98:	f000 face 	bl	800d038 <prvIsQueueEmpty>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d017      	beq.n	800cad2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800caa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caa4:	3324      	adds	r3, #36	@ 0x24
 800caa6:	687a      	ldr	r2, [r7, #4]
 800caa8:	4611      	mov	r1, r2
 800caaa:	4618      	mov	r0, r3
 800caac:	f000 ffa4 	bl	800d9f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cab0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cab2:	f000 fa6f 	bl	800cf94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cab6:	f000 fdcb 	bl	800d650 <xTaskResumeAll>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d189      	bne.n	800c9d4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800cac0:	4b0f      	ldr	r3, [pc, #60]	@ (800cb00 <xQueueReceive+0x1cc>)
 800cac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cac6:	601a      	str	r2, [r3, #0]
 800cac8:	f3bf 8f4f 	dsb	sy
 800cacc:	f3bf 8f6f 	isb	sy
 800cad0:	e780      	b.n	800c9d4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cad4:	f000 fa5e 	bl	800cf94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cad8:	f000 fdba 	bl	800d650 <xTaskResumeAll>
 800cadc:	e77a      	b.n	800c9d4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cade:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cae0:	f000 fa58 	bl	800cf94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cae4:	f000 fdb4 	bl	800d650 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cae8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800caea:	f000 faa5 	bl	800d038 <prvIsQueueEmpty>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	f43f af6f 	beq.w	800c9d4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800caf6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3730      	adds	r7, #48	@ 0x30
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	e000ed04 	.word	0xe000ed04

0800cb04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b08e      	sub	sp, #56	@ 0x38
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cb16:	2300      	movs	r3, #0
 800cb18:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cb1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d10d      	bne.n	800cb3c <xQueueSemaphoreTake+0x38>
	__asm volatile
 800cb20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb24:	b672      	cpsid	i
 800cb26:	f383 8811 	msr	BASEPRI, r3
 800cb2a:	f3bf 8f6f 	isb	sy
 800cb2e:	f3bf 8f4f 	dsb	sy
 800cb32:	b662      	cpsie	i
 800cb34:	623b      	str	r3, [r7, #32]
}
 800cb36:	bf00      	nop
 800cb38:	bf00      	nop
 800cb3a:	e7fd      	b.n	800cb38 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d00d      	beq.n	800cb60 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800cb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb48:	b672      	cpsid	i
 800cb4a:	f383 8811 	msr	BASEPRI, r3
 800cb4e:	f3bf 8f6f 	isb	sy
 800cb52:	f3bf 8f4f 	dsb	sy
 800cb56:	b662      	cpsie	i
 800cb58:	61fb      	str	r3, [r7, #28]
}
 800cb5a:	bf00      	nop
 800cb5c:	bf00      	nop
 800cb5e:	e7fd      	b.n	800cb5c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb60:	f001 f97e 	bl	800de60 <xTaskGetSchedulerState>
 800cb64:	4603      	mov	r3, r0
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d102      	bne.n	800cb70 <xQueueSemaphoreTake+0x6c>
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d101      	bne.n	800cb74 <xQueueSemaphoreTake+0x70>
 800cb70:	2301      	movs	r3, #1
 800cb72:	e000      	b.n	800cb76 <xQueueSemaphoreTake+0x72>
 800cb74:	2300      	movs	r3, #0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d10d      	bne.n	800cb96 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800cb7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb7e:	b672      	cpsid	i
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	b662      	cpsie	i
 800cb8e:	61bb      	str	r3, [r7, #24]
}
 800cb90:	bf00      	nop
 800cb92:	bf00      	nop
 800cb94:	e7fd      	b.n	800cb92 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb96:	f001 ffc1 	bl	800eb1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cb9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb9e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d024      	beq.n	800cbf0 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba8:	1e5a      	subs	r2, r3, #1
 800cbaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbac:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d104      	bne.n	800cbc0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cbb6:	f001 fad5 	bl	800e164 <pvTaskIncrementMutexHeldCount>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbbe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc2:	691b      	ldr	r3, [r3, #16]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d00f      	beq.n	800cbe8 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbca:	3310      	adds	r3, #16
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f000 ff69 	bl	800daa4 <xTaskRemoveFromEventList>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d007      	beq.n	800cbe8 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cbd8:	4b55      	ldr	r3, [pc, #340]	@ (800cd30 <xQueueSemaphoreTake+0x22c>)
 800cbda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbde:	601a      	str	r2, [r3, #0]
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cbe8:	f001 ffce 	bl	800eb88 <vPortExitCritical>
				return pdPASS;
 800cbec:	2301      	movs	r3, #1
 800cbee:	e09a      	b.n	800cd26 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d114      	bne.n	800cc20 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00d      	beq.n	800cc18 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800cbfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc00:	b672      	cpsid	i
 800cc02:	f383 8811 	msr	BASEPRI, r3
 800cc06:	f3bf 8f6f 	isb	sy
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	b662      	cpsie	i
 800cc10:	617b      	str	r3, [r7, #20]
}
 800cc12:	bf00      	nop
 800cc14:	bf00      	nop
 800cc16:	e7fd      	b.n	800cc14 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cc18:	f001 ffb6 	bl	800eb88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	e082      	b.n	800cd26 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d106      	bne.n	800cc34 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc26:	f107 030c 	add.w	r3, r7, #12
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f000 ffa0 	bl	800db70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc30:	2301      	movs	r3, #1
 800cc32:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc34:	f001 ffa8 	bl	800eb88 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc38:	f000 fcfc 	bl	800d634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc3c:	f001 ff6e 	bl	800eb1c <vPortEnterCritical>
 800cc40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc46:	b25b      	sxtb	r3, r3
 800cc48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc4c:	d103      	bne.n	800cc56 <xQueueSemaphoreTake+0x152>
 800cc4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc5c:	b25b      	sxtb	r3, r3
 800cc5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc62:	d103      	bne.n	800cc6c <xQueueSemaphoreTake+0x168>
 800cc64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc66:	2200      	movs	r2, #0
 800cc68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc6c:	f001 ff8c 	bl	800eb88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc70:	463a      	mov	r2, r7
 800cc72:	f107 030c 	add.w	r3, r7, #12
 800cc76:	4611      	mov	r1, r2
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f000 ff8f 	bl	800db9c <xTaskCheckForTimeOut>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d132      	bne.n	800ccea <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc86:	f000 f9d7 	bl	800d038 <prvIsQueueEmpty>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d026      	beq.n	800ccde <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d109      	bne.n	800ccac <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800cc98:	f001 ff40 	bl	800eb1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	4618      	mov	r0, r3
 800cca2:	f001 f8fb 	bl	800de9c <xTaskPriorityInherit>
 800cca6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800cca8:	f001 ff6e 	bl	800eb88 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ccac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccae:	3324      	adds	r3, #36	@ 0x24
 800ccb0:	683a      	ldr	r2, [r7, #0]
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 fe9f 	bl	800d9f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ccba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ccbc:	f000 f96a 	bl	800cf94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ccc0:	f000 fcc6 	bl	800d650 <xTaskResumeAll>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	f47f af65 	bne.w	800cb96 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800cccc:	4b18      	ldr	r3, [pc, #96]	@ (800cd30 <xQueueSemaphoreTake+0x22c>)
 800ccce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccd2:	601a      	str	r2, [r3, #0]
 800ccd4:	f3bf 8f4f 	dsb	sy
 800ccd8:	f3bf 8f6f 	isb	sy
 800ccdc:	e75b      	b.n	800cb96 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ccde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cce0:	f000 f958 	bl	800cf94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cce4:	f000 fcb4 	bl	800d650 <xTaskResumeAll>
 800cce8:	e755      	b.n	800cb96 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ccea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ccec:	f000 f952 	bl	800cf94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ccf0:	f000 fcae 	bl	800d650 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ccf4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ccf6:	f000 f99f 	bl	800d038 <prvIsQueueEmpty>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	f43f af4a 	beq.w	800cb96 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d00d      	beq.n	800cd24 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800cd08:	f001 ff08 	bl	800eb1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cd0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd0e:	f000 f899 	bl	800ce44 <prvGetDisinheritPriorityAfterTimeout>
 800cd12:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cd14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f001 f99a 	bl	800e054 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cd20:	f001 ff32 	bl	800eb88 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cd24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3738      	adds	r7, #56	@ 0x38
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	e000ed04 	.word	0xe000ed04

0800cd34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b08e      	sub	sp, #56	@ 0x38
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cd44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d10d      	bne.n	800cd66 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800cd4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd4e:	b672      	cpsid	i
 800cd50:	f383 8811 	msr	BASEPRI, r3
 800cd54:	f3bf 8f6f 	isb	sy
 800cd58:	f3bf 8f4f 	dsb	sy
 800cd5c:	b662      	cpsie	i
 800cd5e:	623b      	str	r3, [r7, #32]
}
 800cd60:	bf00      	nop
 800cd62:	bf00      	nop
 800cd64:	e7fd      	b.n	800cd62 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d103      	bne.n	800cd74 <xQueueReceiveFromISR+0x40>
 800cd6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d101      	bne.n	800cd78 <xQueueReceiveFromISR+0x44>
 800cd74:	2301      	movs	r3, #1
 800cd76:	e000      	b.n	800cd7a <xQueueReceiveFromISR+0x46>
 800cd78:	2300      	movs	r3, #0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d10d      	bne.n	800cd9a <xQueueReceiveFromISR+0x66>
	__asm volatile
 800cd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd82:	b672      	cpsid	i
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	b662      	cpsie	i
 800cd92:	61fb      	str	r3, [r7, #28]
}
 800cd94:	bf00      	nop
 800cd96:	bf00      	nop
 800cd98:	e7fd      	b.n	800cd96 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd9a:	f001 ffa7 	bl	800ecec <vPortValidateInterruptPriority>
	__asm volatile
 800cd9e:	f3ef 8211 	mrs	r2, BASEPRI
 800cda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda6:	b672      	cpsid	i
 800cda8:	f383 8811 	msr	BASEPRI, r3
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	f3bf 8f4f 	dsb	sy
 800cdb4:	b662      	cpsie	i
 800cdb6:	61ba      	str	r2, [r7, #24]
 800cdb8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cdba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdc2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cdc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d02f      	beq.n	800ce2a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cdca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cdd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cdd4:	68b9      	ldr	r1, [r7, #8]
 800cdd6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cdd8:	f000 f8b6 	bl	800cf48 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdde:	1e5a      	subs	r2, r3, #1
 800cde0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cde4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cde8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cdec:	d112      	bne.n	800ce14 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf0:	691b      	ldr	r3, [r3, #16]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d016      	beq.n	800ce24 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf8:	3310      	adds	r3, #16
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f000 fe52 	bl	800daa4 <xTaskRemoveFromEventList>
 800ce00:	4603      	mov	r3, r0
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00e      	beq.n	800ce24 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00b      	beq.n	800ce24 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	601a      	str	r2, [r3, #0]
 800ce12:	e007      	b.n	800ce24 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ce14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce18:	3301      	adds	r3, #1
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	b25a      	sxtb	r2, r3
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ce24:	2301      	movs	r3, #1
 800ce26:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce28:	e001      	b.n	800ce2e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce30:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	f383 8811 	msr	BASEPRI, r3
}
 800ce38:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3738      	adds	r7, #56	@ 0x38
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ce44:	b480      	push	{r7}
 800ce46:	b085      	sub	sp, #20
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d006      	beq.n	800ce62 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ce5e:	60fb      	str	r3, [r7, #12]
 800ce60:	e001      	b.n	800ce66 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ce62:	2300      	movs	r3, #0
 800ce64:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ce66:	68fb      	ldr	r3, [r7, #12]
	}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3714      	adds	r7, #20
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b086      	sub	sp, #24
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ce80:	2300      	movs	r3, #0
 800ce82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d10d      	bne.n	800ceae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d14d      	bne.n	800cf36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	689b      	ldr	r3, [r3, #8]
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f001 f864 	bl	800df6c <xTaskPriorityDisinherit>
 800cea4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	609a      	str	r2, [r3, #8]
 800ceac:	e043      	b.n	800cf36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d119      	bne.n	800cee8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6858      	ldr	r0, [r3, #4]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cebc:	461a      	mov	r2, r3
 800cebe:	68b9      	ldr	r1, [r7, #8]
 800cec0:	f002 ff6f 	bl	800fda2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	685a      	ldr	r2, [r3, #4]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cecc:	441a      	add	r2, r3
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	685a      	ldr	r2, [r3, #4]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d32b      	bcc.n	800cf36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681a      	ldr	r2, [r3, #0]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	605a      	str	r2, [r3, #4]
 800cee6:	e026      	b.n	800cf36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	68d8      	ldr	r0, [r3, #12]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cef0:	461a      	mov	r2, r3
 800cef2:	68b9      	ldr	r1, [r7, #8]
 800cef4:	f002 ff55 	bl	800fda2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	68da      	ldr	r2, [r3, #12]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf00:	425b      	negs	r3, r3
 800cf02:	441a      	add	r2, r3
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	68da      	ldr	r2, [r3, #12]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d207      	bcs.n	800cf24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	689a      	ldr	r2, [r3, #8]
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf1c:	425b      	negs	r3, r3
 800cf1e:	441a      	add	r2, r3
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2b02      	cmp	r3, #2
 800cf28:	d105      	bne.n	800cf36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d002      	beq.n	800cf36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	3b01      	subs	r3, #1
 800cf34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	1c5a      	adds	r2, r3, #1
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800cf3e:	697b      	ldr	r3, [r7, #20]
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3718      	adds	r7, #24
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d018      	beq.n	800cf8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	68da      	ldr	r2, [r3, #12]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf62:	441a      	add	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	68da      	ldr	r2, [r3, #12]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d303      	bcc.n	800cf7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	68d9      	ldr	r1, [r3, #12]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf84:	461a      	mov	r2, r3
 800cf86:	6838      	ldr	r0, [r7, #0]
 800cf88:	f002 ff0b 	bl	800fda2 <memcpy>
	}
}
 800cf8c:	bf00      	nop
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cf9c:	f001 fdbe 	bl	800eb1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cfa6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfa8:	e011      	b.n	800cfce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d012      	beq.n	800cfd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	3324      	adds	r3, #36	@ 0x24
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f000 fd74 	bl	800daa4 <xTaskRemoveFromEventList>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d001      	beq.n	800cfc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cfc2:	f000 fe53 	bl	800dc6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cfc6:	7bfb      	ldrb	r3, [r7, #15]
 800cfc8:	3b01      	subs	r3, #1
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	dce9      	bgt.n	800cfaa <prvUnlockQueue+0x16>
 800cfd6:	e000      	b.n	800cfda <prvUnlockQueue+0x46>
					break;
 800cfd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	22ff      	movs	r2, #255	@ 0xff
 800cfde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cfe2:	f001 fdd1 	bl	800eb88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cfe6:	f001 fd99 	bl	800eb1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cff0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cff2:	e011      	b.n	800d018 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	691b      	ldr	r3, [r3, #16]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d012      	beq.n	800d022 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	3310      	adds	r3, #16
 800d000:	4618      	mov	r0, r3
 800d002:	f000 fd4f 	bl	800daa4 <xTaskRemoveFromEventList>
 800d006:	4603      	mov	r3, r0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d001      	beq.n	800d010 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d00c:	f000 fe2e 	bl	800dc6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d010:	7bbb      	ldrb	r3, [r7, #14]
 800d012:	3b01      	subs	r3, #1
 800d014:	b2db      	uxtb	r3, r3
 800d016:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	dce9      	bgt.n	800cff4 <prvUnlockQueue+0x60>
 800d020:	e000      	b.n	800d024 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d022:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	22ff      	movs	r2, #255	@ 0xff
 800d028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d02c:	f001 fdac 	bl	800eb88 <vPortExitCritical>
}
 800d030:	bf00      	nop
 800d032:	3710      	adds	r7, #16
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d040:	f001 fd6c 	bl	800eb1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d102      	bne.n	800d052 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d04c:	2301      	movs	r3, #1
 800d04e:	60fb      	str	r3, [r7, #12]
 800d050:	e001      	b.n	800d056 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d052:	2300      	movs	r3, #0
 800d054:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d056:	f001 fd97 	bl	800eb88 <vPortExitCritical>

	return xReturn;
 800d05a:	68fb      	ldr	r3, [r7, #12]
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3710      	adds	r7, #16
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d06c:	f001 fd56 	bl	800eb1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d078:	429a      	cmp	r2, r3
 800d07a:	d102      	bne.n	800d082 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d07c:	2301      	movs	r3, #1
 800d07e:	60fb      	str	r3, [r7, #12]
 800d080:	e001      	b.n	800d086 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d082:	2300      	movs	r3, #0
 800d084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d086:	f001 fd7f 	bl	800eb88 <vPortExitCritical>

	return xReturn;
 800d08a:	68fb      	ldr	r3, [r7, #12]
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3710      	adds	r7, #16
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d094:	b480      	push	{r7}
 800d096:	b085      	sub	sp, #20
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d09e:	2300      	movs	r3, #0
 800d0a0:	60fb      	str	r3, [r7, #12]
 800d0a2:	e014      	b.n	800d0ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d0a4:	4a0f      	ldr	r2, [pc, #60]	@ (800d0e4 <vQueueAddToRegistry+0x50>)
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d10b      	bne.n	800d0c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d0b0:	490c      	ldr	r1, [pc, #48]	@ (800d0e4 <vQueueAddToRegistry+0x50>)
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	683a      	ldr	r2, [r7, #0]
 800d0b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d0ba:	4a0a      	ldr	r2, [pc, #40]	@ (800d0e4 <vQueueAddToRegistry+0x50>)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	00db      	lsls	r3, r3, #3
 800d0c0:	4413      	add	r3, r2
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d0c6:	e006      	b.n	800d0d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	60fb      	str	r3, [r7, #12]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2b07      	cmp	r3, #7
 800d0d2:	d9e7      	bls.n	800d0a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d0d4:	bf00      	nop
 800d0d6:	bf00      	nop
 800d0d8:	3714      	adds	r7, #20
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	20001110 	.word	0x20001110

0800d0e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b086      	sub	sp, #24
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d0f8:	f001 fd10 	bl	800eb1c <vPortEnterCritical>
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d102:	b25b      	sxtb	r3, r3
 800d104:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d108:	d103      	bne.n	800d112 <vQueueWaitForMessageRestricted+0x2a>
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	2200      	movs	r2, #0
 800d10e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d118:	b25b      	sxtb	r3, r3
 800d11a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d11e:	d103      	bne.n	800d128 <vQueueWaitForMessageRestricted+0x40>
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	2200      	movs	r2, #0
 800d124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d128:	f001 fd2e 	bl	800eb88 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d130:	2b00      	cmp	r3, #0
 800d132:	d106      	bne.n	800d142 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	3324      	adds	r3, #36	@ 0x24
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	68b9      	ldr	r1, [r7, #8]
 800d13c:	4618      	mov	r0, r3
 800d13e:	f000 fc83 	bl	800da48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d142:	6978      	ldr	r0, [r7, #20]
 800d144:	f7ff ff26 	bl	800cf94 <prvUnlockQueue>
	}
 800d148:	bf00      	nop
 800d14a:	3718      	adds	r7, #24
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d150:	b580      	push	{r7, lr}
 800d152:	b08e      	sub	sp, #56	@ 0x38
 800d154:	af04      	add	r7, sp, #16
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	60b9      	str	r1, [r7, #8]
 800d15a:	607a      	str	r2, [r7, #4]
 800d15c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d160:	2b00      	cmp	r3, #0
 800d162:	d10d      	bne.n	800d180 <xTaskCreateStatic+0x30>
	__asm volatile
 800d164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d168:	b672      	cpsid	i
 800d16a:	f383 8811 	msr	BASEPRI, r3
 800d16e:	f3bf 8f6f 	isb	sy
 800d172:	f3bf 8f4f 	dsb	sy
 800d176:	b662      	cpsie	i
 800d178:	623b      	str	r3, [r7, #32]
}
 800d17a:	bf00      	nop
 800d17c:	bf00      	nop
 800d17e:	e7fd      	b.n	800d17c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800d180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d182:	2b00      	cmp	r3, #0
 800d184:	d10d      	bne.n	800d1a2 <xTaskCreateStatic+0x52>
	__asm volatile
 800d186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d18a:	b672      	cpsid	i
 800d18c:	f383 8811 	msr	BASEPRI, r3
 800d190:	f3bf 8f6f 	isb	sy
 800d194:	f3bf 8f4f 	dsb	sy
 800d198:	b662      	cpsie	i
 800d19a:	61fb      	str	r3, [r7, #28]
}
 800d19c:	bf00      	nop
 800d19e:	bf00      	nop
 800d1a0:	e7fd      	b.n	800d19e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d1a2:	23a8      	movs	r3, #168	@ 0xa8
 800d1a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	2ba8      	cmp	r3, #168	@ 0xa8
 800d1aa:	d00d      	beq.n	800d1c8 <xTaskCreateStatic+0x78>
	__asm volatile
 800d1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1b0:	b672      	cpsid	i
 800d1b2:	f383 8811 	msr	BASEPRI, r3
 800d1b6:	f3bf 8f6f 	isb	sy
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	b662      	cpsie	i
 800d1c0:	61bb      	str	r3, [r7, #24]
}
 800d1c2:	bf00      	nop
 800d1c4:	bf00      	nop
 800d1c6:	e7fd      	b.n	800d1c4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d1c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d01e      	beq.n	800d20e <xTaskCreateStatic+0xbe>
 800d1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d01b      	beq.n	800d20e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e2:	2202      	movs	r2, #2
 800d1e4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	9303      	str	r3, [sp, #12]
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ee:	9302      	str	r3, [sp, #8]
 800d1f0:	f107 0314 	add.w	r3, r7, #20
 800d1f4:	9301      	str	r3, [sp, #4]
 800d1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	68b9      	ldr	r1, [r7, #8]
 800d200:	68f8      	ldr	r0, [r7, #12]
 800d202:	f000 f851 	bl	800d2a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d206:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d208:	f000 f8f8 	bl	800d3fc <prvAddNewTaskToReadyList>
 800d20c:	e001      	b.n	800d212 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800d20e:	2300      	movs	r3, #0
 800d210:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d212:	697b      	ldr	r3, [r7, #20]
	}
 800d214:	4618      	mov	r0, r3
 800d216:	3728      	adds	r7, #40	@ 0x28
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b08c      	sub	sp, #48	@ 0x30
 800d220:	af04      	add	r7, sp, #16
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	603b      	str	r3, [r7, #0]
 800d228:	4613      	mov	r3, r2
 800d22a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d22c:	88fb      	ldrh	r3, [r7, #6]
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	4618      	mov	r0, r3
 800d232:	f001 fda1 	bl	800ed78 <pvPortMalloc>
 800d236:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d00e      	beq.n	800d25c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d23e:	20a8      	movs	r0, #168	@ 0xa8
 800d240:	f001 fd9a 	bl	800ed78 <pvPortMalloc>
 800d244:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d246:	69fb      	ldr	r3, [r7, #28]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d003      	beq.n	800d254 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	697a      	ldr	r2, [r7, #20]
 800d250:	631a      	str	r2, [r3, #48]	@ 0x30
 800d252:	e005      	b.n	800d260 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d254:	6978      	ldr	r0, [r7, #20]
 800d256:	f001 fe5d 	bl	800ef14 <vPortFree>
 800d25a:	e001      	b.n	800d260 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d25c:	2300      	movs	r3, #0
 800d25e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d017      	beq.n	800d296 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	2200      	movs	r2, #0
 800d26a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d26e:	88fa      	ldrh	r2, [r7, #6]
 800d270:	2300      	movs	r3, #0
 800d272:	9303      	str	r3, [sp, #12]
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	9302      	str	r3, [sp, #8]
 800d278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d27a:	9301      	str	r3, [sp, #4]
 800d27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d27e:	9300      	str	r3, [sp, #0]
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	68b9      	ldr	r1, [r7, #8]
 800d284:	68f8      	ldr	r0, [r7, #12]
 800d286:	f000 f80f 	bl	800d2a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d28a:	69f8      	ldr	r0, [r7, #28]
 800d28c:	f000 f8b6 	bl	800d3fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d290:	2301      	movs	r3, #1
 800d292:	61bb      	str	r3, [r7, #24]
 800d294:	e002      	b.n	800d29c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d296:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d29a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d29c:	69bb      	ldr	r3, [r7, #24]
	}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3720      	adds	r7, #32
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
	...

0800d2a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b088      	sub	sp, #32
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	60b9      	str	r1, [r7, #8]
 800d2b2:	607a      	str	r2, [r7, #4]
 800d2b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	461a      	mov	r2, r3
 800d2c0:	21a5      	movs	r1, #165	@ 0xa5
 800d2c2:	f002 fcdf 	bl	800fc84 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d2ca:	6879      	ldr	r1, [r7, #4]
 800d2cc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d2d0:	440b      	add	r3, r1
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	4413      	add	r3, r2
 800d2d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	f023 0307 	bic.w	r3, r3, #7
 800d2de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d2e0:	69bb      	ldr	r3, [r7, #24]
 800d2e2:	f003 0307 	and.w	r3, r3, #7
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00d      	beq.n	800d306 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800d2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ee:	b672      	cpsid	i
 800d2f0:	f383 8811 	msr	BASEPRI, r3
 800d2f4:	f3bf 8f6f 	isb	sy
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	b662      	cpsie	i
 800d2fe:	617b      	str	r3, [r7, #20]
}
 800d300:	bf00      	nop
 800d302:	bf00      	nop
 800d304:	e7fd      	b.n	800d302 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d01f      	beq.n	800d34c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d30c:	2300      	movs	r3, #0
 800d30e:	61fb      	str	r3, [r7, #28]
 800d310:	e012      	b.n	800d338 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d312:	68ba      	ldr	r2, [r7, #8]
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	4413      	add	r3, r2
 800d318:	7819      	ldrb	r1, [r3, #0]
 800d31a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d31c:	69fb      	ldr	r3, [r7, #28]
 800d31e:	4413      	add	r3, r2
 800d320:	3334      	adds	r3, #52	@ 0x34
 800d322:	460a      	mov	r2, r1
 800d324:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d326:	68ba      	ldr	r2, [r7, #8]
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	4413      	add	r3, r2
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d006      	beq.n	800d340 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d332:	69fb      	ldr	r3, [r7, #28]
 800d334:	3301      	adds	r3, #1
 800d336:	61fb      	str	r3, [r7, #28]
 800d338:	69fb      	ldr	r3, [r7, #28]
 800d33a:	2b0f      	cmp	r3, #15
 800d33c:	d9e9      	bls.n	800d312 <prvInitialiseNewTask+0x6a>
 800d33e:	e000      	b.n	800d342 <prvInitialiseNewTask+0x9a>
			{
				break;
 800d340:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d344:	2200      	movs	r2, #0
 800d346:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d34a:	e003      	b.n	800d354 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d34e:	2200      	movs	r2, #0
 800d350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d356:	2b37      	cmp	r3, #55	@ 0x37
 800d358:	d901      	bls.n	800d35e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d35a:	2337      	movs	r3, #55	@ 0x37
 800d35c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d362:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d368:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d36c:	2200      	movs	r2, #0
 800d36e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d372:	3304      	adds	r3, #4
 800d374:	4618      	mov	r0, r3
 800d376:	f7fe fe85 	bl	800c084 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d37c:	3318      	adds	r3, #24
 800d37e:	4618      	mov	r0, r3
 800d380:	f7fe fe80 	bl	800c084 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d388:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d392:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d398:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d39c:	2200      	movs	r2, #0
 800d39e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ac:	3354      	adds	r3, #84	@ 0x54
 800d3ae:	224c      	movs	r2, #76	@ 0x4c
 800d3b0:	2100      	movs	r1, #0
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f002 fc66 	bl	800fc84 <memset>
 800d3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ba:	4a0d      	ldr	r2, [pc, #52]	@ (800d3f0 <prvInitialiseNewTask+0x148>)
 800d3bc:	659a      	str	r2, [r3, #88]	@ 0x58
 800d3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c0:	4a0c      	ldr	r2, [pc, #48]	@ (800d3f4 <prvInitialiseNewTask+0x14c>)
 800d3c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c6:	4a0c      	ldr	r2, [pc, #48]	@ (800d3f8 <prvInitialiseNewTask+0x150>)
 800d3c8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d3ca:	683a      	ldr	r2, [r7, #0]
 800d3cc:	68f9      	ldr	r1, [r7, #12]
 800d3ce:	69b8      	ldr	r0, [r7, #24]
 800d3d0:	f001 fa98 	bl	800e904 <pxPortInitialiseStack>
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d002      	beq.n	800d3e6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3e6:	bf00      	nop
 800d3e8:	3720      	adds	r7, #32
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	2000779c 	.word	0x2000779c
 800d3f4:	20007804 	.word	0x20007804
 800d3f8:	2000786c 	.word	0x2000786c

0800d3fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d404:	f001 fb8a 	bl	800eb1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d408:	4b2d      	ldr	r3, [pc, #180]	@ (800d4c0 <prvAddNewTaskToReadyList+0xc4>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	3301      	adds	r3, #1
 800d40e:	4a2c      	ldr	r2, [pc, #176]	@ (800d4c0 <prvAddNewTaskToReadyList+0xc4>)
 800d410:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d412:	4b2c      	ldr	r3, [pc, #176]	@ (800d4c4 <prvAddNewTaskToReadyList+0xc8>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d109      	bne.n	800d42e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d41a:	4a2a      	ldr	r2, [pc, #168]	@ (800d4c4 <prvAddNewTaskToReadyList+0xc8>)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d420:	4b27      	ldr	r3, [pc, #156]	@ (800d4c0 <prvAddNewTaskToReadyList+0xc4>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	2b01      	cmp	r3, #1
 800d426:	d110      	bne.n	800d44a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d428:	f000 fc44 	bl	800dcb4 <prvInitialiseTaskLists>
 800d42c:	e00d      	b.n	800d44a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d42e:	4b26      	ldr	r3, [pc, #152]	@ (800d4c8 <prvAddNewTaskToReadyList+0xcc>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d109      	bne.n	800d44a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d436:	4b23      	ldr	r3, [pc, #140]	@ (800d4c4 <prvAddNewTaskToReadyList+0xc8>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d440:	429a      	cmp	r2, r3
 800d442:	d802      	bhi.n	800d44a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d444:	4a1f      	ldr	r2, [pc, #124]	@ (800d4c4 <prvAddNewTaskToReadyList+0xc8>)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d44a:	4b20      	ldr	r3, [pc, #128]	@ (800d4cc <prvAddNewTaskToReadyList+0xd0>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	3301      	adds	r3, #1
 800d450:	4a1e      	ldr	r2, [pc, #120]	@ (800d4cc <prvAddNewTaskToReadyList+0xd0>)
 800d452:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d454:	4b1d      	ldr	r3, [pc, #116]	@ (800d4cc <prvAddNewTaskToReadyList+0xd0>)
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d460:	4b1b      	ldr	r3, [pc, #108]	@ (800d4d0 <prvAddNewTaskToReadyList+0xd4>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	429a      	cmp	r2, r3
 800d466:	d903      	bls.n	800d470 <prvAddNewTaskToReadyList+0x74>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d46c:	4a18      	ldr	r2, [pc, #96]	@ (800d4d0 <prvAddNewTaskToReadyList+0xd4>)
 800d46e:	6013      	str	r3, [r2, #0]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d474:	4613      	mov	r3, r2
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	4413      	add	r3, r2
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	4a15      	ldr	r2, [pc, #84]	@ (800d4d4 <prvAddNewTaskToReadyList+0xd8>)
 800d47e:	441a      	add	r2, r3
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	3304      	adds	r3, #4
 800d484:	4619      	mov	r1, r3
 800d486:	4610      	mov	r0, r2
 800d488:	f7fe fe09 	bl	800c09e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d48c:	f001 fb7c 	bl	800eb88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d490:	4b0d      	ldr	r3, [pc, #52]	@ (800d4c8 <prvAddNewTaskToReadyList+0xcc>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d00e      	beq.n	800d4b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d498:	4b0a      	ldr	r3, [pc, #40]	@ (800d4c4 <prvAddNewTaskToReadyList+0xc8>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d207      	bcs.n	800d4b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d4a6:	4b0c      	ldr	r3, [pc, #48]	@ (800d4d8 <prvAddNewTaskToReadyList+0xdc>)
 800d4a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4ac:	601a      	str	r2, [r3, #0]
 800d4ae:	f3bf 8f4f 	dsb	sy
 800d4b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4b6:	bf00      	nop
 800d4b8:	3708      	adds	r7, #8
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	20001624 	.word	0x20001624
 800d4c4:	20001150 	.word	0x20001150
 800d4c8:	20001630 	.word	0x20001630
 800d4cc:	20001640 	.word	0x20001640
 800d4d0:	2000162c 	.word	0x2000162c
 800d4d4:	20001154 	.word	0x20001154
 800d4d8:	e000ed04 	.word	0xe000ed04

0800d4dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d01a      	beq.n	800d524 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d4ee:	4b15      	ldr	r3, [pc, #84]	@ (800d544 <vTaskDelay+0x68>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d00d      	beq.n	800d512 <vTaskDelay+0x36>
	__asm volatile
 800d4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4fa:	b672      	cpsid	i
 800d4fc:	f383 8811 	msr	BASEPRI, r3
 800d500:	f3bf 8f6f 	isb	sy
 800d504:	f3bf 8f4f 	dsb	sy
 800d508:	b662      	cpsie	i
 800d50a:	60bb      	str	r3, [r7, #8]
}
 800d50c:	bf00      	nop
 800d50e:	bf00      	nop
 800d510:	e7fd      	b.n	800d50e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800d512:	f000 f88f 	bl	800d634 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d516:	2100      	movs	r1, #0
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f000 fe37 	bl	800e18c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d51e:	f000 f897 	bl	800d650 <xTaskResumeAll>
 800d522:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d107      	bne.n	800d53a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800d52a:	4b07      	ldr	r3, [pc, #28]	@ (800d548 <vTaskDelay+0x6c>)
 800d52c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d530:	601a      	str	r2, [r3, #0]
 800d532:	f3bf 8f4f 	dsb	sy
 800d536:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d53a:	bf00      	nop
 800d53c:	3710      	adds	r7, #16
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	2000164c 	.word	0x2000164c
 800d548:	e000ed04 	.word	0xe000ed04

0800d54c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b08a      	sub	sp, #40	@ 0x28
 800d550:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d552:	2300      	movs	r3, #0
 800d554:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d556:	2300      	movs	r3, #0
 800d558:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d55a:	463a      	mov	r2, r7
 800d55c:	1d39      	adds	r1, r7, #4
 800d55e:	f107 0308 	add.w	r3, r7, #8
 800d562:	4618      	mov	r0, r3
 800d564:	f7fe fd3a 	bl	800bfdc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d568:	6839      	ldr	r1, [r7, #0]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	68ba      	ldr	r2, [r7, #8]
 800d56e:	9202      	str	r2, [sp, #8]
 800d570:	9301      	str	r3, [sp, #4]
 800d572:	2300      	movs	r3, #0
 800d574:	9300      	str	r3, [sp, #0]
 800d576:	2300      	movs	r3, #0
 800d578:	460a      	mov	r2, r1
 800d57a:	4926      	ldr	r1, [pc, #152]	@ (800d614 <vTaskStartScheduler+0xc8>)
 800d57c:	4826      	ldr	r0, [pc, #152]	@ (800d618 <vTaskStartScheduler+0xcc>)
 800d57e:	f7ff fde7 	bl	800d150 <xTaskCreateStatic>
 800d582:	4603      	mov	r3, r0
 800d584:	4a25      	ldr	r2, [pc, #148]	@ (800d61c <vTaskStartScheduler+0xd0>)
 800d586:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d588:	4b24      	ldr	r3, [pc, #144]	@ (800d61c <vTaskStartScheduler+0xd0>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d002      	beq.n	800d596 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d590:	2301      	movs	r3, #1
 800d592:	617b      	str	r3, [r7, #20]
 800d594:	e001      	b.n	800d59a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d596:	2300      	movs	r3, #0
 800d598:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d102      	bne.n	800d5a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d5a0:	f000 fe48 	bl	800e234 <xTimerCreateTimerTask>
 800d5a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d11d      	bne.n	800d5e8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800d5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b0:	b672      	cpsid	i
 800d5b2:	f383 8811 	msr	BASEPRI, r3
 800d5b6:	f3bf 8f6f 	isb	sy
 800d5ba:	f3bf 8f4f 	dsb	sy
 800d5be:	b662      	cpsie	i
 800d5c0:	613b      	str	r3, [r7, #16]
}
 800d5c2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d5c4:	4b16      	ldr	r3, [pc, #88]	@ (800d620 <vTaskStartScheduler+0xd4>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	3354      	adds	r3, #84	@ 0x54
 800d5ca:	4a16      	ldr	r2, [pc, #88]	@ (800d624 <vTaskStartScheduler+0xd8>)
 800d5cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d5ce:	4b16      	ldr	r3, [pc, #88]	@ (800d628 <vTaskStartScheduler+0xdc>)
 800d5d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d5d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d5d6:	4b15      	ldr	r3, [pc, #84]	@ (800d62c <vTaskStartScheduler+0xe0>)
 800d5d8:	2201      	movs	r2, #1
 800d5da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d5dc:	4b14      	ldr	r3, [pc, #80]	@ (800d630 <vTaskStartScheduler+0xe4>)
 800d5de:	2200      	movs	r2, #0
 800d5e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d5e2:	f001 fa1d 	bl	800ea20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d5e6:	e011      	b.n	800d60c <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d5ee:	d10d      	bne.n	800d60c <vTaskStartScheduler+0xc0>
	__asm volatile
 800d5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5f4:	b672      	cpsid	i
 800d5f6:	f383 8811 	msr	BASEPRI, r3
 800d5fa:	f3bf 8f6f 	isb	sy
 800d5fe:	f3bf 8f4f 	dsb	sy
 800d602:	b662      	cpsie	i
 800d604:	60fb      	str	r3, [r7, #12]
}
 800d606:	bf00      	nop
 800d608:	bf00      	nop
 800d60a:	e7fd      	b.n	800d608 <vTaskStartScheduler+0xbc>
}
 800d60c:	bf00      	nop
 800d60e:	3718      	adds	r7, #24
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	08012834 	.word	0x08012834
 800d618:	0800dc85 	.word	0x0800dc85
 800d61c:	20001648 	.word	0x20001648
 800d620:	20001150 	.word	0x20001150
 800d624:	20000034 	.word	0x20000034
 800d628:	20001644 	.word	0x20001644
 800d62c:	20001630 	.word	0x20001630
 800d630:	20001628 	.word	0x20001628

0800d634 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d634:	b480      	push	{r7}
 800d636:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d638:	4b04      	ldr	r3, [pc, #16]	@ (800d64c <vTaskSuspendAll+0x18>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	3301      	adds	r3, #1
 800d63e:	4a03      	ldr	r2, [pc, #12]	@ (800d64c <vTaskSuspendAll+0x18>)
 800d640:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d642:	bf00      	nop
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr
 800d64c:	2000164c 	.word	0x2000164c

0800d650 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d656:	2300      	movs	r3, #0
 800d658:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d65a:	2300      	movs	r3, #0
 800d65c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d65e:	4b43      	ldr	r3, [pc, #268]	@ (800d76c <xTaskResumeAll+0x11c>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d10d      	bne.n	800d682 <xTaskResumeAll+0x32>
	__asm volatile
 800d666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d66a:	b672      	cpsid	i
 800d66c:	f383 8811 	msr	BASEPRI, r3
 800d670:	f3bf 8f6f 	isb	sy
 800d674:	f3bf 8f4f 	dsb	sy
 800d678:	b662      	cpsie	i
 800d67a:	603b      	str	r3, [r7, #0]
}
 800d67c:	bf00      	nop
 800d67e:	bf00      	nop
 800d680:	e7fd      	b.n	800d67e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d682:	f001 fa4b 	bl	800eb1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d686:	4b39      	ldr	r3, [pc, #228]	@ (800d76c <xTaskResumeAll+0x11c>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	3b01      	subs	r3, #1
 800d68c:	4a37      	ldr	r2, [pc, #220]	@ (800d76c <xTaskResumeAll+0x11c>)
 800d68e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d690:	4b36      	ldr	r3, [pc, #216]	@ (800d76c <xTaskResumeAll+0x11c>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d162      	bne.n	800d75e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d698:	4b35      	ldr	r3, [pc, #212]	@ (800d770 <xTaskResumeAll+0x120>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d05e      	beq.n	800d75e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d6a0:	e02f      	b.n	800d702 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6a2:	4b34      	ldr	r3, [pc, #208]	@ (800d774 <xTaskResumeAll+0x124>)
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	3318      	adds	r3, #24
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fe fd52 	bl	800c158 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	3304      	adds	r3, #4
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7fe fd4d 	bl	800c158 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6c2:	4b2d      	ldr	r3, [pc, #180]	@ (800d778 <xTaskResumeAll+0x128>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d903      	bls.n	800d6d2 <xTaskResumeAll+0x82>
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6ce:	4a2a      	ldr	r2, [pc, #168]	@ (800d778 <xTaskResumeAll+0x128>)
 800d6d0:	6013      	str	r3, [r2, #0]
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	009b      	lsls	r3, r3, #2
 800d6da:	4413      	add	r3, r2
 800d6dc:	009b      	lsls	r3, r3, #2
 800d6de:	4a27      	ldr	r2, [pc, #156]	@ (800d77c <xTaskResumeAll+0x12c>)
 800d6e0:	441a      	add	r2, r3
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	3304      	adds	r3, #4
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	4610      	mov	r0, r2
 800d6ea:	f7fe fcd8 	bl	800c09e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6f2:	4b23      	ldr	r3, [pc, #140]	@ (800d780 <xTaskResumeAll+0x130>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d302      	bcc.n	800d702 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800d6fc:	4b21      	ldr	r3, [pc, #132]	@ (800d784 <xTaskResumeAll+0x134>)
 800d6fe:	2201      	movs	r2, #1
 800d700:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d702:	4b1c      	ldr	r3, [pc, #112]	@ (800d774 <xTaskResumeAll+0x124>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d1cb      	bne.n	800d6a2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d001      	beq.n	800d714 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d710:	f000 fb76 	bl	800de00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d714:	4b1c      	ldr	r3, [pc, #112]	@ (800d788 <xTaskResumeAll+0x138>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d010      	beq.n	800d742 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d720:	f000 f846 	bl	800d7b0 <xTaskIncrementTick>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d002      	beq.n	800d730 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800d72a:	4b16      	ldr	r3, [pc, #88]	@ (800d784 <xTaskResumeAll+0x134>)
 800d72c:	2201      	movs	r2, #1
 800d72e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	3b01      	subs	r3, #1
 800d734:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1f1      	bne.n	800d720 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800d73c:	4b12      	ldr	r3, [pc, #72]	@ (800d788 <xTaskResumeAll+0x138>)
 800d73e:	2200      	movs	r2, #0
 800d740:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d742:	4b10      	ldr	r3, [pc, #64]	@ (800d784 <xTaskResumeAll+0x134>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d009      	beq.n	800d75e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d74a:	2301      	movs	r3, #1
 800d74c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d74e:	4b0f      	ldr	r3, [pc, #60]	@ (800d78c <xTaskResumeAll+0x13c>)
 800d750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d754:	601a      	str	r2, [r3, #0]
 800d756:	f3bf 8f4f 	dsb	sy
 800d75a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d75e:	f001 fa13 	bl	800eb88 <vPortExitCritical>

	return xAlreadyYielded;
 800d762:	68bb      	ldr	r3, [r7, #8]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3710      	adds	r7, #16
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	2000164c 	.word	0x2000164c
 800d770:	20001624 	.word	0x20001624
 800d774:	200015e4 	.word	0x200015e4
 800d778:	2000162c 	.word	0x2000162c
 800d77c:	20001154 	.word	0x20001154
 800d780:	20001150 	.word	0x20001150
 800d784:	20001638 	.word	0x20001638
 800d788:	20001634 	.word	0x20001634
 800d78c:	e000ed04 	.word	0xe000ed04

0800d790 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d796:	4b05      	ldr	r3, [pc, #20]	@ (800d7ac <xTaskGetTickCount+0x1c>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d79c:	687b      	ldr	r3, [r7, #4]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	370c      	adds	r7, #12
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	20001628 	.word	0x20001628

0800d7b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7ba:	4b50      	ldr	r3, [pc, #320]	@ (800d8fc <xTaskIncrementTick+0x14c>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	f040 808c 	bne.w	800d8dc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d7c4:	4b4e      	ldr	r3, [pc, #312]	@ (800d900 <xTaskIncrementTick+0x150>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d7cc:	4a4c      	ldr	r2, [pc, #304]	@ (800d900 <xTaskIncrementTick+0x150>)
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d123      	bne.n	800d820 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800d7d8:	4b4a      	ldr	r3, [pc, #296]	@ (800d904 <xTaskIncrementTick+0x154>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00d      	beq.n	800d7fe <xTaskIncrementTick+0x4e>
	__asm volatile
 800d7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7e6:	b672      	cpsid	i
 800d7e8:	f383 8811 	msr	BASEPRI, r3
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	b662      	cpsie	i
 800d7f6:	603b      	str	r3, [r7, #0]
}
 800d7f8:	bf00      	nop
 800d7fa:	bf00      	nop
 800d7fc:	e7fd      	b.n	800d7fa <xTaskIncrementTick+0x4a>
 800d7fe:	4b41      	ldr	r3, [pc, #260]	@ (800d904 <xTaskIncrementTick+0x154>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	60fb      	str	r3, [r7, #12]
 800d804:	4b40      	ldr	r3, [pc, #256]	@ (800d908 <xTaskIncrementTick+0x158>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	4a3e      	ldr	r2, [pc, #248]	@ (800d904 <xTaskIncrementTick+0x154>)
 800d80a:	6013      	str	r3, [r2, #0]
 800d80c:	4a3e      	ldr	r2, [pc, #248]	@ (800d908 <xTaskIncrementTick+0x158>)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	6013      	str	r3, [r2, #0]
 800d812:	4b3e      	ldr	r3, [pc, #248]	@ (800d90c <xTaskIncrementTick+0x15c>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	3301      	adds	r3, #1
 800d818:	4a3c      	ldr	r2, [pc, #240]	@ (800d90c <xTaskIncrementTick+0x15c>)
 800d81a:	6013      	str	r3, [r2, #0]
 800d81c:	f000 faf0 	bl	800de00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d820:	4b3b      	ldr	r3, [pc, #236]	@ (800d910 <xTaskIncrementTick+0x160>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	693a      	ldr	r2, [r7, #16]
 800d826:	429a      	cmp	r2, r3
 800d828:	d349      	bcc.n	800d8be <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d82a:	4b36      	ldr	r3, [pc, #216]	@ (800d904 <xTaskIncrementTick+0x154>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d104      	bne.n	800d83e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d834:	4b36      	ldr	r3, [pc, #216]	@ (800d910 <xTaskIncrementTick+0x160>)
 800d836:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d83a:	601a      	str	r2, [r3, #0]
					break;
 800d83c:	e03f      	b.n	800d8be <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d83e:	4b31      	ldr	r3, [pc, #196]	@ (800d904 <xTaskIncrementTick+0x154>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d84e:	693a      	ldr	r2, [r7, #16]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	429a      	cmp	r2, r3
 800d854:	d203      	bcs.n	800d85e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d856:	4a2e      	ldr	r2, [pc, #184]	@ (800d910 <xTaskIncrementTick+0x160>)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d85c:	e02f      	b.n	800d8be <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	3304      	adds	r3, #4
 800d862:	4618      	mov	r0, r3
 800d864:	f7fe fc78 	bl	800c158 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d004      	beq.n	800d87a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	3318      	adds	r3, #24
 800d874:	4618      	mov	r0, r3
 800d876:	f7fe fc6f 	bl	800c158 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d87e:	4b25      	ldr	r3, [pc, #148]	@ (800d914 <xTaskIncrementTick+0x164>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	429a      	cmp	r2, r3
 800d884:	d903      	bls.n	800d88e <xTaskIncrementTick+0xde>
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d88a:	4a22      	ldr	r2, [pc, #136]	@ (800d914 <xTaskIncrementTick+0x164>)
 800d88c:	6013      	str	r3, [r2, #0]
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d892:	4613      	mov	r3, r2
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	4413      	add	r3, r2
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	4a1f      	ldr	r2, [pc, #124]	@ (800d918 <xTaskIncrementTick+0x168>)
 800d89c:	441a      	add	r2, r3
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	3304      	adds	r3, #4
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	4610      	mov	r0, r2
 800d8a6:	f7fe fbfa 	bl	800c09e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8ae:	4b1b      	ldr	r3, [pc, #108]	@ (800d91c <xTaskIncrementTick+0x16c>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d3b8      	bcc.n	800d82a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8bc:	e7b5      	b.n	800d82a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d8be:	4b17      	ldr	r3, [pc, #92]	@ (800d91c <xTaskIncrementTick+0x16c>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8c4:	4914      	ldr	r1, [pc, #80]	@ (800d918 <xTaskIncrementTick+0x168>)
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	4413      	add	r3, r2
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	440b      	add	r3, r1
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d907      	bls.n	800d8e6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	617b      	str	r3, [r7, #20]
 800d8da:	e004      	b.n	800d8e6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d8dc:	4b10      	ldr	r3, [pc, #64]	@ (800d920 <xTaskIncrementTick+0x170>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	4a0f      	ldr	r2, [pc, #60]	@ (800d920 <xTaskIncrementTick+0x170>)
 800d8e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d8e6:	4b0f      	ldr	r3, [pc, #60]	@ (800d924 <xTaskIncrementTick+0x174>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d001      	beq.n	800d8f2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d8f2:	697b      	ldr	r3, [r7, #20]
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3718      	adds	r7, #24
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	2000164c 	.word	0x2000164c
 800d900:	20001628 	.word	0x20001628
 800d904:	200015dc 	.word	0x200015dc
 800d908:	200015e0 	.word	0x200015e0
 800d90c:	2000163c 	.word	0x2000163c
 800d910:	20001644 	.word	0x20001644
 800d914:	2000162c 	.word	0x2000162c
 800d918:	20001154 	.word	0x20001154
 800d91c:	20001150 	.word	0x20001150
 800d920:	20001634 	.word	0x20001634
 800d924:	20001638 	.word	0x20001638

0800d928 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d928:	b480      	push	{r7}
 800d92a:	b085      	sub	sp, #20
 800d92c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d92e:	4b2c      	ldr	r3, [pc, #176]	@ (800d9e0 <vTaskSwitchContext+0xb8>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d003      	beq.n	800d93e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d936:	4b2b      	ldr	r3, [pc, #172]	@ (800d9e4 <vTaskSwitchContext+0xbc>)
 800d938:	2201      	movs	r2, #1
 800d93a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d93c:	e049      	b.n	800d9d2 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 800d93e:	4b29      	ldr	r3, [pc, #164]	@ (800d9e4 <vTaskSwitchContext+0xbc>)
 800d940:	2200      	movs	r2, #0
 800d942:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d944:	4b28      	ldr	r3, [pc, #160]	@ (800d9e8 <vTaskSwitchContext+0xc0>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	60fb      	str	r3, [r7, #12]
 800d94a:	e013      	b.n	800d974 <vTaskSwitchContext+0x4c>
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d10d      	bne.n	800d96e <vTaskSwitchContext+0x46>
	__asm volatile
 800d952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d956:	b672      	cpsid	i
 800d958:	f383 8811 	msr	BASEPRI, r3
 800d95c:	f3bf 8f6f 	isb	sy
 800d960:	f3bf 8f4f 	dsb	sy
 800d964:	b662      	cpsie	i
 800d966:	607b      	str	r3, [r7, #4]
}
 800d968:	bf00      	nop
 800d96a:	bf00      	nop
 800d96c:	e7fd      	b.n	800d96a <vTaskSwitchContext+0x42>
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	3b01      	subs	r3, #1
 800d972:	60fb      	str	r3, [r7, #12]
 800d974:	491d      	ldr	r1, [pc, #116]	@ (800d9ec <vTaskSwitchContext+0xc4>)
 800d976:	68fa      	ldr	r2, [r7, #12]
 800d978:	4613      	mov	r3, r2
 800d97a:	009b      	lsls	r3, r3, #2
 800d97c:	4413      	add	r3, r2
 800d97e:	009b      	lsls	r3, r3, #2
 800d980:	440b      	add	r3, r1
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d0e1      	beq.n	800d94c <vTaskSwitchContext+0x24>
 800d988:	68fa      	ldr	r2, [r7, #12]
 800d98a:	4613      	mov	r3, r2
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	4413      	add	r3, r2
 800d990:	009b      	lsls	r3, r3, #2
 800d992:	4a16      	ldr	r2, [pc, #88]	@ (800d9ec <vTaskSwitchContext+0xc4>)
 800d994:	4413      	add	r3, r2
 800d996:	60bb      	str	r3, [r7, #8]
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	685a      	ldr	r2, [r3, #4]
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	605a      	str	r2, [r3, #4]
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	685a      	ldr	r2, [r3, #4]
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	3308      	adds	r3, #8
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d104      	bne.n	800d9b8 <vTaskSwitchContext+0x90>
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	685a      	ldr	r2, [r3, #4]
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	605a      	str	r2, [r3, #4]
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	68db      	ldr	r3, [r3, #12]
 800d9be:	4a0c      	ldr	r2, [pc, #48]	@ (800d9f0 <vTaskSwitchContext+0xc8>)
 800d9c0:	6013      	str	r3, [r2, #0]
 800d9c2:	4a09      	ldr	r2, [pc, #36]	@ (800d9e8 <vTaskSwitchContext+0xc0>)
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d9c8:	4b09      	ldr	r3, [pc, #36]	@ (800d9f0 <vTaskSwitchContext+0xc8>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	3354      	adds	r3, #84	@ 0x54
 800d9ce:	4a09      	ldr	r2, [pc, #36]	@ (800d9f4 <vTaskSwitchContext+0xcc>)
 800d9d0:	6013      	str	r3, [r2, #0]
}
 800d9d2:	bf00      	nop
 800d9d4:	3714      	adds	r7, #20
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr
 800d9de:	bf00      	nop
 800d9e0:	2000164c 	.word	0x2000164c
 800d9e4:	20001638 	.word	0x20001638
 800d9e8:	2000162c 	.word	0x2000162c
 800d9ec:	20001154 	.word	0x20001154
 800d9f0:	20001150 	.word	0x20001150
 800d9f4:	20000034 	.word	0x20000034

0800d9f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b084      	sub	sp, #16
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d10d      	bne.n	800da24 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800da08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da0c:	b672      	cpsid	i
 800da0e:	f383 8811 	msr	BASEPRI, r3
 800da12:	f3bf 8f6f 	isb	sy
 800da16:	f3bf 8f4f 	dsb	sy
 800da1a:	b662      	cpsie	i
 800da1c:	60fb      	str	r3, [r7, #12]
}
 800da1e:	bf00      	nop
 800da20:	bf00      	nop
 800da22:	e7fd      	b.n	800da20 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da24:	4b07      	ldr	r3, [pc, #28]	@ (800da44 <vTaskPlaceOnEventList+0x4c>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	3318      	adds	r3, #24
 800da2a:	4619      	mov	r1, r3
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f7fe fb5a 	bl	800c0e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800da32:	2101      	movs	r1, #1
 800da34:	6838      	ldr	r0, [r7, #0]
 800da36:	f000 fba9 	bl	800e18c <prvAddCurrentTaskToDelayedList>
}
 800da3a:	bf00      	nop
 800da3c:	3710      	adds	r7, #16
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	20001150 	.word	0x20001150

0800da48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b086      	sub	sp, #24
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	60b9      	str	r1, [r7, #8]
 800da52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d10d      	bne.n	800da76 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800da5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da5e:	b672      	cpsid	i
 800da60:	f383 8811 	msr	BASEPRI, r3
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	b662      	cpsie	i
 800da6e:	617b      	str	r3, [r7, #20]
}
 800da70:	bf00      	nop
 800da72:	bf00      	nop
 800da74:	e7fd      	b.n	800da72 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da76:	4b0a      	ldr	r3, [pc, #40]	@ (800daa0 <vTaskPlaceOnEventListRestricted+0x58>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	3318      	adds	r3, #24
 800da7c:	4619      	mov	r1, r3
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f7fe fb0d 	bl	800c09e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d002      	beq.n	800da90 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800da8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800da8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800da90:	6879      	ldr	r1, [r7, #4]
 800da92:	68b8      	ldr	r0, [r7, #8]
 800da94:	f000 fb7a 	bl	800e18c <prvAddCurrentTaskToDelayedList>
	}
 800da98:	bf00      	nop
 800da9a:	3718      	adds	r7, #24
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	20001150 	.word	0x20001150

0800daa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b086      	sub	sp, #24
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	68db      	ldr	r3, [r3, #12]
 800dab0:	68db      	ldr	r3, [r3, #12]
 800dab2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d10d      	bne.n	800dad6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800daba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dabe:	b672      	cpsid	i
 800dac0:	f383 8811 	msr	BASEPRI, r3
 800dac4:	f3bf 8f6f 	isb	sy
 800dac8:	f3bf 8f4f 	dsb	sy
 800dacc:	b662      	cpsie	i
 800dace:	60fb      	str	r3, [r7, #12]
}
 800dad0:	bf00      	nop
 800dad2:	bf00      	nop
 800dad4:	e7fd      	b.n	800dad2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	3318      	adds	r3, #24
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fe fb3c 	bl	800c158 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dae0:	4b1d      	ldr	r3, [pc, #116]	@ (800db58 <xTaskRemoveFromEventList+0xb4>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d11d      	bne.n	800db24 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	3304      	adds	r3, #4
 800daec:	4618      	mov	r0, r3
 800daee:	f7fe fb33 	bl	800c158 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daf6:	4b19      	ldr	r3, [pc, #100]	@ (800db5c <xTaskRemoveFromEventList+0xb8>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d903      	bls.n	800db06 <xTaskRemoveFromEventList+0x62>
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db02:	4a16      	ldr	r2, [pc, #88]	@ (800db5c <xTaskRemoveFromEventList+0xb8>)
 800db04:	6013      	str	r3, [r2, #0]
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db0a:	4613      	mov	r3, r2
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	4413      	add	r3, r2
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	4a13      	ldr	r2, [pc, #76]	@ (800db60 <xTaskRemoveFromEventList+0xbc>)
 800db14:	441a      	add	r2, r3
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	3304      	adds	r3, #4
 800db1a:	4619      	mov	r1, r3
 800db1c:	4610      	mov	r0, r2
 800db1e:	f7fe fabe 	bl	800c09e <vListInsertEnd>
 800db22:	e005      	b.n	800db30 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	3318      	adds	r3, #24
 800db28:	4619      	mov	r1, r3
 800db2a:	480e      	ldr	r0, [pc, #56]	@ (800db64 <xTaskRemoveFromEventList+0xc0>)
 800db2c:	f7fe fab7 	bl	800c09e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db34:	4b0c      	ldr	r3, [pc, #48]	@ (800db68 <xTaskRemoveFromEventList+0xc4>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d905      	bls.n	800db4a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800db3e:	2301      	movs	r3, #1
 800db40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800db42:	4b0a      	ldr	r3, [pc, #40]	@ (800db6c <xTaskRemoveFromEventList+0xc8>)
 800db44:	2201      	movs	r2, #1
 800db46:	601a      	str	r2, [r3, #0]
 800db48:	e001      	b.n	800db4e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800db4a:	2300      	movs	r3, #0
 800db4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800db4e:	697b      	ldr	r3, [r7, #20]
}
 800db50:	4618      	mov	r0, r3
 800db52:	3718      	adds	r7, #24
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	2000164c 	.word	0x2000164c
 800db5c:	2000162c 	.word	0x2000162c
 800db60:	20001154 	.word	0x20001154
 800db64:	200015e4 	.word	0x200015e4
 800db68:	20001150 	.word	0x20001150
 800db6c:	20001638 	.word	0x20001638

0800db70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800db78:	4b06      	ldr	r3, [pc, #24]	@ (800db94 <vTaskInternalSetTimeOutState+0x24>)
 800db7a:	681a      	ldr	r2, [r3, #0]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800db80:	4b05      	ldr	r3, [pc, #20]	@ (800db98 <vTaskInternalSetTimeOutState+0x28>)
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	605a      	str	r2, [r3, #4]
}
 800db88:	bf00      	nop
 800db8a:	370c      	adds	r7, #12
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr
 800db94:	2000163c 	.word	0x2000163c
 800db98:	20001628 	.word	0x20001628

0800db9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b088      	sub	sp, #32
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d10d      	bne.n	800dbc8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800dbac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb0:	b672      	cpsid	i
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	b662      	cpsie	i
 800dbc0:	613b      	str	r3, [r7, #16]
}
 800dbc2:	bf00      	nop
 800dbc4:	bf00      	nop
 800dbc6:	e7fd      	b.n	800dbc4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d10d      	bne.n	800dbea <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800dbce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbd2:	b672      	cpsid	i
 800dbd4:	f383 8811 	msr	BASEPRI, r3
 800dbd8:	f3bf 8f6f 	isb	sy
 800dbdc:	f3bf 8f4f 	dsb	sy
 800dbe0:	b662      	cpsie	i
 800dbe2:	60fb      	str	r3, [r7, #12]
}
 800dbe4:	bf00      	nop
 800dbe6:	bf00      	nop
 800dbe8:	e7fd      	b.n	800dbe6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800dbea:	f000 ff97 	bl	800eb1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dbee:	4b1d      	ldr	r3, [pc, #116]	@ (800dc64 <xTaskCheckForTimeOut+0xc8>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	69ba      	ldr	r2, [r7, #24]
 800dbfa:	1ad3      	subs	r3, r2, r3
 800dbfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dc06:	d102      	bne.n	800dc0e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	61fb      	str	r3, [r7, #28]
 800dc0c:	e023      	b.n	800dc56 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	4b15      	ldr	r3, [pc, #84]	@ (800dc68 <xTaskCheckForTimeOut+0xcc>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d007      	beq.n	800dc2a <xTaskCheckForTimeOut+0x8e>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	69ba      	ldr	r2, [r7, #24]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d302      	bcc.n	800dc2a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dc24:	2301      	movs	r3, #1
 800dc26:	61fb      	str	r3, [r7, #28]
 800dc28:	e015      	b.n	800dc56 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	697a      	ldr	r2, [r7, #20]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d20b      	bcs.n	800dc4c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	1ad2      	subs	r2, r2, r3
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f7ff ff95 	bl	800db70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dc46:	2300      	movs	r3, #0
 800dc48:	61fb      	str	r3, [r7, #28]
 800dc4a:	e004      	b.n	800dc56 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dc52:	2301      	movs	r3, #1
 800dc54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dc56:	f000 ff97 	bl	800eb88 <vPortExitCritical>

	return xReturn;
 800dc5a:	69fb      	ldr	r3, [r7, #28]
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3720      	adds	r7, #32
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	20001628 	.word	0x20001628
 800dc68:	2000163c 	.word	0x2000163c

0800dc6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dc70:	4b03      	ldr	r3, [pc, #12]	@ (800dc80 <vTaskMissedYield+0x14>)
 800dc72:	2201      	movs	r2, #1
 800dc74:	601a      	str	r2, [r3, #0]
}
 800dc76:	bf00      	nop
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr
 800dc80:	20001638 	.word	0x20001638

0800dc84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b082      	sub	sp, #8
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dc8c:	f000 f852 	bl	800dd34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dc90:	4b06      	ldr	r3, [pc, #24]	@ (800dcac <prvIdleTask+0x28>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d9f9      	bls.n	800dc8c <prvIdleTask+0x8>
			{
				taskYIELD();
 800dc98:	4b05      	ldr	r3, [pc, #20]	@ (800dcb0 <prvIdleTask+0x2c>)
 800dc9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc9e:	601a      	str	r2, [r3, #0]
 800dca0:	f3bf 8f4f 	dsb	sy
 800dca4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dca8:	e7f0      	b.n	800dc8c <prvIdleTask+0x8>
 800dcaa:	bf00      	nop
 800dcac:	20001154 	.word	0x20001154
 800dcb0:	e000ed04 	.word	0xe000ed04

0800dcb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dcba:	2300      	movs	r3, #0
 800dcbc:	607b      	str	r3, [r7, #4]
 800dcbe:	e00c      	b.n	800dcda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	4613      	mov	r3, r2
 800dcc4:	009b      	lsls	r3, r3, #2
 800dcc6:	4413      	add	r3, r2
 800dcc8:	009b      	lsls	r3, r3, #2
 800dcca:	4a12      	ldr	r2, [pc, #72]	@ (800dd14 <prvInitialiseTaskLists+0x60>)
 800dccc:	4413      	add	r3, r2
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7fe f9b8 	bl	800c044 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	607b      	str	r3, [r7, #4]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2b37      	cmp	r3, #55	@ 0x37
 800dcde:	d9ef      	bls.n	800dcc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dce0:	480d      	ldr	r0, [pc, #52]	@ (800dd18 <prvInitialiseTaskLists+0x64>)
 800dce2:	f7fe f9af 	bl	800c044 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dce6:	480d      	ldr	r0, [pc, #52]	@ (800dd1c <prvInitialiseTaskLists+0x68>)
 800dce8:	f7fe f9ac 	bl	800c044 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dcec:	480c      	ldr	r0, [pc, #48]	@ (800dd20 <prvInitialiseTaskLists+0x6c>)
 800dcee:	f7fe f9a9 	bl	800c044 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dcf2:	480c      	ldr	r0, [pc, #48]	@ (800dd24 <prvInitialiseTaskLists+0x70>)
 800dcf4:	f7fe f9a6 	bl	800c044 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dcf8:	480b      	ldr	r0, [pc, #44]	@ (800dd28 <prvInitialiseTaskLists+0x74>)
 800dcfa:	f7fe f9a3 	bl	800c044 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dcfe:	4b0b      	ldr	r3, [pc, #44]	@ (800dd2c <prvInitialiseTaskLists+0x78>)
 800dd00:	4a05      	ldr	r2, [pc, #20]	@ (800dd18 <prvInitialiseTaskLists+0x64>)
 800dd02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd04:	4b0a      	ldr	r3, [pc, #40]	@ (800dd30 <prvInitialiseTaskLists+0x7c>)
 800dd06:	4a05      	ldr	r2, [pc, #20]	@ (800dd1c <prvInitialiseTaskLists+0x68>)
 800dd08:	601a      	str	r2, [r3, #0]
}
 800dd0a:	bf00      	nop
 800dd0c:	3708      	adds	r7, #8
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	20001154 	.word	0x20001154
 800dd18:	200015b4 	.word	0x200015b4
 800dd1c:	200015c8 	.word	0x200015c8
 800dd20:	200015e4 	.word	0x200015e4
 800dd24:	200015f8 	.word	0x200015f8
 800dd28:	20001610 	.word	0x20001610
 800dd2c:	200015dc 	.word	0x200015dc
 800dd30:	200015e0 	.word	0x200015e0

0800dd34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd3a:	e019      	b.n	800dd70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dd3c:	f000 feee 	bl	800eb1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd40:	4b10      	ldr	r3, [pc, #64]	@ (800dd84 <prvCheckTasksWaitingTermination+0x50>)
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	3304      	adds	r3, #4
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7fe fa03 	bl	800c158 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dd52:	4b0d      	ldr	r3, [pc, #52]	@ (800dd88 <prvCheckTasksWaitingTermination+0x54>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	3b01      	subs	r3, #1
 800dd58:	4a0b      	ldr	r2, [pc, #44]	@ (800dd88 <prvCheckTasksWaitingTermination+0x54>)
 800dd5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dd5c:	4b0b      	ldr	r3, [pc, #44]	@ (800dd8c <prvCheckTasksWaitingTermination+0x58>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	3b01      	subs	r3, #1
 800dd62:	4a0a      	ldr	r2, [pc, #40]	@ (800dd8c <prvCheckTasksWaitingTermination+0x58>)
 800dd64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dd66:	f000 ff0f 	bl	800eb88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 f810 	bl	800dd90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd70:	4b06      	ldr	r3, [pc, #24]	@ (800dd8c <prvCheckTasksWaitingTermination+0x58>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d1e1      	bne.n	800dd3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dd78:	bf00      	nop
 800dd7a:	bf00      	nop
 800dd7c:	3708      	adds	r7, #8
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	200015f8 	.word	0x200015f8
 800dd88:	20001624 	.word	0x20001624
 800dd8c:	2000160c 	.word	0x2000160c

0800dd90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	3354      	adds	r3, #84	@ 0x54
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f001 ff7d 	bl	800fc9c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d108      	bne.n	800ddbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f001 f8af 	bl	800ef14 <vPortFree>
				vPortFree( pxTCB );
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f001 f8ac 	bl	800ef14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ddbc:	e01b      	b.n	800ddf6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d103      	bne.n	800ddd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f001 f8a3 	bl	800ef14 <vPortFree>
	}
 800ddce:	e012      	b.n	800ddf6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ddd6:	2b02      	cmp	r3, #2
 800ddd8:	d00d      	beq.n	800ddf6 <prvDeleteTCB+0x66>
	__asm volatile
 800ddda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddde:	b672      	cpsid	i
 800dde0:	f383 8811 	msr	BASEPRI, r3
 800dde4:	f3bf 8f6f 	isb	sy
 800dde8:	f3bf 8f4f 	dsb	sy
 800ddec:	b662      	cpsie	i
 800ddee:	60fb      	str	r3, [r7, #12]
}
 800ddf0:	bf00      	nop
 800ddf2:	bf00      	nop
 800ddf4:	e7fd      	b.n	800ddf2 <prvDeleteTCB+0x62>
	}
 800ddf6:	bf00      	nop
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
	...

0800de00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800de00:	b480      	push	{r7}
 800de02:	b083      	sub	sp, #12
 800de04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de06:	4b0c      	ldr	r3, [pc, #48]	@ (800de38 <prvResetNextTaskUnblockTime+0x38>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d104      	bne.n	800de1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800de10:	4b0a      	ldr	r3, [pc, #40]	@ (800de3c <prvResetNextTaskUnblockTime+0x3c>)
 800de12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800de16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800de18:	e008      	b.n	800de2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de1a:	4b07      	ldr	r3, [pc, #28]	@ (800de38 <prvResetNextTaskUnblockTime+0x38>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	68db      	ldr	r3, [r3, #12]
 800de20:	68db      	ldr	r3, [r3, #12]
 800de22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	4a04      	ldr	r2, [pc, #16]	@ (800de3c <prvResetNextTaskUnblockTime+0x3c>)
 800de2a:	6013      	str	r3, [r2, #0]
}
 800de2c:	bf00      	nop
 800de2e:	370c      	adds	r7, #12
 800de30:	46bd      	mov	sp, r7
 800de32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de36:	4770      	bx	lr
 800de38:	200015dc 	.word	0x200015dc
 800de3c:	20001644 	.word	0x20001644

0800de40 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800de40:	b480      	push	{r7}
 800de42:	b083      	sub	sp, #12
 800de44:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800de46:	4b05      	ldr	r3, [pc, #20]	@ (800de5c <xTaskGetCurrentTaskHandle+0x1c>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800de4c:	687b      	ldr	r3, [r7, #4]
	}
 800de4e:	4618      	mov	r0, r3
 800de50:	370c      	adds	r7, #12
 800de52:	46bd      	mov	sp, r7
 800de54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de58:	4770      	bx	lr
 800de5a:	bf00      	nop
 800de5c:	20001150 	.word	0x20001150

0800de60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800de60:	b480      	push	{r7}
 800de62:	b083      	sub	sp, #12
 800de64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800de66:	4b0b      	ldr	r3, [pc, #44]	@ (800de94 <xTaskGetSchedulerState+0x34>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d102      	bne.n	800de74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800de6e:	2301      	movs	r3, #1
 800de70:	607b      	str	r3, [r7, #4]
 800de72:	e008      	b.n	800de86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de74:	4b08      	ldr	r3, [pc, #32]	@ (800de98 <xTaskGetSchedulerState+0x38>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d102      	bne.n	800de82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800de7c:	2302      	movs	r3, #2
 800de7e:	607b      	str	r3, [r7, #4]
 800de80:	e001      	b.n	800de86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800de82:	2300      	movs	r3, #0
 800de84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800de86:	687b      	ldr	r3, [r7, #4]
	}
 800de88:	4618      	mov	r0, r3
 800de8a:	370c      	adds	r7, #12
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr
 800de94:	20001630 	.word	0x20001630
 800de98:	2000164c 	.word	0x2000164c

0800de9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b084      	sub	sp, #16
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dea8:	2300      	movs	r3, #0
 800deaa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d051      	beq.n	800df56 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800deb6:	4b2a      	ldr	r3, [pc, #168]	@ (800df60 <xTaskPriorityInherit+0xc4>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800debc:	429a      	cmp	r2, r3
 800debe:	d241      	bcs.n	800df44 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	699b      	ldr	r3, [r3, #24]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	db06      	blt.n	800ded6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dec8:	4b25      	ldr	r3, [pc, #148]	@ (800df60 <xTaskPriorityInherit+0xc4>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dece:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	6959      	ldr	r1, [r3, #20]
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dede:	4613      	mov	r3, r2
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	4413      	add	r3, r2
 800dee4:	009b      	lsls	r3, r3, #2
 800dee6:	4a1f      	ldr	r2, [pc, #124]	@ (800df64 <xTaskPriorityInherit+0xc8>)
 800dee8:	4413      	add	r3, r2
 800deea:	4299      	cmp	r1, r3
 800deec:	d122      	bne.n	800df34 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	3304      	adds	r3, #4
 800def2:	4618      	mov	r0, r3
 800def4:	f7fe f930 	bl	800c158 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800def8:	4b19      	ldr	r3, [pc, #100]	@ (800df60 <xTaskPriorityInherit+0xc4>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df06:	4b18      	ldr	r3, [pc, #96]	@ (800df68 <xTaskPriorityInherit+0xcc>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d903      	bls.n	800df16 <xTaskPriorityInherit+0x7a>
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df12:	4a15      	ldr	r2, [pc, #84]	@ (800df68 <xTaskPriorityInherit+0xcc>)
 800df14:	6013      	str	r3, [r2, #0]
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df1a:	4613      	mov	r3, r2
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	4413      	add	r3, r2
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	4a10      	ldr	r2, [pc, #64]	@ (800df64 <xTaskPriorityInherit+0xc8>)
 800df24:	441a      	add	r2, r3
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	3304      	adds	r3, #4
 800df2a:	4619      	mov	r1, r3
 800df2c:	4610      	mov	r0, r2
 800df2e:	f7fe f8b6 	bl	800c09e <vListInsertEnd>
 800df32:	e004      	b.n	800df3e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df34:	4b0a      	ldr	r3, [pc, #40]	@ (800df60 <xTaskPriorityInherit+0xc4>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800df3e:	2301      	movs	r3, #1
 800df40:	60fb      	str	r3, [r7, #12]
 800df42:	e008      	b.n	800df56 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800df48:	4b05      	ldr	r3, [pc, #20]	@ (800df60 <xTaskPriorityInherit+0xc4>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df4e:	429a      	cmp	r2, r3
 800df50:	d201      	bcs.n	800df56 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800df52:	2301      	movs	r3, #1
 800df54:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df56:	68fb      	ldr	r3, [r7, #12]
	}
 800df58:	4618      	mov	r0, r3
 800df5a:	3710      	adds	r7, #16
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	20001150 	.word	0x20001150
 800df64:	20001154 	.word	0x20001154
 800df68:	2000162c 	.word	0x2000162c

0800df6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b086      	sub	sp, #24
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800df78:	2300      	movs	r3, #0
 800df7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d05c      	beq.n	800e03c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800df82:	4b31      	ldr	r3, [pc, #196]	@ (800e048 <xTaskPriorityDisinherit+0xdc>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	693a      	ldr	r2, [r7, #16]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d00d      	beq.n	800dfa8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800df8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df90:	b672      	cpsid	i
 800df92:	f383 8811 	msr	BASEPRI, r3
 800df96:	f3bf 8f6f 	isb	sy
 800df9a:	f3bf 8f4f 	dsb	sy
 800df9e:	b662      	cpsie	i
 800dfa0:	60fb      	str	r3, [r7, #12]
}
 800dfa2:	bf00      	nop
 800dfa4:	bf00      	nop
 800dfa6:	e7fd      	b.n	800dfa4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d10d      	bne.n	800dfcc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800dfb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb4:	b672      	cpsid	i
 800dfb6:	f383 8811 	msr	BASEPRI, r3
 800dfba:	f3bf 8f6f 	isb	sy
 800dfbe:	f3bf 8f4f 	dsb	sy
 800dfc2:	b662      	cpsie	i
 800dfc4:	60bb      	str	r3, [r7, #8]
}
 800dfc6:	bf00      	nop
 800dfc8:	bf00      	nop
 800dfca:	e7fd      	b.n	800dfc8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfd0:	1e5a      	subs	r2, r3, #1
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d02c      	beq.n	800e03c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d128      	bne.n	800e03c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	3304      	adds	r3, #4
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7fe f8b2 	bl	800c158 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e000:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e00c:	4b0f      	ldr	r3, [pc, #60]	@ (800e04c <xTaskPriorityDisinherit+0xe0>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	429a      	cmp	r2, r3
 800e012:	d903      	bls.n	800e01c <xTaskPriorityDisinherit+0xb0>
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e018:	4a0c      	ldr	r2, [pc, #48]	@ (800e04c <xTaskPriorityDisinherit+0xe0>)
 800e01a:	6013      	str	r3, [r2, #0]
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e020:	4613      	mov	r3, r2
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	4413      	add	r3, r2
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	4a09      	ldr	r2, [pc, #36]	@ (800e050 <xTaskPriorityDisinherit+0xe4>)
 800e02a:	441a      	add	r2, r3
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	3304      	adds	r3, #4
 800e030:	4619      	mov	r1, r3
 800e032:	4610      	mov	r0, r2
 800e034:	f7fe f833 	bl	800c09e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e038:	2301      	movs	r3, #1
 800e03a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e03c:	697b      	ldr	r3, [r7, #20]
	}
 800e03e:	4618      	mov	r0, r3
 800e040:	3718      	adds	r7, #24
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	20001150 	.word	0x20001150
 800e04c:	2000162c 	.word	0x2000162c
 800e050:	20001154 	.word	0x20001154

0800e054 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e054:	b580      	push	{r7, lr}
 800e056:	b088      	sub	sp, #32
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e062:	2301      	movs	r3, #1
 800e064:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d070      	beq.n	800e14e <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e06c:	69bb      	ldr	r3, [r7, #24]
 800e06e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e070:	2b00      	cmp	r3, #0
 800e072:	d10d      	bne.n	800e090 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800e074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e078:	b672      	cpsid	i
 800e07a:	f383 8811 	msr	BASEPRI, r3
 800e07e:	f3bf 8f6f 	isb	sy
 800e082:	f3bf 8f4f 	dsb	sy
 800e086:	b662      	cpsie	i
 800e088:	60fb      	str	r3, [r7, #12]
}
 800e08a:	bf00      	nop
 800e08c:	bf00      	nop
 800e08e:	e7fd      	b.n	800e08c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e090:	69bb      	ldr	r3, [r7, #24]
 800e092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e094:	683a      	ldr	r2, [r7, #0]
 800e096:	429a      	cmp	r2, r3
 800e098:	d902      	bls.n	800e0a0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	61fb      	str	r3, [r7, #28]
 800e09e:	e002      	b.n	800e0a6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e0a0:	69bb      	ldr	r3, [r7, #24]
 800e0a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0a4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e0a6:	69bb      	ldr	r3, [r7, #24]
 800e0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0aa:	69fa      	ldr	r2, [r7, #28]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d04e      	beq.n	800e14e <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e0b0:	69bb      	ldr	r3, [r7, #24]
 800e0b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0b4:	697a      	ldr	r2, [r7, #20]
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d149      	bne.n	800e14e <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e0ba:	4b27      	ldr	r3, [pc, #156]	@ (800e158 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	69ba      	ldr	r2, [r7, #24]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d10d      	bne.n	800e0e0 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800e0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0c8:	b672      	cpsid	i
 800e0ca:	f383 8811 	msr	BASEPRI, r3
 800e0ce:	f3bf 8f6f 	isb	sy
 800e0d2:	f3bf 8f4f 	dsb	sy
 800e0d6:	b662      	cpsie	i
 800e0d8:	60bb      	str	r3, [r7, #8]
}
 800e0da:	bf00      	nop
 800e0dc:	bf00      	nop
 800e0de:	e7fd      	b.n	800e0dc <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e0e0:	69bb      	ldr	r3, [r7, #24]
 800e0e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e0e6:	69bb      	ldr	r3, [r7, #24]
 800e0e8:	69fa      	ldr	r2, [r7, #28]
 800e0ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	699b      	ldr	r3, [r3, #24]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	db04      	blt.n	800e0fe <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e0fa:	69bb      	ldr	r3, [r7, #24]
 800e0fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e0fe:	69bb      	ldr	r3, [r7, #24]
 800e100:	6959      	ldr	r1, [r3, #20]
 800e102:	693a      	ldr	r2, [r7, #16]
 800e104:	4613      	mov	r3, r2
 800e106:	009b      	lsls	r3, r3, #2
 800e108:	4413      	add	r3, r2
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4a13      	ldr	r2, [pc, #76]	@ (800e15c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800e10e:	4413      	add	r3, r2
 800e110:	4299      	cmp	r1, r3
 800e112:	d11c      	bne.n	800e14e <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e114:	69bb      	ldr	r3, [r7, #24]
 800e116:	3304      	adds	r3, #4
 800e118:	4618      	mov	r0, r3
 800e11a:	f7fe f81d 	bl	800c158 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e122:	4b0f      	ldr	r3, [pc, #60]	@ (800e160 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	429a      	cmp	r2, r3
 800e128:	d903      	bls.n	800e132 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800e12a:	69bb      	ldr	r3, [r7, #24]
 800e12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e12e:	4a0c      	ldr	r2, [pc, #48]	@ (800e160 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800e130:	6013      	str	r3, [r2, #0]
 800e132:	69bb      	ldr	r3, [r7, #24]
 800e134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e136:	4613      	mov	r3, r2
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	4413      	add	r3, r2
 800e13c:	009b      	lsls	r3, r3, #2
 800e13e:	4a07      	ldr	r2, [pc, #28]	@ (800e15c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800e140:	441a      	add	r2, r3
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	3304      	adds	r3, #4
 800e146:	4619      	mov	r1, r3
 800e148:	4610      	mov	r0, r2
 800e14a:	f7fd ffa8 	bl	800c09e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e14e:	bf00      	nop
 800e150:	3720      	adds	r7, #32
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	20001150 	.word	0x20001150
 800e15c:	20001154 	.word	0x20001154
 800e160:	2000162c 	.word	0x2000162c

0800e164 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e164:	b480      	push	{r7}
 800e166:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e168:	4b07      	ldr	r3, [pc, #28]	@ (800e188 <pvTaskIncrementMutexHeldCount+0x24>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d004      	beq.n	800e17a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e170:	4b05      	ldr	r3, [pc, #20]	@ (800e188 <pvTaskIncrementMutexHeldCount+0x24>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e176:	3201      	adds	r2, #1
 800e178:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800e17a:	4b03      	ldr	r3, [pc, #12]	@ (800e188 <pvTaskIncrementMutexHeldCount+0x24>)
 800e17c:	681b      	ldr	r3, [r3, #0]
	}
 800e17e:	4618      	mov	r0, r3
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr
 800e188:	20001150 	.word	0x20001150

0800e18c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e196:	4b21      	ldr	r3, [pc, #132]	@ (800e21c <prvAddCurrentTaskToDelayedList+0x90>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e19c:	4b20      	ldr	r3, [pc, #128]	@ (800e220 <prvAddCurrentTaskToDelayedList+0x94>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	3304      	adds	r3, #4
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fd ffd8 	bl	800c158 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e1ae:	d10a      	bne.n	800e1c6 <prvAddCurrentTaskToDelayedList+0x3a>
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d007      	beq.n	800e1c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1b6:	4b1a      	ldr	r3, [pc, #104]	@ (800e220 <prvAddCurrentTaskToDelayedList+0x94>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	3304      	adds	r3, #4
 800e1bc:	4619      	mov	r1, r3
 800e1be:	4819      	ldr	r0, [pc, #100]	@ (800e224 <prvAddCurrentTaskToDelayedList+0x98>)
 800e1c0:	f7fd ff6d 	bl	800c09e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e1c4:	e026      	b.n	800e214 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e1c6:	68fa      	ldr	r2, [r7, #12]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	4413      	add	r3, r2
 800e1cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e1ce:	4b14      	ldr	r3, [pc, #80]	@ (800e220 <prvAddCurrentTaskToDelayedList+0x94>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	68ba      	ldr	r2, [r7, #8]
 800e1d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e1d6:	68ba      	ldr	r2, [r7, #8]
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d209      	bcs.n	800e1f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1de:	4b12      	ldr	r3, [pc, #72]	@ (800e228 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e1e0:	681a      	ldr	r2, [r3, #0]
 800e1e2:	4b0f      	ldr	r3, [pc, #60]	@ (800e220 <prvAddCurrentTaskToDelayedList+0x94>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	3304      	adds	r3, #4
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	4610      	mov	r0, r2
 800e1ec:	f7fd ff7b 	bl	800c0e6 <vListInsert>
}
 800e1f0:	e010      	b.n	800e214 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1f2:	4b0e      	ldr	r3, [pc, #56]	@ (800e22c <prvAddCurrentTaskToDelayedList+0xa0>)
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	4b0a      	ldr	r3, [pc, #40]	@ (800e220 <prvAddCurrentTaskToDelayedList+0x94>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	3304      	adds	r3, #4
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	4610      	mov	r0, r2
 800e200:	f7fd ff71 	bl	800c0e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e204:	4b0a      	ldr	r3, [pc, #40]	@ (800e230 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	68ba      	ldr	r2, [r7, #8]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d202      	bcs.n	800e214 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e20e:	4a08      	ldr	r2, [pc, #32]	@ (800e230 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	6013      	str	r3, [r2, #0]
}
 800e214:	bf00      	nop
 800e216:	3710      	adds	r7, #16
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	20001628 	.word	0x20001628
 800e220:	20001150 	.word	0x20001150
 800e224:	20001610 	.word	0x20001610
 800e228:	200015e0 	.word	0x200015e0
 800e22c:	200015dc 	.word	0x200015dc
 800e230:	20001644 	.word	0x20001644

0800e234 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b08a      	sub	sp, #40	@ 0x28
 800e238:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e23a:	2300      	movs	r3, #0
 800e23c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e23e:	f000 fb21 	bl	800e884 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e242:	4b1e      	ldr	r3, [pc, #120]	@ (800e2bc <xTimerCreateTimerTask+0x88>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d021      	beq.n	800e28e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e24a:	2300      	movs	r3, #0
 800e24c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e24e:	2300      	movs	r3, #0
 800e250:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e252:	1d3a      	adds	r2, r7, #4
 800e254:	f107 0108 	add.w	r1, r7, #8
 800e258:	f107 030c 	add.w	r3, r7, #12
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7fd fed7 	bl	800c010 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e262:	6879      	ldr	r1, [r7, #4]
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	68fa      	ldr	r2, [r7, #12]
 800e268:	9202      	str	r2, [sp, #8]
 800e26a:	9301      	str	r3, [sp, #4]
 800e26c:	2302      	movs	r3, #2
 800e26e:	9300      	str	r3, [sp, #0]
 800e270:	2300      	movs	r3, #0
 800e272:	460a      	mov	r2, r1
 800e274:	4912      	ldr	r1, [pc, #72]	@ (800e2c0 <xTimerCreateTimerTask+0x8c>)
 800e276:	4813      	ldr	r0, [pc, #76]	@ (800e2c4 <xTimerCreateTimerTask+0x90>)
 800e278:	f7fe ff6a 	bl	800d150 <xTaskCreateStatic>
 800e27c:	4603      	mov	r3, r0
 800e27e:	4a12      	ldr	r2, [pc, #72]	@ (800e2c8 <xTimerCreateTimerTask+0x94>)
 800e280:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e282:	4b11      	ldr	r3, [pc, #68]	@ (800e2c8 <xTimerCreateTimerTask+0x94>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d001      	beq.n	800e28e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e28a:	2301      	movs	r3, #1
 800e28c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d10d      	bne.n	800e2b0 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800e294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e298:	b672      	cpsid	i
 800e29a:	f383 8811 	msr	BASEPRI, r3
 800e29e:	f3bf 8f6f 	isb	sy
 800e2a2:	f3bf 8f4f 	dsb	sy
 800e2a6:	b662      	cpsie	i
 800e2a8:	613b      	str	r3, [r7, #16]
}
 800e2aa:	bf00      	nop
 800e2ac:	bf00      	nop
 800e2ae:	e7fd      	b.n	800e2ac <xTimerCreateTimerTask+0x78>
	return xReturn;
 800e2b0:	697b      	ldr	r3, [r7, #20]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3718      	adds	r7, #24
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	20001680 	.word	0x20001680
 800e2c0:	0801283c 	.word	0x0801283c
 800e2c4:	0800e40d 	.word	0x0800e40d
 800e2c8:	20001684 	.word	0x20001684

0800e2cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b08a      	sub	sp, #40	@ 0x28
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	607a      	str	r2, [r7, #4]
 800e2d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d10d      	bne.n	800e300 <xTimerGenericCommand+0x34>
	__asm volatile
 800e2e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e8:	b672      	cpsid	i
 800e2ea:	f383 8811 	msr	BASEPRI, r3
 800e2ee:	f3bf 8f6f 	isb	sy
 800e2f2:	f3bf 8f4f 	dsb	sy
 800e2f6:	b662      	cpsie	i
 800e2f8:	623b      	str	r3, [r7, #32]
}
 800e2fa:	bf00      	nop
 800e2fc:	bf00      	nop
 800e2fe:	e7fd      	b.n	800e2fc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e300:	4b19      	ldr	r3, [pc, #100]	@ (800e368 <xTimerGenericCommand+0x9c>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d02a      	beq.n	800e35e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	2b05      	cmp	r3, #5
 800e318:	dc18      	bgt.n	800e34c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e31a:	f7ff fda1 	bl	800de60 <xTaskGetSchedulerState>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b02      	cmp	r3, #2
 800e322:	d109      	bne.n	800e338 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e324:	4b10      	ldr	r3, [pc, #64]	@ (800e368 <xTimerGenericCommand+0x9c>)
 800e326:	6818      	ldr	r0, [r3, #0]
 800e328:	f107 0110 	add.w	r1, r7, #16
 800e32c:	2300      	movs	r3, #0
 800e32e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e330:	f7fe f952 	bl	800c5d8 <xQueueGenericSend>
 800e334:	6278      	str	r0, [r7, #36]	@ 0x24
 800e336:	e012      	b.n	800e35e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e338:	4b0b      	ldr	r3, [pc, #44]	@ (800e368 <xTimerGenericCommand+0x9c>)
 800e33a:	6818      	ldr	r0, [r3, #0]
 800e33c:	f107 0110 	add.w	r1, r7, #16
 800e340:	2300      	movs	r3, #0
 800e342:	2200      	movs	r2, #0
 800e344:	f7fe f948 	bl	800c5d8 <xQueueGenericSend>
 800e348:	6278      	str	r0, [r7, #36]	@ 0x24
 800e34a:	e008      	b.n	800e35e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e34c:	4b06      	ldr	r3, [pc, #24]	@ (800e368 <xTimerGenericCommand+0x9c>)
 800e34e:	6818      	ldr	r0, [r3, #0]
 800e350:	f107 0110 	add.w	r1, r7, #16
 800e354:	2300      	movs	r3, #0
 800e356:	683a      	ldr	r2, [r7, #0]
 800e358:	f7fe fa48 	bl	800c7ec <xQueueGenericSendFromISR>
 800e35c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e360:	4618      	mov	r0, r3
 800e362:	3728      	adds	r7, #40	@ 0x28
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	20001680 	.word	0x20001680

0800e36c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b088      	sub	sp, #32
 800e370:	af02      	add	r7, sp, #8
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e376:	4b24      	ldr	r3, [pc, #144]	@ (800e408 <prvProcessExpiredTimer+0x9c>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	68db      	ldr	r3, [r3, #12]
 800e37c:	68db      	ldr	r3, [r3, #12]
 800e37e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	3304      	adds	r3, #4
 800e384:	4618      	mov	r0, r3
 800e386:	f7fd fee7 	bl	800c158 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e390:	f003 0304 	and.w	r3, r3, #4
 800e394:	2b00      	cmp	r3, #0
 800e396:	d025      	beq.n	800e3e4 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	699a      	ldr	r2, [r3, #24]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	18d1      	adds	r1, r2, r3
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	683a      	ldr	r2, [r7, #0]
 800e3a4:	6978      	ldr	r0, [r7, #20]
 800e3a6:	f000 f8d7 	bl	800e558 <prvInsertTimerInActiveList>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d022      	beq.n	800e3f6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	9300      	str	r3, [sp, #0]
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	2100      	movs	r1, #0
 800e3ba:	6978      	ldr	r0, [r7, #20]
 800e3bc:	f7ff ff86 	bl	800e2cc <xTimerGenericCommand>
 800e3c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d116      	bne.n	800e3f6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800e3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3cc:	b672      	cpsid	i
 800e3ce:	f383 8811 	msr	BASEPRI, r3
 800e3d2:	f3bf 8f6f 	isb	sy
 800e3d6:	f3bf 8f4f 	dsb	sy
 800e3da:	b662      	cpsie	i
 800e3dc:	60fb      	str	r3, [r7, #12]
}
 800e3de:	bf00      	nop
 800e3e0:	bf00      	nop
 800e3e2:	e7fd      	b.n	800e3e0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3ea:	f023 0301 	bic.w	r3, r3, #1
 800e3ee:	b2da      	uxtb	r2, r3
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	6a1b      	ldr	r3, [r3, #32]
 800e3fa:	6978      	ldr	r0, [r7, #20]
 800e3fc:	4798      	blx	r3
}
 800e3fe:	bf00      	nop
 800e400:	3718      	adds	r7, #24
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	20001678 	.word	0x20001678

0800e40c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b084      	sub	sp, #16
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e414:	f107 0308 	add.w	r3, r7, #8
 800e418:	4618      	mov	r0, r3
 800e41a:	f000 f859 	bl	800e4d0 <prvGetNextExpireTime>
 800e41e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	4619      	mov	r1, r3
 800e424:	68f8      	ldr	r0, [r7, #12]
 800e426:	f000 f805 	bl	800e434 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e42a:	f000 f8d7 	bl	800e5dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e42e:	bf00      	nop
 800e430:	e7f0      	b.n	800e414 <prvTimerTask+0x8>
	...

0800e434 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e43e:	f7ff f8f9 	bl	800d634 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e442:	f107 0308 	add.w	r3, r7, #8
 800e446:	4618      	mov	r0, r3
 800e448:	f000 f866 	bl	800e518 <prvSampleTimeNow>
 800e44c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d130      	bne.n	800e4b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d10a      	bne.n	800e470 <prvProcessTimerOrBlockTask+0x3c>
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	429a      	cmp	r2, r3
 800e460:	d806      	bhi.n	800e470 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e462:	f7ff f8f5 	bl	800d650 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e466:	68f9      	ldr	r1, [r7, #12]
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f7ff ff7f 	bl	800e36c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e46e:	e024      	b.n	800e4ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d008      	beq.n	800e488 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e476:	4b13      	ldr	r3, [pc, #76]	@ (800e4c4 <prvProcessTimerOrBlockTask+0x90>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d101      	bne.n	800e484 <prvProcessTimerOrBlockTask+0x50>
 800e480:	2301      	movs	r3, #1
 800e482:	e000      	b.n	800e486 <prvProcessTimerOrBlockTask+0x52>
 800e484:	2300      	movs	r3, #0
 800e486:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e488:	4b0f      	ldr	r3, [pc, #60]	@ (800e4c8 <prvProcessTimerOrBlockTask+0x94>)
 800e48a:	6818      	ldr	r0, [r3, #0]
 800e48c:	687a      	ldr	r2, [r7, #4]
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	1ad3      	subs	r3, r2, r3
 800e492:	683a      	ldr	r2, [r7, #0]
 800e494:	4619      	mov	r1, r3
 800e496:	f7fe fe27 	bl	800d0e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e49a:	f7ff f8d9 	bl	800d650 <xTaskResumeAll>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d10a      	bne.n	800e4ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e4a4:	4b09      	ldr	r3, [pc, #36]	@ (800e4cc <prvProcessTimerOrBlockTask+0x98>)
 800e4a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4aa:	601a      	str	r2, [r3, #0]
 800e4ac:	f3bf 8f4f 	dsb	sy
 800e4b0:	f3bf 8f6f 	isb	sy
}
 800e4b4:	e001      	b.n	800e4ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e4b6:	f7ff f8cb 	bl	800d650 <xTaskResumeAll>
}
 800e4ba:	bf00      	nop
 800e4bc:	3710      	adds	r7, #16
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	2000167c 	.word	0x2000167c
 800e4c8:	20001680 	.word	0x20001680
 800e4cc:	e000ed04 	.word	0xe000ed04

0800e4d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b085      	sub	sp, #20
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e4d8:	4b0e      	ldr	r3, [pc, #56]	@ (800e514 <prvGetNextExpireTime+0x44>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d101      	bne.n	800e4e6 <prvGetNextExpireTime+0x16>
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	e000      	b.n	800e4e8 <prvGetNextExpireTime+0x18>
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d105      	bne.n	800e500 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e4f4:	4b07      	ldr	r3, [pc, #28]	@ (800e514 <prvGetNextExpireTime+0x44>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	68db      	ldr	r3, [r3, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	60fb      	str	r3, [r7, #12]
 800e4fe:	e001      	b.n	800e504 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e500:	2300      	movs	r3, #0
 800e502:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e504:	68fb      	ldr	r3, [r7, #12]
}
 800e506:	4618      	mov	r0, r3
 800e508:	3714      	adds	r7, #20
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr
 800e512:	bf00      	nop
 800e514:	20001678 	.word	0x20001678

0800e518 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e520:	f7ff f936 	bl	800d790 <xTaskGetTickCount>
 800e524:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e526:	4b0b      	ldr	r3, [pc, #44]	@ (800e554 <prvSampleTimeNow+0x3c>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	68fa      	ldr	r2, [r7, #12]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d205      	bcs.n	800e53c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e530:	f000 f940 	bl	800e7b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2201      	movs	r2, #1
 800e538:	601a      	str	r2, [r3, #0]
 800e53a:	e002      	b.n	800e542 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2200      	movs	r2, #0
 800e540:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e542:	4a04      	ldr	r2, [pc, #16]	@ (800e554 <prvSampleTimeNow+0x3c>)
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e548:	68fb      	ldr	r3, [r7, #12]
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3710      	adds	r7, #16
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	20001688 	.word	0x20001688

0800e558 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b086      	sub	sp, #24
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	607a      	str	r2, [r7, #4]
 800e564:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e566:	2300      	movs	r3, #0
 800e568:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	68ba      	ldr	r2, [r7, #8]
 800e56e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	68fa      	ldr	r2, [r7, #12]
 800e574:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e576:	68ba      	ldr	r2, [r7, #8]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d812      	bhi.n	800e5a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	1ad2      	subs	r2, r2, r3
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	699b      	ldr	r3, [r3, #24]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d302      	bcc.n	800e592 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e58c:	2301      	movs	r3, #1
 800e58e:	617b      	str	r3, [r7, #20]
 800e590:	e01b      	b.n	800e5ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e592:	4b10      	ldr	r3, [pc, #64]	@ (800e5d4 <prvInsertTimerInActiveList+0x7c>)
 800e594:	681a      	ldr	r2, [r3, #0]
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	3304      	adds	r3, #4
 800e59a:	4619      	mov	r1, r3
 800e59c:	4610      	mov	r0, r2
 800e59e:	f7fd fda2 	bl	800c0e6 <vListInsert>
 800e5a2:	e012      	b.n	800e5ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e5a4:	687a      	ldr	r2, [r7, #4]
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d206      	bcs.n	800e5ba <prvInsertTimerInActiveList+0x62>
 800e5ac:	68ba      	ldr	r2, [r7, #8]
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d302      	bcc.n	800e5ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	617b      	str	r3, [r7, #20]
 800e5b8:	e007      	b.n	800e5ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e5ba:	4b07      	ldr	r3, [pc, #28]	@ (800e5d8 <prvInsertTimerInActiveList+0x80>)
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	3304      	adds	r3, #4
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	4610      	mov	r0, r2
 800e5c6:	f7fd fd8e 	bl	800c0e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e5ca:	697b      	ldr	r3, [r7, #20]
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3718      	adds	r7, #24
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}
 800e5d4:	2000167c 	.word	0x2000167c
 800e5d8:	20001678 	.word	0x20001678

0800e5dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b08e      	sub	sp, #56	@ 0x38
 800e5e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e5e2:	e0d4      	b.n	800e78e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	da1b      	bge.n	800e622 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e5ea:	1d3b      	adds	r3, r7, #4
 800e5ec:	3304      	adds	r3, #4
 800e5ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d10d      	bne.n	800e612 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800e5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5fa:	b672      	cpsid	i
 800e5fc:	f383 8811 	msr	BASEPRI, r3
 800e600:	f3bf 8f6f 	isb	sy
 800e604:	f3bf 8f4f 	dsb	sy
 800e608:	b662      	cpsie	i
 800e60a:	61fb      	str	r3, [r7, #28]
}
 800e60c:	bf00      	nop
 800e60e:	bf00      	nop
 800e610:	e7fd      	b.n	800e60e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e618:	6850      	ldr	r0, [r2, #4]
 800e61a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e61c:	6892      	ldr	r2, [r2, #8]
 800e61e:	4611      	mov	r1, r2
 800e620:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2b00      	cmp	r3, #0
 800e626:	f2c0 80b2 	blt.w	800e78e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e630:	695b      	ldr	r3, [r3, #20]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d004      	beq.n	800e640 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e638:	3304      	adds	r3, #4
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7fd fd8c 	bl	800c158 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e640:	463b      	mov	r3, r7
 800e642:	4618      	mov	r0, r3
 800e644:	f7ff ff68 	bl	800e518 <prvSampleTimeNow>
 800e648:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2b09      	cmp	r3, #9
 800e64e:	f200 809b 	bhi.w	800e788 <prvProcessReceivedCommands+0x1ac>
 800e652:	a201      	add	r2, pc, #4	@ (adr r2, 800e658 <prvProcessReceivedCommands+0x7c>)
 800e654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e658:	0800e681 	.word	0x0800e681
 800e65c:	0800e681 	.word	0x0800e681
 800e660:	0800e681 	.word	0x0800e681
 800e664:	0800e6fb 	.word	0x0800e6fb
 800e668:	0800e70f 	.word	0x0800e70f
 800e66c:	0800e75f 	.word	0x0800e75f
 800e670:	0800e681 	.word	0x0800e681
 800e674:	0800e681 	.word	0x0800e681
 800e678:	0800e6fb 	.word	0x0800e6fb
 800e67c:	0800e70f 	.word	0x0800e70f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e682:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e686:	f043 0301 	orr.w	r3, r3, #1
 800e68a:	b2da      	uxtb	r2, r3
 800e68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e68e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e692:	68ba      	ldr	r2, [r7, #8]
 800e694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e696:	699b      	ldr	r3, [r3, #24]
 800e698:	18d1      	adds	r1, r2, r3
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e69e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e6a0:	f7ff ff5a 	bl	800e558 <prvInsertTimerInActiveList>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d070      	beq.n	800e78c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ac:	6a1b      	ldr	r3, [r3, #32]
 800e6ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e6b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e6b8:	f003 0304 	and.w	r3, r3, #4
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d065      	beq.n	800e78c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e6c0:	68ba      	ldr	r2, [r7, #8]
 800e6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6c4:	699b      	ldr	r3, [r3, #24]
 800e6c6:	441a      	add	r2, r3
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	9300      	str	r3, [sp, #0]
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	2100      	movs	r1, #0
 800e6d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e6d2:	f7ff fdfb 	bl	800e2cc <xTimerGenericCommand>
 800e6d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e6d8:	6a3b      	ldr	r3, [r7, #32]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d156      	bne.n	800e78c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800e6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6e2:	b672      	cpsid	i
 800e6e4:	f383 8811 	msr	BASEPRI, r3
 800e6e8:	f3bf 8f6f 	isb	sy
 800e6ec:	f3bf 8f4f 	dsb	sy
 800e6f0:	b662      	cpsie	i
 800e6f2:	61bb      	str	r3, [r7, #24]
}
 800e6f4:	bf00      	nop
 800e6f6:	bf00      	nop
 800e6f8:	e7fd      	b.n	800e6f6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e700:	f023 0301 	bic.w	r3, r3, #1
 800e704:	b2da      	uxtb	r2, r3
 800e706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e708:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e70c:	e03f      	b.n	800e78e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e70e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e710:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e714:	f043 0301 	orr.w	r3, r3, #1
 800e718:	b2da      	uxtb	r2, r3
 800e71a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e71c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e724:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e728:	699b      	ldr	r3, [r3, #24]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d10d      	bne.n	800e74a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800e72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e732:	b672      	cpsid	i
 800e734:	f383 8811 	msr	BASEPRI, r3
 800e738:	f3bf 8f6f 	isb	sy
 800e73c:	f3bf 8f4f 	dsb	sy
 800e740:	b662      	cpsie	i
 800e742:	617b      	str	r3, [r7, #20]
}
 800e744:	bf00      	nop
 800e746:	bf00      	nop
 800e748:	e7fd      	b.n	800e746 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e74c:	699a      	ldr	r2, [r3, #24]
 800e74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e750:	18d1      	adds	r1, r2, r3
 800e752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e758:	f7ff fefe 	bl	800e558 <prvInsertTimerInActiveList>
					break;
 800e75c:	e017      	b.n	800e78e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e760:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e764:	f003 0302 	and.w	r3, r3, #2
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d103      	bne.n	800e774 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800e76c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e76e:	f000 fbd1 	bl	800ef14 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e772:	e00c      	b.n	800e78e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e776:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e77a:	f023 0301 	bic.w	r3, r3, #1
 800e77e:	b2da      	uxtb	r2, r3
 800e780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e782:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e786:	e002      	b.n	800e78e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800e788:	bf00      	nop
 800e78a:	e000      	b.n	800e78e <prvProcessReceivedCommands+0x1b2>
					break;
 800e78c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e78e:	4b08      	ldr	r3, [pc, #32]	@ (800e7b0 <prvProcessReceivedCommands+0x1d4>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	1d39      	adds	r1, r7, #4
 800e794:	2200      	movs	r2, #0
 800e796:	4618      	mov	r0, r3
 800e798:	f7fe f8cc 	bl	800c934 <xQueueReceive>
 800e79c:	4603      	mov	r3, r0
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	f47f af20 	bne.w	800e5e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e7a4:	bf00      	nop
 800e7a6:	bf00      	nop
 800e7a8:	3730      	adds	r7, #48	@ 0x30
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	20001680 	.word	0x20001680

0800e7b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b088      	sub	sp, #32
 800e7b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e7ba:	e04b      	b.n	800e854 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e7bc:	4b2f      	ldr	r3, [pc, #188]	@ (800e87c <prvSwitchTimerLists+0xc8>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	68db      	ldr	r3, [r3, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7c6:	4b2d      	ldr	r3, [pc, #180]	@ (800e87c <prvSwitchTimerLists+0xc8>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	68db      	ldr	r3, [r3, #12]
 800e7cc:	68db      	ldr	r3, [r3, #12]
 800e7ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	3304      	adds	r3, #4
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7fd fcbf 	bl	800c158 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	6a1b      	ldr	r3, [r3, #32]
 800e7de:	68f8      	ldr	r0, [r7, #12]
 800e7e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7e8:	f003 0304 	and.w	r3, r3, #4
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d031      	beq.n	800e854 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	699b      	ldr	r3, [r3, #24]
 800e7f4:	693a      	ldr	r2, [r7, #16]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e7fa:	68ba      	ldr	r2, [r7, #8]
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d90e      	bls.n	800e820 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	68ba      	ldr	r2, [r7, #8]
 800e806:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	68fa      	ldr	r2, [r7, #12]
 800e80c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e80e:	4b1b      	ldr	r3, [pc, #108]	@ (800e87c <prvSwitchTimerLists+0xc8>)
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	3304      	adds	r3, #4
 800e816:	4619      	mov	r1, r3
 800e818:	4610      	mov	r0, r2
 800e81a:	f7fd fc64 	bl	800c0e6 <vListInsert>
 800e81e:	e019      	b.n	800e854 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e820:	2300      	movs	r3, #0
 800e822:	9300      	str	r3, [sp, #0]
 800e824:	2300      	movs	r3, #0
 800e826:	693a      	ldr	r2, [r7, #16]
 800e828:	2100      	movs	r1, #0
 800e82a:	68f8      	ldr	r0, [r7, #12]
 800e82c:	f7ff fd4e 	bl	800e2cc <xTimerGenericCommand>
 800e830:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d10d      	bne.n	800e854 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800e838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e83c:	b672      	cpsid	i
 800e83e:	f383 8811 	msr	BASEPRI, r3
 800e842:	f3bf 8f6f 	isb	sy
 800e846:	f3bf 8f4f 	dsb	sy
 800e84a:	b662      	cpsie	i
 800e84c:	603b      	str	r3, [r7, #0]
}
 800e84e:	bf00      	nop
 800e850:	bf00      	nop
 800e852:	e7fd      	b.n	800e850 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e854:	4b09      	ldr	r3, [pc, #36]	@ (800e87c <prvSwitchTimerLists+0xc8>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d1ae      	bne.n	800e7bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e85e:	4b07      	ldr	r3, [pc, #28]	@ (800e87c <prvSwitchTimerLists+0xc8>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e864:	4b06      	ldr	r3, [pc, #24]	@ (800e880 <prvSwitchTimerLists+0xcc>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	4a04      	ldr	r2, [pc, #16]	@ (800e87c <prvSwitchTimerLists+0xc8>)
 800e86a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e86c:	4a04      	ldr	r2, [pc, #16]	@ (800e880 <prvSwitchTimerLists+0xcc>)
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	6013      	str	r3, [r2, #0]
}
 800e872:	bf00      	nop
 800e874:	3718      	adds	r7, #24
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	20001678 	.word	0x20001678
 800e880:	2000167c 	.word	0x2000167c

0800e884 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e88a:	f000 f947 	bl	800eb1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e88e:	4b15      	ldr	r3, [pc, #84]	@ (800e8e4 <prvCheckForValidListAndQueue+0x60>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d120      	bne.n	800e8d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e896:	4814      	ldr	r0, [pc, #80]	@ (800e8e8 <prvCheckForValidListAndQueue+0x64>)
 800e898:	f7fd fbd4 	bl	800c044 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e89c:	4813      	ldr	r0, [pc, #76]	@ (800e8ec <prvCheckForValidListAndQueue+0x68>)
 800e89e:	f7fd fbd1 	bl	800c044 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e8a2:	4b13      	ldr	r3, [pc, #76]	@ (800e8f0 <prvCheckForValidListAndQueue+0x6c>)
 800e8a4:	4a10      	ldr	r2, [pc, #64]	@ (800e8e8 <prvCheckForValidListAndQueue+0x64>)
 800e8a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e8a8:	4b12      	ldr	r3, [pc, #72]	@ (800e8f4 <prvCheckForValidListAndQueue+0x70>)
 800e8aa:	4a10      	ldr	r2, [pc, #64]	@ (800e8ec <prvCheckForValidListAndQueue+0x68>)
 800e8ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	9300      	str	r3, [sp, #0]
 800e8b2:	4b11      	ldr	r3, [pc, #68]	@ (800e8f8 <prvCheckForValidListAndQueue+0x74>)
 800e8b4:	4a11      	ldr	r2, [pc, #68]	@ (800e8fc <prvCheckForValidListAndQueue+0x78>)
 800e8b6:	2110      	movs	r1, #16
 800e8b8:	200a      	movs	r0, #10
 800e8ba:	f7fd fce3 	bl	800c284 <xQueueGenericCreateStatic>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	4a08      	ldr	r2, [pc, #32]	@ (800e8e4 <prvCheckForValidListAndQueue+0x60>)
 800e8c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e8c4:	4b07      	ldr	r3, [pc, #28]	@ (800e8e4 <prvCheckForValidListAndQueue+0x60>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d005      	beq.n	800e8d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e8cc:	4b05      	ldr	r3, [pc, #20]	@ (800e8e4 <prvCheckForValidListAndQueue+0x60>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	490b      	ldr	r1, [pc, #44]	@ (800e900 <prvCheckForValidListAndQueue+0x7c>)
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f7fe fbde 	bl	800d094 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e8d8:	f000 f956 	bl	800eb88 <vPortExitCritical>
}
 800e8dc:	bf00      	nop
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	20001680 	.word	0x20001680
 800e8e8:	20001650 	.word	0x20001650
 800e8ec:	20001664 	.word	0x20001664
 800e8f0:	20001678 	.word	0x20001678
 800e8f4:	2000167c 	.word	0x2000167c
 800e8f8:	2000172c 	.word	0x2000172c
 800e8fc:	2000168c 	.word	0x2000168c
 800e900:	08012844 	.word	0x08012844

0800e904 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e904:	b480      	push	{r7}
 800e906:	b085      	sub	sp, #20
 800e908:	af00      	add	r7, sp, #0
 800e90a:	60f8      	str	r0, [r7, #12]
 800e90c:	60b9      	str	r1, [r7, #8]
 800e90e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	3b04      	subs	r3, #4
 800e914:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e91c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	3b04      	subs	r3, #4
 800e922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	f023 0201 	bic.w	r2, r3, #1
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	3b04      	subs	r3, #4
 800e932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e934:	4a0c      	ldr	r2, [pc, #48]	@ (800e968 <pxPortInitialiseStack+0x64>)
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	3b14      	subs	r3, #20
 800e93e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	3b04      	subs	r3, #4
 800e94a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f06f 0202 	mvn.w	r2, #2
 800e952:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	3b20      	subs	r3, #32
 800e958:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e95a:	68fb      	ldr	r3, [r7, #12]
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3714      	adds	r7, #20
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr
 800e968:	0800e96d 	.word	0x0800e96d

0800e96c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e96c:	b480      	push	{r7}
 800e96e:	b085      	sub	sp, #20
 800e970:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e972:	2300      	movs	r3, #0
 800e974:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e976:	4b15      	ldr	r3, [pc, #84]	@ (800e9cc <prvTaskExitError+0x60>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e97e:	d00d      	beq.n	800e99c <prvTaskExitError+0x30>
	__asm volatile
 800e980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e984:	b672      	cpsid	i
 800e986:	f383 8811 	msr	BASEPRI, r3
 800e98a:	f3bf 8f6f 	isb	sy
 800e98e:	f3bf 8f4f 	dsb	sy
 800e992:	b662      	cpsie	i
 800e994:	60fb      	str	r3, [r7, #12]
}
 800e996:	bf00      	nop
 800e998:	bf00      	nop
 800e99a:	e7fd      	b.n	800e998 <prvTaskExitError+0x2c>
	__asm volatile
 800e99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9a0:	b672      	cpsid	i
 800e9a2:	f383 8811 	msr	BASEPRI, r3
 800e9a6:	f3bf 8f6f 	isb	sy
 800e9aa:	f3bf 8f4f 	dsb	sy
 800e9ae:	b662      	cpsie	i
 800e9b0:	60bb      	str	r3, [r7, #8]
}
 800e9b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e9b4:	bf00      	nop
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d0fc      	beq.n	800e9b6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e9bc:	bf00      	nop
 800e9be:	bf00      	nop
 800e9c0:	3714      	adds	r7, #20
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr
 800e9ca:	bf00      	nop
 800e9cc:	20000024 	.word	0x20000024

0800e9d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e9d0:	4b07      	ldr	r3, [pc, #28]	@ (800e9f0 <pxCurrentTCBConst2>)
 800e9d2:	6819      	ldr	r1, [r3, #0]
 800e9d4:	6808      	ldr	r0, [r1, #0]
 800e9d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9da:	f380 8809 	msr	PSP, r0
 800e9de:	f3bf 8f6f 	isb	sy
 800e9e2:	f04f 0000 	mov.w	r0, #0
 800e9e6:	f380 8811 	msr	BASEPRI, r0
 800e9ea:	4770      	bx	lr
 800e9ec:	f3af 8000 	nop.w

0800e9f0 <pxCurrentTCBConst2>:
 800e9f0:	20001150 	.word	0x20001150
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e9f4:	bf00      	nop
 800e9f6:	bf00      	nop

0800e9f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e9f8:	4808      	ldr	r0, [pc, #32]	@ (800ea1c <prvPortStartFirstTask+0x24>)
 800e9fa:	6800      	ldr	r0, [r0, #0]
 800e9fc:	6800      	ldr	r0, [r0, #0]
 800e9fe:	f380 8808 	msr	MSP, r0
 800ea02:	f04f 0000 	mov.w	r0, #0
 800ea06:	f380 8814 	msr	CONTROL, r0
 800ea0a:	b662      	cpsie	i
 800ea0c:	b661      	cpsie	f
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	f3bf 8f6f 	isb	sy
 800ea16:	df00      	svc	0
 800ea18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ea1a:	bf00      	nop
 800ea1c:	e000ed08 	.word	0xe000ed08

0800ea20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ea26:	4b37      	ldr	r3, [pc, #220]	@ (800eb04 <xPortStartScheduler+0xe4>)
 800ea28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	b2db      	uxtb	r3, r3
 800ea30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	22ff      	movs	r2, #255	@ 0xff
 800ea36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ea40:	78fb      	ldrb	r3, [r7, #3]
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ea48:	b2da      	uxtb	r2, r3
 800ea4a:	4b2f      	ldr	r3, [pc, #188]	@ (800eb08 <xPortStartScheduler+0xe8>)
 800ea4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ea4e:	4b2f      	ldr	r3, [pc, #188]	@ (800eb0c <xPortStartScheduler+0xec>)
 800ea50:	2207      	movs	r2, #7
 800ea52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ea54:	e009      	b.n	800ea6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ea56:	4b2d      	ldr	r3, [pc, #180]	@ (800eb0c <xPortStartScheduler+0xec>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	3b01      	subs	r3, #1
 800ea5c:	4a2b      	ldr	r2, [pc, #172]	@ (800eb0c <xPortStartScheduler+0xec>)
 800ea5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ea60:	78fb      	ldrb	r3, [r7, #3]
 800ea62:	b2db      	uxtb	r3, r3
 800ea64:	005b      	lsls	r3, r3, #1
 800ea66:	b2db      	uxtb	r3, r3
 800ea68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ea6a:	78fb      	ldrb	r3, [r7, #3]
 800ea6c:	b2db      	uxtb	r3, r3
 800ea6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea72:	2b80      	cmp	r3, #128	@ 0x80
 800ea74:	d0ef      	beq.n	800ea56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ea76:	4b25      	ldr	r3, [pc, #148]	@ (800eb0c <xPortStartScheduler+0xec>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f1c3 0307 	rsb	r3, r3, #7
 800ea7e:	2b04      	cmp	r3, #4
 800ea80:	d00d      	beq.n	800ea9e <xPortStartScheduler+0x7e>
	__asm volatile
 800ea82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea86:	b672      	cpsid	i
 800ea88:	f383 8811 	msr	BASEPRI, r3
 800ea8c:	f3bf 8f6f 	isb	sy
 800ea90:	f3bf 8f4f 	dsb	sy
 800ea94:	b662      	cpsie	i
 800ea96:	60bb      	str	r3, [r7, #8]
}
 800ea98:	bf00      	nop
 800ea9a:	bf00      	nop
 800ea9c:	e7fd      	b.n	800ea9a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ea9e:	4b1b      	ldr	r3, [pc, #108]	@ (800eb0c <xPortStartScheduler+0xec>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	021b      	lsls	r3, r3, #8
 800eaa4:	4a19      	ldr	r2, [pc, #100]	@ (800eb0c <xPortStartScheduler+0xec>)
 800eaa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eaa8:	4b18      	ldr	r3, [pc, #96]	@ (800eb0c <xPortStartScheduler+0xec>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800eab0:	4a16      	ldr	r2, [pc, #88]	@ (800eb0c <xPortStartScheduler+0xec>)
 800eab2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	b2da      	uxtb	r2, r3
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eabc:	4b14      	ldr	r3, [pc, #80]	@ (800eb10 <xPortStartScheduler+0xf0>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a13      	ldr	r2, [pc, #76]	@ (800eb10 <xPortStartScheduler+0xf0>)
 800eac2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800eac6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eac8:	4b11      	ldr	r3, [pc, #68]	@ (800eb10 <xPortStartScheduler+0xf0>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4a10      	ldr	r2, [pc, #64]	@ (800eb10 <xPortStartScheduler+0xf0>)
 800eace:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ead2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ead4:	f000 f8dc 	bl	800ec90 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ead8:	4b0e      	ldr	r3, [pc, #56]	@ (800eb14 <xPortStartScheduler+0xf4>)
 800eada:	2200      	movs	r2, #0
 800eadc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eade:	f000 f8fb 	bl	800ecd8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800eae2:	4b0d      	ldr	r3, [pc, #52]	@ (800eb18 <xPortStartScheduler+0xf8>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	4a0c      	ldr	r2, [pc, #48]	@ (800eb18 <xPortStartScheduler+0xf8>)
 800eae8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800eaec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eaee:	f7ff ff83 	bl	800e9f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eaf2:	f7fe ff19 	bl	800d928 <vTaskSwitchContext>
	prvTaskExitError();
 800eaf6:	f7ff ff39 	bl	800e96c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eafa:	2300      	movs	r3, #0
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3710      	adds	r7, #16
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	e000e400 	.word	0xe000e400
 800eb08:	2000177c 	.word	0x2000177c
 800eb0c:	20001780 	.word	0x20001780
 800eb10:	e000ed20 	.word	0xe000ed20
 800eb14:	20000024 	.word	0x20000024
 800eb18:	e000ef34 	.word	0xe000ef34

0800eb1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b083      	sub	sp, #12
 800eb20:	af00      	add	r7, sp, #0
	__asm volatile
 800eb22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb26:	b672      	cpsid	i
 800eb28:	f383 8811 	msr	BASEPRI, r3
 800eb2c:	f3bf 8f6f 	isb	sy
 800eb30:	f3bf 8f4f 	dsb	sy
 800eb34:	b662      	cpsie	i
 800eb36:	607b      	str	r3, [r7, #4]
}
 800eb38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800eb3a:	4b11      	ldr	r3, [pc, #68]	@ (800eb80 <vPortEnterCritical+0x64>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	3301      	adds	r3, #1
 800eb40:	4a0f      	ldr	r2, [pc, #60]	@ (800eb80 <vPortEnterCritical+0x64>)
 800eb42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eb44:	4b0e      	ldr	r3, [pc, #56]	@ (800eb80 <vPortEnterCritical+0x64>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	d112      	bne.n	800eb72 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eb4c:	4b0d      	ldr	r3, [pc, #52]	@ (800eb84 <vPortEnterCritical+0x68>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d00d      	beq.n	800eb72 <vPortEnterCritical+0x56>
	__asm volatile
 800eb56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb5a:	b672      	cpsid	i
 800eb5c:	f383 8811 	msr	BASEPRI, r3
 800eb60:	f3bf 8f6f 	isb	sy
 800eb64:	f3bf 8f4f 	dsb	sy
 800eb68:	b662      	cpsie	i
 800eb6a:	603b      	str	r3, [r7, #0]
}
 800eb6c:	bf00      	nop
 800eb6e:	bf00      	nop
 800eb70:	e7fd      	b.n	800eb6e <vPortEnterCritical+0x52>
	}
}
 800eb72:	bf00      	nop
 800eb74:	370c      	adds	r7, #12
 800eb76:	46bd      	mov	sp, r7
 800eb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7c:	4770      	bx	lr
 800eb7e:	bf00      	nop
 800eb80:	20000024 	.word	0x20000024
 800eb84:	e000ed04 	.word	0xe000ed04

0800eb88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eb8e:	4b13      	ldr	r3, [pc, #76]	@ (800ebdc <vPortExitCritical+0x54>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d10d      	bne.n	800ebb2 <vPortExitCritical+0x2a>
	__asm volatile
 800eb96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb9a:	b672      	cpsid	i
 800eb9c:	f383 8811 	msr	BASEPRI, r3
 800eba0:	f3bf 8f6f 	isb	sy
 800eba4:	f3bf 8f4f 	dsb	sy
 800eba8:	b662      	cpsie	i
 800ebaa:	607b      	str	r3, [r7, #4]
}
 800ebac:	bf00      	nop
 800ebae:	bf00      	nop
 800ebb0:	e7fd      	b.n	800ebae <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ebb2:	4b0a      	ldr	r3, [pc, #40]	@ (800ebdc <vPortExitCritical+0x54>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	3b01      	subs	r3, #1
 800ebb8:	4a08      	ldr	r2, [pc, #32]	@ (800ebdc <vPortExitCritical+0x54>)
 800ebba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ebbc:	4b07      	ldr	r3, [pc, #28]	@ (800ebdc <vPortExitCritical+0x54>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d105      	bne.n	800ebd0 <vPortExitCritical+0x48>
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	f383 8811 	msr	BASEPRI, r3
}
 800ebce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ebd0:	bf00      	nop
 800ebd2:	370c      	adds	r7, #12
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebda:	4770      	bx	lr
 800ebdc:	20000024 	.word	0x20000024

0800ebe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ebe0:	f3ef 8009 	mrs	r0, PSP
 800ebe4:	f3bf 8f6f 	isb	sy
 800ebe8:	4b15      	ldr	r3, [pc, #84]	@ (800ec40 <pxCurrentTCBConst>)
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	f01e 0f10 	tst.w	lr, #16
 800ebf0:	bf08      	it	eq
 800ebf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ebf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebfa:	6010      	str	r0, [r2, #0]
 800ebfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ec00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ec04:	b672      	cpsid	i
 800ec06:	f380 8811 	msr	BASEPRI, r0
 800ec0a:	f3bf 8f4f 	dsb	sy
 800ec0e:	f3bf 8f6f 	isb	sy
 800ec12:	b662      	cpsie	i
 800ec14:	f7fe fe88 	bl	800d928 <vTaskSwitchContext>
 800ec18:	f04f 0000 	mov.w	r0, #0
 800ec1c:	f380 8811 	msr	BASEPRI, r0
 800ec20:	bc09      	pop	{r0, r3}
 800ec22:	6819      	ldr	r1, [r3, #0]
 800ec24:	6808      	ldr	r0, [r1, #0]
 800ec26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec2a:	f01e 0f10 	tst.w	lr, #16
 800ec2e:	bf08      	it	eq
 800ec30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ec34:	f380 8809 	msr	PSP, r0
 800ec38:	f3bf 8f6f 	isb	sy
 800ec3c:	4770      	bx	lr
 800ec3e:	bf00      	nop

0800ec40 <pxCurrentTCBConst>:
 800ec40:	20001150 	.word	0x20001150
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ec44:	bf00      	nop
 800ec46:	bf00      	nop

0800ec48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ec4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec52:	b672      	cpsid	i
 800ec54:	f383 8811 	msr	BASEPRI, r3
 800ec58:	f3bf 8f6f 	isb	sy
 800ec5c:	f3bf 8f4f 	dsb	sy
 800ec60:	b662      	cpsie	i
 800ec62:	607b      	str	r3, [r7, #4]
}
 800ec64:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ec66:	f7fe fda3 	bl	800d7b0 <xTaskIncrementTick>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d003      	beq.n	800ec78 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ec70:	4b06      	ldr	r3, [pc, #24]	@ (800ec8c <SysTick_Handler+0x44>)
 800ec72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec76:	601a      	str	r2, [r3, #0]
 800ec78:	2300      	movs	r3, #0
 800ec7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	f383 8811 	msr	BASEPRI, r3
}
 800ec82:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ec84:	bf00      	nop
 800ec86:	3708      	adds	r7, #8
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	e000ed04 	.word	0xe000ed04

0800ec90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ec90:	b480      	push	{r7}
 800ec92:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ec94:	4b0b      	ldr	r3, [pc, #44]	@ (800ecc4 <vPortSetupTimerInterrupt+0x34>)
 800ec96:	2200      	movs	r2, #0
 800ec98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ec9a:	4b0b      	ldr	r3, [pc, #44]	@ (800ecc8 <vPortSetupTimerInterrupt+0x38>)
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eca0:	4b0a      	ldr	r3, [pc, #40]	@ (800eccc <vPortSetupTimerInterrupt+0x3c>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	4a0a      	ldr	r2, [pc, #40]	@ (800ecd0 <vPortSetupTimerInterrupt+0x40>)
 800eca6:	fba2 2303 	umull	r2, r3, r2, r3
 800ecaa:	099b      	lsrs	r3, r3, #6
 800ecac:	4a09      	ldr	r2, [pc, #36]	@ (800ecd4 <vPortSetupTimerInterrupt+0x44>)
 800ecae:	3b01      	subs	r3, #1
 800ecb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ecb2:	4b04      	ldr	r3, [pc, #16]	@ (800ecc4 <vPortSetupTimerInterrupt+0x34>)
 800ecb4:	2207      	movs	r2, #7
 800ecb6:	601a      	str	r2, [r3, #0]
}
 800ecb8:	bf00      	nop
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc0:	4770      	bx	lr
 800ecc2:	bf00      	nop
 800ecc4:	e000e010 	.word	0xe000e010
 800ecc8:	e000e018 	.word	0xe000e018
 800eccc:	20000004 	.word	0x20000004
 800ecd0:	10624dd3 	.word	0x10624dd3
 800ecd4:	e000e014 	.word	0xe000e014

0800ecd8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ecd8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ece8 <vPortEnableVFP+0x10>
 800ecdc:	6801      	ldr	r1, [r0, #0]
 800ecde:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ece2:	6001      	str	r1, [r0, #0]
 800ece4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ece6:	bf00      	nop
 800ece8:	e000ed88 	.word	0xe000ed88

0800ecec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ecec:	b480      	push	{r7}
 800ecee:	b085      	sub	sp, #20
 800ecf0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ecf2:	f3ef 8305 	mrs	r3, IPSR
 800ecf6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	2b0f      	cmp	r3, #15
 800ecfc:	d917      	bls.n	800ed2e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ecfe:	4a1a      	ldr	r2, [pc, #104]	@ (800ed68 <vPortValidateInterruptPriority+0x7c>)
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	4413      	add	r3, r2
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ed08:	4b18      	ldr	r3, [pc, #96]	@ (800ed6c <vPortValidateInterruptPriority+0x80>)
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	7afa      	ldrb	r2, [r7, #11]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d20d      	bcs.n	800ed2e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800ed12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed16:	b672      	cpsid	i
 800ed18:	f383 8811 	msr	BASEPRI, r3
 800ed1c:	f3bf 8f6f 	isb	sy
 800ed20:	f3bf 8f4f 	dsb	sy
 800ed24:	b662      	cpsie	i
 800ed26:	607b      	str	r3, [r7, #4]
}
 800ed28:	bf00      	nop
 800ed2a:	bf00      	nop
 800ed2c:	e7fd      	b.n	800ed2a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ed2e:	4b10      	ldr	r3, [pc, #64]	@ (800ed70 <vPortValidateInterruptPriority+0x84>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ed36:	4b0f      	ldr	r3, [pc, #60]	@ (800ed74 <vPortValidateInterruptPriority+0x88>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d90d      	bls.n	800ed5a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800ed3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed42:	b672      	cpsid	i
 800ed44:	f383 8811 	msr	BASEPRI, r3
 800ed48:	f3bf 8f6f 	isb	sy
 800ed4c:	f3bf 8f4f 	dsb	sy
 800ed50:	b662      	cpsie	i
 800ed52:	603b      	str	r3, [r7, #0]
}
 800ed54:	bf00      	nop
 800ed56:	bf00      	nop
 800ed58:	e7fd      	b.n	800ed56 <vPortValidateInterruptPriority+0x6a>
	}
 800ed5a:	bf00      	nop
 800ed5c:	3714      	adds	r7, #20
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop
 800ed68:	e000e3f0 	.word	0xe000e3f0
 800ed6c:	2000177c 	.word	0x2000177c
 800ed70:	e000ed0c 	.word	0xe000ed0c
 800ed74:	20001780 	.word	0x20001780

0800ed78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b08a      	sub	sp, #40	@ 0x28
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ed80:	2300      	movs	r3, #0
 800ed82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ed84:	f7fe fc56 	bl	800d634 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ed88:	4b5d      	ldr	r3, [pc, #372]	@ (800ef00 <pvPortMalloc+0x188>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d101      	bne.n	800ed94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ed90:	f000 f920 	bl	800efd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ed94:	4b5b      	ldr	r3, [pc, #364]	@ (800ef04 <pvPortMalloc+0x18c>)
 800ed96:	681a      	ldr	r2, [r3, #0]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	4013      	ands	r3, r2
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	f040 8094 	bne.w	800eeca <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d020      	beq.n	800edea <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800eda8:	2208      	movs	r2, #8
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	4413      	add	r3, r2
 800edae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f003 0307 	and.w	r3, r3, #7
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d017      	beq.n	800edea <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f023 0307 	bic.w	r3, r3, #7
 800edc0:	3308      	adds	r3, #8
 800edc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f003 0307 	and.w	r3, r3, #7
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d00d      	beq.n	800edea <pvPortMalloc+0x72>
	__asm volatile
 800edce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edd2:	b672      	cpsid	i
 800edd4:	f383 8811 	msr	BASEPRI, r3
 800edd8:	f3bf 8f6f 	isb	sy
 800eddc:	f3bf 8f4f 	dsb	sy
 800ede0:	b662      	cpsie	i
 800ede2:	617b      	str	r3, [r7, #20]
}
 800ede4:	bf00      	nop
 800ede6:	bf00      	nop
 800ede8:	e7fd      	b.n	800ede6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d06c      	beq.n	800eeca <pvPortMalloc+0x152>
 800edf0:	4b45      	ldr	r3, [pc, #276]	@ (800ef08 <pvPortMalloc+0x190>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	687a      	ldr	r2, [r7, #4]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d867      	bhi.n	800eeca <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800edfa:	4b44      	ldr	r3, [pc, #272]	@ (800ef0c <pvPortMalloc+0x194>)
 800edfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800edfe:	4b43      	ldr	r3, [pc, #268]	@ (800ef0c <pvPortMalloc+0x194>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ee04:	e004      	b.n	800ee10 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800ee06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ee0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ee10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee12:	685b      	ldr	r3, [r3, #4]
 800ee14:	687a      	ldr	r2, [r7, #4]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d903      	bls.n	800ee22 <pvPortMalloc+0xaa>
 800ee1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d1f1      	bne.n	800ee06 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ee22:	4b37      	ldr	r3, [pc, #220]	@ (800ef00 <pvPortMalloc+0x188>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d04e      	beq.n	800eeca <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ee2c:	6a3b      	ldr	r3, [r7, #32]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2208      	movs	r2, #8
 800ee32:	4413      	add	r3, r2
 800ee34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ee36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	6a3b      	ldr	r3, [r7, #32]
 800ee3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ee3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee40:	685a      	ldr	r2, [r3, #4]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	1ad2      	subs	r2, r2, r3
 800ee46:	2308      	movs	r3, #8
 800ee48:	005b      	lsls	r3, r3, #1
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d922      	bls.n	800ee94 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ee4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	4413      	add	r3, r2
 800ee54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee56:	69bb      	ldr	r3, [r7, #24]
 800ee58:	f003 0307 	and.w	r3, r3, #7
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d00d      	beq.n	800ee7c <pvPortMalloc+0x104>
	__asm volatile
 800ee60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee64:	b672      	cpsid	i
 800ee66:	f383 8811 	msr	BASEPRI, r3
 800ee6a:	f3bf 8f6f 	isb	sy
 800ee6e:	f3bf 8f4f 	dsb	sy
 800ee72:	b662      	cpsie	i
 800ee74:	613b      	str	r3, [r7, #16]
}
 800ee76:	bf00      	nop
 800ee78:	bf00      	nop
 800ee7a:	e7fd      	b.n	800ee78 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ee7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee7e:	685a      	ldr	r2, [r3, #4]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	1ad2      	subs	r2, r2, r3
 800ee84:	69bb      	ldr	r3, [r7, #24]
 800ee86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ee88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee8a:	687a      	ldr	r2, [r7, #4]
 800ee8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ee8e:	69b8      	ldr	r0, [r7, #24]
 800ee90:	f000 f902 	bl	800f098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ee94:	4b1c      	ldr	r3, [pc, #112]	@ (800ef08 <pvPortMalloc+0x190>)
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	1ad3      	subs	r3, r2, r3
 800ee9e:	4a1a      	ldr	r2, [pc, #104]	@ (800ef08 <pvPortMalloc+0x190>)
 800eea0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eea2:	4b19      	ldr	r3, [pc, #100]	@ (800ef08 <pvPortMalloc+0x190>)
 800eea4:	681a      	ldr	r2, [r3, #0]
 800eea6:	4b1a      	ldr	r3, [pc, #104]	@ (800ef10 <pvPortMalloc+0x198>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	d203      	bcs.n	800eeb6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eeae:	4b16      	ldr	r3, [pc, #88]	@ (800ef08 <pvPortMalloc+0x190>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4a17      	ldr	r2, [pc, #92]	@ (800ef10 <pvPortMalloc+0x198>)
 800eeb4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eeb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeb8:	685a      	ldr	r2, [r3, #4]
 800eeba:	4b12      	ldr	r3, [pc, #72]	@ (800ef04 <pvPortMalloc+0x18c>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	431a      	orrs	r2, r3
 800eec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eec2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eec6:	2200      	movs	r2, #0
 800eec8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eeca:	f7fe fbc1 	bl	800d650 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eece:	69fb      	ldr	r3, [r7, #28]
 800eed0:	f003 0307 	and.w	r3, r3, #7
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d00d      	beq.n	800eef4 <pvPortMalloc+0x17c>
	__asm volatile
 800eed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eedc:	b672      	cpsid	i
 800eede:	f383 8811 	msr	BASEPRI, r3
 800eee2:	f3bf 8f6f 	isb	sy
 800eee6:	f3bf 8f4f 	dsb	sy
 800eeea:	b662      	cpsie	i
 800eeec:	60fb      	str	r3, [r7, #12]
}
 800eeee:	bf00      	nop
 800eef0:	bf00      	nop
 800eef2:	e7fd      	b.n	800eef0 <pvPortMalloc+0x178>
	return pvReturn;
 800eef4:	69fb      	ldr	r3, [r7, #28]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3728      	adds	r7, #40	@ 0x28
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	2000778c 	.word	0x2000778c
 800ef04:	20007798 	.word	0x20007798
 800ef08:	20007790 	.word	0x20007790
 800ef0c:	20007784 	.word	0x20007784
 800ef10:	20007794 	.word	0x20007794

0800ef14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b086      	sub	sp, #24
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d04e      	beq.n	800efc4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ef26:	2308      	movs	r3, #8
 800ef28:	425b      	negs	r3, r3
 800ef2a:	697a      	ldr	r2, [r7, #20]
 800ef2c:	4413      	add	r3, r2
 800ef2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	685a      	ldr	r2, [r3, #4]
 800ef38:	4b24      	ldr	r3, [pc, #144]	@ (800efcc <vPortFree+0xb8>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4013      	ands	r3, r2
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d10d      	bne.n	800ef5e <vPortFree+0x4a>
	__asm volatile
 800ef42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef46:	b672      	cpsid	i
 800ef48:	f383 8811 	msr	BASEPRI, r3
 800ef4c:	f3bf 8f6f 	isb	sy
 800ef50:	f3bf 8f4f 	dsb	sy
 800ef54:	b662      	cpsie	i
 800ef56:	60fb      	str	r3, [r7, #12]
}
 800ef58:	bf00      	nop
 800ef5a:	bf00      	nop
 800ef5c:	e7fd      	b.n	800ef5a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d00d      	beq.n	800ef82 <vPortFree+0x6e>
	__asm volatile
 800ef66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef6a:	b672      	cpsid	i
 800ef6c:	f383 8811 	msr	BASEPRI, r3
 800ef70:	f3bf 8f6f 	isb	sy
 800ef74:	f3bf 8f4f 	dsb	sy
 800ef78:	b662      	cpsie	i
 800ef7a:	60bb      	str	r3, [r7, #8]
}
 800ef7c:	bf00      	nop
 800ef7e:	bf00      	nop
 800ef80:	e7fd      	b.n	800ef7e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	685a      	ldr	r2, [r3, #4]
 800ef86:	4b11      	ldr	r3, [pc, #68]	@ (800efcc <vPortFree+0xb8>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	4013      	ands	r3, r2
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d019      	beq.n	800efc4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d115      	bne.n	800efc4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	685a      	ldr	r2, [r3, #4]
 800ef9c:	4b0b      	ldr	r3, [pc, #44]	@ (800efcc <vPortFree+0xb8>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	43db      	mvns	r3, r3
 800efa2:	401a      	ands	r2, r3
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800efa8:	f7fe fb44 	bl	800d634 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	685a      	ldr	r2, [r3, #4]
 800efb0:	4b07      	ldr	r3, [pc, #28]	@ (800efd0 <vPortFree+0xbc>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4413      	add	r3, r2
 800efb6:	4a06      	ldr	r2, [pc, #24]	@ (800efd0 <vPortFree+0xbc>)
 800efb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800efba:	6938      	ldr	r0, [r7, #16]
 800efbc:	f000 f86c 	bl	800f098 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800efc0:	f7fe fb46 	bl	800d650 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800efc4:	bf00      	nop
 800efc6:	3718      	adds	r7, #24
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	20007798 	.word	0x20007798
 800efd0:	20007790 	.word	0x20007790

0800efd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800efd4:	b480      	push	{r7}
 800efd6:	b085      	sub	sp, #20
 800efd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800efda:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800efde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800efe0:	4b27      	ldr	r3, [pc, #156]	@ (800f080 <prvHeapInit+0xac>)
 800efe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	f003 0307 	and.w	r3, r3, #7
 800efea:	2b00      	cmp	r3, #0
 800efec:	d00c      	beq.n	800f008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	3307      	adds	r3, #7
 800eff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f023 0307 	bic.w	r3, r3, #7
 800effa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800effc:	68ba      	ldr	r2, [r7, #8]
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	1ad3      	subs	r3, r2, r3
 800f002:	4a1f      	ldr	r2, [pc, #124]	@ (800f080 <prvHeapInit+0xac>)
 800f004:	4413      	add	r3, r2
 800f006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f00c:	4a1d      	ldr	r2, [pc, #116]	@ (800f084 <prvHeapInit+0xb0>)
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f012:	4b1c      	ldr	r3, [pc, #112]	@ (800f084 <prvHeapInit+0xb0>)
 800f014:	2200      	movs	r2, #0
 800f016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	68ba      	ldr	r2, [r7, #8]
 800f01c:	4413      	add	r3, r2
 800f01e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f020:	2208      	movs	r2, #8
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	1a9b      	subs	r3, r3, r2
 800f026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f023 0307 	bic.w	r3, r3, #7
 800f02e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	4a15      	ldr	r2, [pc, #84]	@ (800f088 <prvHeapInit+0xb4>)
 800f034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f036:	4b14      	ldr	r3, [pc, #80]	@ (800f088 <prvHeapInit+0xb4>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	2200      	movs	r2, #0
 800f03c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f03e:	4b12      	ldr	r3, [pc, #72]	@ (800f088 <prvHeapInit+0xb4>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	2200      	movs	r2, #0
 800f044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	68fa      	ldr	r2, [r7, #12]
 800f04e:	1ad2      	subs	r2, r2, r3
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f054:	4b0c      	ldr	r3, [pc, #48]	@ (800f088 <prvHeapInit+0xb4>)
 800f056:	681a      	ldr	r2, [r3, #0]
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	4a0a      	ldr	r2, [pc, #40]	@ (800f08c <prvHeapInit+0xb8>)
 800f062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	4a09      	ldr	r2, [pc, #36]	@ (800f090 <prvHeapInit+0xbc>)
 800f06a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f06c:	4b09      	ldr	r3, [pc, #36]	@ (800f094 <prvHeapInit+0xc0>)
 800f06e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f072:	601a      	str	r2, [r3, #0]
}
 800f074:	bf00      	nop
 800f076:	3714      	adds	r7, #20
 800f078:	46bd      	mov	sp, r7
 800f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07e:	4770      	bx	lr
 800f080:	20001784 	.word	0x20001784
 800f084:	20007784 	.word	0x20007784
 800f088:	2000778c 	.word	0x2000778c
 800f08c:	20007794 	.word	0x20007794
 800f090:	20007790 	.word	0x20007790
 800f094:	20007798 	.word	0x20007798

0800f098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f098:	b480      	push	{r7}
 800f09a:	b085      	sub	sp, #20
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f0a0:	4b28      	ldr	r3, [pc, #160]	@ (800f144 <prvInsertBlockIntoFreeList+0xac>)
 800f0a2:	60fb      	str	r3, [r7, #12]
 800f0a4:	e002      	b.n	800f0ac <prvInsertBlockIntoFreeList+0x14>
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	60fb      	str	r3, [r7, #12]
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	687a      	ldr	r2, [r7, #4]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d8f7      	bhi.n	800f0a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	685b      	ldr	r3, [r3, #4]
 800f0be:	68ba      	ldr	r2, [r7, #8]
 800f0c0:	4413      	add	r3, r2
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d108      	bne.n	800f0da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	685a      	ldr	r2, [r3, #4]
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	685b      	ldr	r3, [r3, #4]
 800f0d0:	441a      	add	r2, r3
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	68ba      	ldr	r2, [r7, #8]
 800f0e4:	441a      	add	r2, r3
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d118      	bne.n	800f120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	681a      	ldr	r2, [r3, #0]
 800f0f2:	4b15      	ldr	r3, [pc, #84]	@ (800f148 <prvInsertBlockIntoFreeList+0xb0>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d00d      	beq.n	800f116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	685a      	ldr	r2, [r3, #4]
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	441a      	add	r2, r3
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	681a      	ldr	r2, [r3, #0]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	601a      	str	r2, [r3, #0]
 800f114:	e008      	b.n	800f128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f116:	4b0c      	ldr	r3, [pc, #48]	@ (800f148 <prvInsertBlockIntoFreeList+0xb0>)
 800f118:	681a      	ldr	r2, [r3, #0]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	601a      	str	r2, [r3, #0]
 800f11e:	e003      	b.n	800f128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681a      	ldr	r2, [r3, #0]
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f128:	68fa      	ldr	r2, [r7, #12]
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	429a      	cmp	r2, r3
 800f12e:	d002      	beq.n	800f136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	687a      	ldr	r2, [r7, #4]
 800f134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f136:	bf00      	nop
 800f138:	3714      	adds	r7, #20
 800f13a:	46bd      	mov	sp, r7
 800f13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f140:	4770      	bx	lr
 800f142:	bf00      	nop
 800f144:	20007784 	.word	0x20007784
 800f148:	2000778c 	.word	0x2000778c

0800f14c <__cvt>:
 800f14c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f14e:	ed2d 8b02 	vpush	{d8}
 800f152:	eeb0 8b40 	vmov.f64	d8, d0
 800f156:	b085      	sub	sp, #20
 800f158:	4617      	mov	r7, r2
 800f15a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800f15c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f15e:	ee18 2a90 	vmov	r2, s17
 800f162:	f025 0520 	bic.w	r5, r5, #32
 800f166:	2a00      	cmp	r2, #0
 800f168:	bfb6      	itet	lt
 800f16a:	222d      	movlt	r2, #45	@ 0x2d
 800f16c:	2200      	movge	r2, #0
 800f16e:	eeb1 8b40 	vneglt.f64	d8, d0
 800f172:	2d46      	cmp	r5, #70	@ 0x46
 800f174:	460c      	mov	r4, r1
 800f176:	701a      	strb	r2, [r3, #0]
 800f178:	d004      	beq.n	800f184 <__cvt+0x38>
 800f17a:	2d45      	cmp	r5, #69	@ 0x45
 800f17c:	d100      	bne.n	800f180 <__cvt+0x34>
 800f17e:	3401      	adds	r4, #1
 800f180:	2102      	movs	r1, #2
 800f182:	e000      	b.n	800f186 <__cvt+0x3a>
 800f184:	2103      	movs	r1, #3
 800f186:	ab03      	add	r3, sp, #12
 800f188:	9301      	str	r3, [sp, #4]
 800f18a:	ab02      	add	r3, sp, #8
 800f18c:	9300      	str	r3, [sp, #0]
 800f18e:	4622      	mov	r2, r4
 800f190:	4633      	mov	r3, r6
 800f192:	eeb0 0b48 	vmov.f64	d0, d8
 800f196:	f000 fe9b 	bl	800fed0 <_dtoa_r>
 800f19a:	2d47      	cmp	r5, #71	@ 0x47
 800f19c:	d114      	bne.n	800f1c8 <__cvt+0x7c>
 800f19e:	07fb      	lsls	r3, r7, #31
 800f1a0:	d50a      	bpl.n	800f1b8 <__cvt+0x6c>
 800f1a2:	1902      	adds	r2, r0, r4
 800f1a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ac:	bf08      	it	eq
 800f1ae:	9203      	streq	r2, [sp, #12]
 800f1b0:	2130      	movs	r1, #48	@ 0x30
 800f1b2:	9b03      	ldr	r3, [sp, #12]
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d319      	bcc.n	800f1ec <__cvt+0xa0>
 800f1b8:	9b03      	ldr	r3, [sp, #12]
 800f1ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f1bc:	1a1b      	subs	r3, r3, r0
 800f1be:	6013      	str	r3, [r2, #0]
 800f1c0:	b005      	add	sp, #20
 800f1c2:	ecbd 8b02 	vpop	{d8}
 800f1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1c8:	2d46      	cmp	r5, #70	@ 0x46
 800f1ca:	eb00 0204 	add.w	r2, r0, r4
 800f1ce:	d1e9      	bne.n	800f1a4 <__cvt+0x58>
 800f1d0:	7803      	ldrb	r3, [r0, #0]
 800f1d2:	2b30      	cmp	r3, #48	@ 0x30
 800f1d4:	d107      	bne.n	800f1e6 <__cvt+0x9a>
 800f1d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f1da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1de:	bf1c      	itt	ne
 800f1e0:	f1c4 0401 	rsbne	r4, r4, #1
 800f1e4:	6034      	strne	r4, [r6, #0]
 800f1e6:	6833      	ldr	r3, [r6, #0]
 800f1e8:	441a      	add	r2, r3
 800f1ea:	e7db      	b.n	800f1a4 <__cvt+0x58>
 800f1ec:	1c5c      	adds	r4, r3, #1
 800f1ee:	9403      	str	r4, [sp, #12]
 800f1f0:	7019      	strb	r1, [r3, #0]
 800f1f2:	e7de      	b.n	800f1b2 <__cvt+0x66>

0800f1f4 <__exponent>:
 800f1f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1f6:	2900      	cmp	r1, #0
 800f1f8:	bfba      	itte	lt
 800f1fa:	4249      	neglt	r1, r1
 800f1fc:	232d      	movlt	r3, #45	@ 0x2d
 800f1fe:	232b      	movge	r3, #43	@ 0x2b
 800f200:	2909      	cmp	r1, #9
 800f202:	7002      	strb	r2, [r0, #0]
 800f204:	7043      	strb	r3, [r0, #1]
 800f206:	dd29      	ble.n	800f25c <__exponent+0x68>
 800f208:	f10d 0307 	add.w	r3, sp, #7
 800f20c:	461d      	mov	r5, r3
 800f20e:	270a      	movs	r7, #10
 800f210:	461a      	mov	r2, r3
 800f212:	fbb1 f6f7 	udiv	r6, r1, r7
 800f216:	fb07 1416 	mls	r4, r7, r6, r1
 800f21a:	3430      	adds	r4, #48	@ 0x30
 800f21c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f220:	460c      	mov	r4, r1
 800f222:	2c63      	cmp	r4, #99	@ 0x63
 800f224:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800f228:	4631      	mov	r1, r6
 800f22a:	dcf1      	bgt.n	800f210 <__exponent+0x1c>
 800f22c:	3130      	adds	r1, #48	@ 0x30
 800f22e:	1e94      	subs	r4, r2, #2
 800f230:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f234:	1c41      	adds	r1, r0, #1
 800f236:	4623      	mov	r3, r4
 800f238:	42ab      	cmp	r3, r5
 800f23a:	d30a      	bcc.n	800f252 <__exponent+0x5e>
 800f23c:	f10d 0309 	add.w	r3, sp, #9
 800f240:	1a9b      	subs	r3, r3, r2
 800f242:	42ac      	cmp	r4, r5
 800f244:	bf88      	it	hi
 800f246:	2300      	movhi	r3, #0
 800f248:	3302      	adds	r3, #2
 800f24a:	4403      	add	r3, r0
 800f24c:	1a18      	subs	r0, r3, r0
 800f24e:	b003      	add	sp, #12
 800f250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f252:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f256:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f25a:	e7ed      	b.n	800f238 <__exponent+0x44>
 800f25c:	2330      	movs	r3, #48	@ 0x30
 800f25e:	3130      	adds	r1, #48	@ 0x30
 800f260:	7083      	strb	r3, [r0, #2]
 800f262:	70c1      	strb	r1, [r0, #3]
 800f264:	1d03      	adds	r3, r0, #4
 800f266:	e7f1      	b.n	800f24c <__exponent+0x58>

0800f268 <_printf_float>:
 800f268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f26c:	b08d      	sub	sp, #52	@ 0x34
 800f26e:	460c      	mov	r4, r1
 800f270:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f274:	4616      	mov	r6, r2
 800f276:	461f      	mov	r7, r3
 800f278:	4605      	mov	r5, r0
 800f27a:	f000 fd0b 	bl	800fc94 <_localeconv_r>
 800f27e:	f8d0 b000 	ldr.w	fp, [r0]
 800f282:	4658      	mov	r0, fp
 800f284:	f7f1 f82c 	bl	80002e0 <strlen>
 800f288:	2300      	movs	r3, #0
 800f28a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f28c:	f8d8 3000 	ldr.w	r3, [r8]
 800f290:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f294:	6822      	ldr	r2, [r4, #0]
 800f296:	9005      	str	r0, [sp, #20]
 800f298:	3307      	adds	r3, #7
 800f29a:	f023 0307 	bic.w	r3, r3, #7
 800f29e:	f103 0108 	add.w	r1, r3, #8
 800f2a2:	f8c8 1000 	str.w	r1, [r8]
 800f2a6:	ed93 0b00 	vldr	d0, [r3]
 800f2aa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800f508 <_printf_float+0x2a0>
 800f2ae:	eeb0 7bc0 	vabs.f64	d7, d0
 800f2b2:	eeb4 7b46 	vcmp.f64	d7, d6
 800f2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ba:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800f2be:	dd24      	ble.n	800f30a <_printf_float+0xa2>
 800f2c0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2c8:	d502      	bpl.n	800f2d0 <_printf_float+0x68>
 800f2ca:	232d      	movs	r3, #45	@ 0x2d
 800f2cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2d0:	498f      	ldr	r1, [pc, #572]	@ (800f510 <_printf_float+0x2a8>)
 800f2d2:	4b90      	ldr	r3, [pc, #576]	@ (800f514 <_printf_float+0x2ac>)
 800f2d4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800f2d8:	bf94      	ite	ls
 800f2da:	4688      	movls	r8, r1
 800f2dc:	4698      	movhi	r8, r3
 800f2de:	f022 0204 	bic.w	r2, r2, #4
 800f2e2:	2303      	movs	r3, #3
 800f2e4:	6123      	str	r3, [r4, #16]
 800f2e6:	6022      	str	r2, [r4, #0]
 800f2e8:	f04f 0a00 	mov.w	sl, #0
 800f2ec:	9700      	str	r7, [sp, #0]
 800f2ee:	4633      	mov	r3, r6
 800f2f0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f2f2:	4621      	mov	r1, r4
 800f2f4:	4628      	mov	r0, r5
 800f2f6:	f000 f9d1 	bl	800f69c <_printf_common>
 800f2fa:	3001      	adds	r0, #1
 800f2fc:	f040 8089 	bne.w	800f412 <_printf_float+0x1aa>
 800f300:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f304:	b00d      	add	sp, #52	@ 0x34
 800f306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f30a:	eeb4 0b40 	vcmp.f64	d0, d0
 800f30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f312:	d709      	bvc.n	800f328 <_printf_float+0xc0>
 800f314:	ee10 3a90 	vmov	r3, s1
 800f318:	2b00      	cmp	r3, #0
 800f31a:	bfbc      	itt	lt
 800f31c:	232d      	movlt	r3, #45	@ 0x2d
 800f31e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f322:	497d      	ldr	r1, [pc, #500]	@ (800f518 <_printf_float+0x2b0>)
 800f324:	4b7d      	ldr	r3, [pc, #500]	@ (800f51c <_printf_float+0x2b4>)
 800f326:	e7d5      	b.n	800f2d4 <_printf_float+0x6c>
 800f328:	6863      	ldr	r3, [r4, #4]
 800f32a:	1c59      	adds	r1, r3, #1
 800f32c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800f330:	d139      	bne.n	800f3a6 <_printf_float+0x13e>
 800f332:	2306      	movs	r3, #6
 800f334:	6063      	str	r3, [r4, #4]
 800f336:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f33a:	2300      	movs	r3, #0
 800f33c:	6022      	str	r2, [r4, #0]
 800f33e:	9303      	str	r3, [sp, #12]
 800f340:	ab0a      	add	r3, sp, #40	@ 0x28
 800f342:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f346:	ab09      	add	r3, sp, #36	@ 0x24
 800f348:	9300      	str	r3, [sp, #0]
 800f34a:	6861      	ldr	r1, [r4, #4]
 800f34c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f350:	4628      	mov	r0, r5
 800f352:	f7ff fefb 	bl	800f14c <__cvt>
 800f356:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f35a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f35c:	4680      	mov	r8, r0
 800f35e:	d129      	bne.n	800f3b4 <_printf_float+0x14c>
 800f360:	1cc8      	adds	r0, r1, #3
 800f362:	db02      	blt.n	800f36a <_printf_float+0x102>
 800f364:	6863      	ldr	r3, [r4, #4]
 800f366:	4299      	cmp	r1, r3
 800f368:	dd41      	ble.n	800f3ee <_printf_float+0x186>
 800f36a:	f1a9 0902 	sub.w	r9, r9, #2
 800f36e:	fa5f f989 	uxtb.w	r9, r9
 800f372:	3901      	subs	r1, #1
 800f374:	464a      	mov	r2, r9
 800f376:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f37a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f37c:	f7ff ff3a 	bl	800f1f4 <__exponent>
 800f380:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f382:	1813      	adds	r3, r2, r0
 800f384:	2a01      	cmp	r2, #1
 800f386:	4682      	mov	sl, r0
 800f388:	6123      	str	r3, [r4, #16]
 800f38a:	dc02      	bgt.n	800f392 <_printf_float+0x12a>
 800f38c:	6822      	ldr	r2, [r4, #0]
 800f38e:	07d2      	lsls	r2, r2, #31
 800f390:	d501      	bpl.n	800f396 <_printf_float+0x12e>
 800f392:	3301      	adds	r3, #1
 800f394:	6123      	str	r3, [r4, #16]
 800f396:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d0a6      	beq.n	800f2ec <_printf_float+0x84>
 800f39e:	232d      	movs	r3, #45	@ 0x2d
 800f3a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f3a4:	e7a2      	b.n	800f2ec <_printf_float+0x84>
 800f3a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f3aa:	d1c4      	bne.n	800f336 <_printf_float+0xce>
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d1c2      	bne.n	800f336 <_printf_float+0xce>
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	e7bf      	b.n	800f334 <_printf_float+0xcc>
 800f3b4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f3b8:	d9db      	bls.n	800f372 <_printf_float+0x10a>
 800f3ba:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800f3be:	d118      	bne.n	800f3f2 <_printf_float+0x18a>
 800f3c0:	2900      	cmp	r1, #0
 800f3c2:	6863      	ldr	r3, [r4, #4]
 800f3c4:	dd0b      	ble.n	800f3de <_printf_float+0x176>
 800f3c6:	6121      	str	r1, [r4, #16]
 800f3c8:	b913      	cbnz	r3, 800f3d0 <_printf_float+0x168>
 800f3ca:	6822      	ldr	r2, [r4, #0]
 800f3cc:	07d0      	lsls	r0, r2, #31
 800f3ce:	d502      	bpl.n	800f3d6 <_printf_float+0x16e>
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	440b      	add	r3, r1
 800f3d4:	6123      	str	r3, [r4, #16]
 800f3d6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f3d8:	f04f 0a00 	mov.w	sl, #0
 800f3dc:	e7db      	b.n	800f396 <_printf_float+0x12e>
 800f3de:	b913      	cbnz	r3, 800f3e6 <_printf_float+0x17e>
 800f3e0:	6822      	ldr	r2, [r4, #0]
 800f3e2:	07d2      	lsls	r2, r2, #31
 800f3e4:	d501      	bpl.n	800f3ea <_printf_float+0x182>
 800f3e6:	3302      	adds	r3, #2
 800f3e8:	e7f4      	b.n	800f3d4 <_printf_float+0x16c>
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	e7f2      	b.n	800f3d4 <_printf_float+0x16c>
 800f3ee:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800f3f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3f4:	4299      	cmp	r1, r3
 800f3f6:	db05      	blt.n	800f404 <_printf_float+0x19c>
 800f3f8:	6823      	ldr	r3, [r4, #0]
 800f3fa:	6121      	str	r1, [r4, #16]
 800f3fc:	07d8      	lsls	r0, r3, #31
 800f3fe:	d5ea      	bpl.n	800f3d6 <_printf_float+0x16e>
 800f400:	1c4b      	adds	r3, r1, #1
 800f402:	e7e7      	b.n	800f3d4 <_printf_float+0x16c>
 800f404:	2900      	cmp	r1, #0
 800f406:	bfd4      	ite	le
 800f408:	f1c1 0202 	rsble	r2, r1, #2
 800f40c:	2201      	movgt	r2, #1
 800f40e:	4413      	add	r3, r2
 800f410:	e7e0      	b.n	800f3d4 <_printf_float+0x16c>
 800f412:	6823      	ldr	r3, [r4, #0]
 800f414:	055a      	lsls	r2, r3, #21
 800f416:	d407      	bmi.n	800f428 <_printf_float+0x1c0>
 800f418:	6923      	ldr	r3, [r4, #16]
 800f41a:	4642      	mov	r2, r8
 800f41c:	4631      	mov	r1, r6
 800f41e:	4628      	mov	r0, r5
 800f420:	47b8      	blx	r7
 800f422:	3001      	adds	r0, #1
 800f424:	d12a      	bne.n	800f47c <_printf_float+0x214>
 800f426:	e76b      	b.n	800f300 <_printf_float+0x98>
 800f428:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f42c:	f240 80e0 	bls.w	800f5f0 <_printf_float+0x388>
 800f430:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f434:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f43c:	d133      	bne.n	800f4a6 <_printf_float+0x23e>
 800f43e:	4a38      	ldr	r2, [pc, #224]	@ (800f520 <_printf_float+0x2b8>)
 800f440:	2301      	movs	r3, #1
 800f442:	4631      	mov	r1, r6
 800f444:	4628      	mov	r0, r5
 800f446:	47b8      	blx	r7
 800f448:	3001      	adds	r0, #1
 800f44a:	f43f af59 	beq.w	800f300 <_printf_float+0x98>
 800f44e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f452:	4543      	cmp	r3, r8
 800f454:	db02      	blt.n	800f45c <_printf_float+0x1f4>
 800f456:	6823      	ldr	r3, [r4, #0]
 800f458:	07d8      	lsls	r0, r3, #31
 800f45a:	d50f      	bpl.n	800f47c <_printf_float+0x214>
 800f45c:	9b05      	ldr	r3, [sp, #20]
 800f45e:	465a      	mov	r2, fp
 800f460:	4631      	mov	r1, r6
 800f462:	4628      	mov	r0, r5
 800f464:	47b8      	blx	r7
 800f466:	3001      	adds	r0, #1
 800f468:	f43f af4a 	beq.w	800f300 <_printf_float+0x98>
 800f46c:	f04f 0900 	mov.w	r9, #0
 800f470:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800f474:	f104 0a1a 	add.w	sl, r4, #26
 800f478:	45c8      	cmp	r8, r9
 800f47a:	dc09      	bgt.n	800f490 <_printf_float+0x228>
 800f47c:	6823      	ldr	r3, [r4, #0]
 800f47e:	079b      	lsls	r3, r3, #30
 800f480:	f100 8107 	bmi.w	800f692 <_printf_float+0x42a>
 800f484:	68e0      	ldr	r0, [r4, #12]
 800f486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f488:	4298      	cmp	r0, r3
 800f48a:	bfb8      	it	lt
 800f48c:	4618      	movlt	r0, r3
 800f48e:	e739      	b.n	800f304 <_printf_float+0x9c>
 800f490:	2301      	movs	r3, #1
 800f492:	4652      	mov	r2, sl
 800f494:	4631      	mov	r1, r6
 800f496:	4628      	mov	r0, r5
 800f498:	47b8      	blx	r7
 800f49a:	3001      	adds	r0, #1
 800f49c:	f43f af30 	beq.w	800f300 <_printf_float+0x98>
 800f4a0:	f109 0901 	add.w	r9, r9, #1
 800f4a4:	e7e8      	b.n	800f478 <_printf_float+0x210>
 800f4a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	dc3b      	bgt.n	800f524 <_printf_float+0x2bc>
 800f4ac:	4a1c      	ldr	r2, [pc, #112]	@ (800f520 <_printf_float+0x2b8>)
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	4631      	mov	r1, r6
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	47b8      	blx	r7
 800f4b6:	3001      	adds	r0, #1
 800f4b8:	f43f af22 	beq.w	800f300 <_printf_float+0x98>
 800f4bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f4c0:	ea59 0303 	orrs.w	r3, r9, r3
 800f4c4:	d102      	bne.n	800f4cc <_printf_float+0x264>
 800f4c6:	6823      	ldr	r3, [r4, #0]
 800f4c8:	07d9      	lsls	r1, r3, #31
 800f4ca:	d5d7      	bpl.n	800f47c <_printf_float+0x214>
 800f4cc:	9b05      	ldr	r3, [sp, #20]
 800f4ce:	465a      	mov	r2, fp
 800f4d0:	4631      	mov	r1, r6
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	47b8      	blx	r7
 800f4d6:	3001      	adds	r0, #1
 800f4d8:	f43f af12 	beq.w	800f300 <_printf_float+0x98>
 800f4dc:	f04f 0a00 	mov.w	sl, #0
 800f4e0:	f104 0b1a 	add.w	fp, r4, #26
 800f4e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4e6:	425b      	negs	r3, r3
 800f4e8:	4553      	cmp	r3, sl
 800f4ea:	dc01      	bgt.n	800f4f0 <_printf_float+0x288>
 800f4ec:	464b      	mov	r3, r9
 800f4ee:	e794      	b.n	800f41a <_printf_float+0x1b2>
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	465a      	mov	r2, fp
 800f4f4:	4631      	mov	r1, r6
 800f4f6:	4628      	mov	r0, r5
 800f4f8:	47b8      	blx	r7
 800f4fa:	3001      	adds	r0, #1
 800f4fc:	f43f af00 	beq.w	800f300 <_printf_float+0x98>
 800f500:	f10a 0a01 	add.w	sl, sl, #1
 800f504:	e7ee      	b.n	800f4e4 <_printf_float+0x27c>
 800f506:	bf00      	nop
 800f508:	ffffffff 	.word	0xffffffff
 800f50c:	7fefffff 	.word	0x7fefffff
 800f510:	08012a28 	.word	0x08012a28
 800f514:	08012a2c 	.word	0x08012a2c
 800f518:	08012a30 	.word	0x08012a30
 800f51c:	08012a34 	.word	0x08012a34
 800f520:	08012a38 	.word	0x08012a38
 800f524:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f526:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f52a:	4553      	cmp	r3, sl
 800f52c:	bfa8      	it	ge
 800f52e:	4653      	movge	r3, sl
 800f530:	2b00      	cmp	r3, #0
 800f532:	4699      	mov	r9, r3
 800f534:	dc37      	bgt.n	800f5a6 <_printf_float+0x33e>
 800f536:	2300      	movs	r3, #0
 800f538:	9307      	str	r3, [sp, #28]
 800f53a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f53e:	f104 021a 	add.w	r2, r4, #26
 800f542:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f544:	9907      	ldr	r1, [sp, #28]
 800f546:	9306      	str	r3, [sp, #24]
 800f548:	eba3 0309 	sub.w	r3, r3, r9
 800f54c:	428b      	cmp	r3, r1
 800f54e:	dc31      	bgt.n	800f5b4 <_printf_float+0x34c>
 800f550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f552:	459a      	cmp	sl, r3
 800f554:	dc3b      	bgt.n	800f5ce <_printf_float+0x366>
 800f556:	6823      	ldr	r3, [r4, #0]
 800f558:	07da      	lsls	r2, r3, #31
 800f55a:	d438      	bmi.n	800f5ce <_printf_float+0x366>
 800f55c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f55e:	ebaa 0903 	sub.w	r9, sl, r3
 800f562:	9b06      	ldr	r3, [sp, #24]
 800f564:	ebaa 0303 	sub.w	r3, sl, r3
 800f568:	4599      	cmp	r9, r3
 800f56a:	bfa8      	it	ge
 800f56c:	4699      	movge	r9, r3
 800f56e:	f1b9 0f00 	cmp.w	r9, #0
 800f572:	dc34      	bgt.n	800f5de <_printf_float+0x376>
 800f574:	f04f 0800 	mov.w	r8, #0
 800f578:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f57c:	f104 0b1a 	add.w	fp, r4, #26
 800f580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f582:	ebaa 0303 	sub.w	r3, sl, r3
 800f586:	eba3 0309 	sub.w	r3, r3, r9
 800f58a:	4543      	cmp	r3, r8
 800f58c:	f77f af76 	ble.w	800f47c <_printf_float+0x214>
 800f590:	2301      	movs	r3, #1
 800f592:	465a      	mov	r2, fp
 800f594:	4631      	mov	r1, r6
 800f596:	4628      	mov	r0, r5
 800f598:	47b8      	blx	r7
 800f59a:	3001      	adds	r0, #1
 800f59c:	f43f aeb0 	beq.w	800f300 <_printf_float+0x98>
 800f5a0:	f108 0801 	add.w	r8, r8, #1
 800f5a4:	e7ec      	b.n	800f580 <_printf_float+0x318>
 800f5a6:	4642      	mov	r2, r8
 800f5a8:	4631      	mov	r1, r6
 800f5aa:	4628      	mov	r0, r5
 800f5ac:	47b8      	blx	r7
 800f5ae:	3001      	adds	r0, #1
 800f5b0:	d1c1      	bne.n	800f536 <_printf_float+0x2ce>
 800f5b2:	e6a5      	b.n	800f300 <_printf_float+0x98>
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	4631      	mov	r1, r6
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	9206      	str	r2, [sp, #24]
 800f5bc:	47b8      	blx	r7
 800f5be:	3001      	adds	r0, #1
 800f5c0:	f43f ae9e 	beq.w	800f300 <_printf_float+0x98>
 800f5c4:	9b07      	ldr	r3, [sp, #28]
 800f5c6:	9a06      	ldr	r2, [sp, #24]
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	9307      	str	r3, [sp, #28]
 800f5cc:	e7b9      	b.n	800f542 <_printf_float+0x2da>
 800f5ce:	9b05      	ldr	r3, [sp, #20]
 800f5d0:	465a      	mov	r2, fp
 800f5d2:	4631      	mov	r1, r6
 800f5d4:	4628      	mov	r0, r5
 800f5d6:	47b8      	blx	r7
 800f5d8:	3001      	adds	r0, #1
 800f5da:	d1bf      	bne.n	800f55c <_printf_float+0x2f4>
 800f5dc:	e690      	b.n	800f300 <_printf_float+0x98>
 800f5de:	9a06      	ldr	r2, [sp, #24]
 800f5e0:	464b      	mov	r3, r9
 800f5e2:	4442      	add	r2, r8
 800f5e4:	4631      	mov	r1, r6
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	47b8      	blx	r7
 800f5ea:	3001      	adds	r0, #1
 800f5ec:	d1c2      	bne.n	800f574 <_printf_float+0x30c>
 800f5ee:	e687      	b.n	800f300 <_printf_float+0x98>
 800f5f0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f5f4:	f1b9 0f01 	cmp.w	r9, #1
 800f5f8:	dc01      	bgt.n	800f5fe <_printf_float+0x396>
 800f5fa:	07db      	lsls	r3, r3, #31
 800f5fc:	d536      	bpl.n	800f66c <_printf_float+0x404>
 800f5fe:	2301      	movs	r3, #1
 800f600:	4642      	mov	r2, r8
 800f602:	4631      	mov	r1, r6
 800f604:	4628      	mov	r0, r5
 800f606:	47b8      	blx	r7
 800f608:	3001      	adds	r0, #1
 800f60a:	f43f ae79 	beq.w	800f300 <_printf_float+0x98>
 800f60e:	9b05      	ldr	r3, [sp, #20]
 800f610:	465a      	mov	r2, fp
 800f612:	4631      	mov	r1, r6
 800f614:	4628      	mov	r0, r5
 800f616:	47b8      	blx	r7
 800f618:	3001      	adds	r0, #1
 800f61a:	f43f ae71 	beq.w	800f300 <_printf_float+0x98>
 800f61e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f622:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f62a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800f62e:	d018      	beq.n	800f662 <_printf_float+0x3fa>
 800f630:	464b      	mov	r3, r9
 800f632:	f108 0201 	add.w	r2, r8, #1
 800f636:	4631      	mov	r1, r6
 800f638:	4628      	mov	r0, r5
 800f63a:	47b8      	blx	r7
 800f63c:	3001      	adds	r0, #1
 800f63e:	d10c      	bne.n	800f65a <_printf_float+0x3f2>
 800f640:	e65e      	b.n	800f300 <_printf_float+0x98>
 800f642:	2301      	movs	r3, #1
 800f644:	465a      	mov	r2, fp
 800f646:	4631      	mov	r1, r6
 800f648:	4628      	mov	r0, r5
 800f64a:	47b8      	blx	r7
 800f64c:	3001      	adds	r0, #1
 800f64e:	f43f ae57 	beq.w	800f300 <_printf_float+0x98>
 800f652:	f108 0801 	add.w	r8, r8, #1
 800f656:	45c8      	cmp	r8, r9
 800f658:	dbf3      	blt.n	800f642 <_printf_float+0x3da>
 800f65a:	4653      	mov	r3, sl
 800f65c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f660:	e6dc      	b.n	800f41c <_printf_float+0x1b4>
 800f662:	f04f 0800 	mov.w	r8, #0
 800f666:	f104 0b1a 	add.w	fp, r4, #26
 800f66a:	e7f4      	b.n	800f656 <_printf_float+0x3ee>
 800f66c:	2301      	movs	r3, #1
 800f66e:	4642      	mov	r2, r8
 800f670:	e7e1      	b.n	800f636 <_printf_float+0x3ce>
 800f672:	2301      	movs	r3, #1
 800f674:	464a      	mov	r2, r9
 800f676:	4631      	mov	r1, r6
 800f678:	4628      	mov	r0, r5
 800f67a:	47b8      	blx	r7
 800f67c:	3001      	adds	r0, #1
 800f67e:	f43f ae3f 	beq.w	800f300 <_printf_float+0x98>
 800f682:	f108 0801 	add.w	r8, r8, #1
 800f686:	68e3      	ldr	r3, [r4, #12]
 800f688:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f68a:	1a5b      	subs	r3, r3, r1
 800f68c:	4543      	cmp	r3, r8
 800f68e:	dcf0      	bgt.n	800f672 <_printf_float+0x40a>
 800f690:	e6f8      	b.n	800f484 <_printf_float+0x21c>
 800f692:	f04f 0800 	mov.w	r8, #0
 800f696:	f104 0919 	add.w	r9, r4, #25
 800f69a:	e7f4      	b.n	800f686 <_printf_float+0x41e>

0800f69c <_printf_common>:
 800f69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6a0:	4616      	mov	r6, r2
 800f6a2:	4698      	mov	r8, r3
 800f6a4:	688a      	ldr	r2, [r1, #8]
 800f6a6:	690b      	ldr	r3, [r1, #16]
 800f6a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	bfb8      	it	lt
 800f6b0:	4613      	movlt	r3, r2
 800f6b2:	6033      	str	r3, [r6, #0]
 800f6b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f6b8:	4607      	mov	r7, r0
 800f6ba:	460c      	mov	r4, r1
 800f6bc:	b10a      	cbz	r2, 800f6c2 <_printf_common+0x26>
 800f6be:	3301      	adds	r3, #1
 800f6c0:	6033      	str	r3, [r6, #0]
 800f6c2:	6823      	ldr	r3, [r4, #0]
 800f6c4:	0699      	lsls	r1, r3, #26
 800f6c6:	bf42      	ittt	mi
 800f6c8:	6833      	ldrmi	r3, [r6, #0]
 800f6ca:	3302      	addmi	r3, #2
 800f6cc:	6033      	strmi	r3, [r6, #0]
 800f6ce:	6825      	ldr	r5, [r4, #0]
 800f6d0:	f015 0506 	ands.w	r5, r5, #6
 800f6d4:	d106      	bne.n	800f6e4 <_printf_common+0x48>
 800f6d6:	f104 0a19 	add.w	sl, r4, #25
 800f6da:	68e3      	ldr	r3, [r4, #12]
 800f6dc:	6832      	ldr	r2, [r6, #0]
 800f6de:	1a9b      	subs	r3, r3, r2
 800f6e0:	42ab      	cmp	r3, r5
 800f6e2:	dc26      	bgt.n	800f732 <_printf_common+0x96>
 800f6e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f6e8:	6822      	ldr	r2, [r4, #0]
 800f6ea:	3b00      	subs	r3, #0
 800f6ec:	bf18      	it	ne
 800f6ee:	2301      	movne	r3, #1
 800f6f0:	0692      	lsls	r2, r2, #26
 800f6f2:	d42b      	bmi.n	800f74c <_printf_common+0xb0>
 800f6f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f6f8:	4641      	mov	r1, r8
 800f6fa:	4638      	mov	r0, r7
 800f6fc:	47c8      	blx	r9
 800f6fe:	3001      	adds	r0, #1
 800f700:	d01e      	beq.n	800f740 <_printf_common+0xa4>
 800f702:	6823      	ldr	r3, [r4, #0]
 800f704:	6922      	ldr	r2, [r4, #16]
 800f706:	f003 0306 	and.w	r3, r3, #6
 800f70a:	2b04      	cmp	r3, #4
 800f70c:	bf02      	ittt	eq
 800f70e:	68e5      	ldreq	r5, [r4, #12]
 800f710:	6833      	ldreq	r3, [r6, #0]
 800f712:	1aed      	subeq	r5, r5, r3
 800f714:	68a3      	ldr	r3, [r4, #8]
 800f716:	bf0c      	ite	eq
 800f718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f71c:	2500      	movne	r5, #0
 800f71e:	4293      	cmp	r3, r2
 800f720:	bfc4      	itt	gt
 800f722:	1a9b      	subgt	r3, r3, r2
 800f724:	18ed      	addgt	r5, r5, r3
 800f726:	2600      	movs	r6, #0
 800f728:	341a      	adds	r4, #26
 800f72a:	42b5      	cmp	r5, r6
 800f72c:	d11a      	bne.n	800f764 <_printf_common+0xc8>
 800f72e:	2000      	movs	r0, #0
 800f730:	e008      	b.n	800f744 <_printf_common+0xa8>
 800f732:	2301      	movs	r3, #1
 800f734:	4652      	mov	r2, sl
 800f736:	4641      	mov	r1, r8
 800f738:	4638      	mov	r0, r7
 800f73a:	47c8      	blx	r9
 800f73c:	3001      	adds	r0, #1
 800f73e:	d103      	bne.n	800f748 <_printf_common+0xac>
 800f740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f748:	3501      	adds	r5, #1
 800f74a:	e7c6      	b.n	800f6da <_printf_common+0x3e>
 800f74c:	18e1      	adds	r1, r4, r3
 800f74e:	1c5a      	adds	r2, r3, #1
 800f750:	2030      	movs	r0, #48	@ 0x30
 800f752:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f756:	4422      	add	r2, r4
 800f758:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f75c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f760:	3302      	adds	r3, #2
 800f762:	e7c7      	b.n	800f6f4 <_printf_common+0x58>
 800f764:	2301      	movs	r3, #1
 800f766:	4622      	mov	r2, r4
 800f768:	4641      	mov	r1, r8
 800f76a:	4638      	mov	r0, r7
 800f76c:	47c8      	blx	r9
 800f76e:	3001      	adds	r0, #1
 800f770:	d0e6      	beq.n	800f740 <_printf_common+0xa4>
 800f772:	3601      	adds	r6, #1
 800f774:	e7d9      	b.n	800f72a <_printf_common+0x8e>
	...

0800f778 <_printf_i>:
 800f778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f77c:	7e0f      	ldrb	r7, [r1, #24]
 800f77e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f780:	2f78      	cmp	r7, #120	@ 0x78
 800f782:	4691      	mov	r9, r2
 800f784:	4680      	mov	r8, r0
 800f786:	460c      	mov	r4, r1
 800f788:	469a      	mov	sl, r3
 800f78a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f78e:	d807      	bhi.n	800f7a0 <_printf_i+0x28>
 800f790:	2f62      	cmp	r7, #98	@ 0x62
 800f792:	d80a      	bhi.n	800f7aa <_printf_i+0x32>
 800f794:	2f00      	cmp	r7, #0
 800f796:	f000 80d2 	beq.w	800f93e <_printf_i+0x1c6>
 800f79a:	2f58      	cmp	r7, #88	@ 0x58
 800f79c:	f000 80b9 	beq.w	800f912 <_printf_i+0x19a>
 800f7a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f7a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f7a8:	e03a      	b.n	800f820 <_printf_i+0xa8>
 800f7aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f7ae:	2b15      	cmp	r3, #21
 800f7b0:	d8f6      	bhi.n	800f7a0 <_printf_i+0x28>
 800f7b2:	a101      	add	r1, pc, #4	@ (adr r1, 800f7b8 <_printf_i+0x40>)
 800f7b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f7b8:	0800f811 	.word	0x0800f811
 800f7bc:	0800f825 	.word	0x0800f825
 800f7c0:	0800f7a1 	.word	0x0800f7a1
 800f7c4:	0800f7a1 	.word	0x0800f7a1
 800f7c8:	0800f7a1 	.word	0x0800f7a1
 800f7cc:	0800f7a1 	.word	0x0800f7a1
 800f7d0:	0800f825 	.word	0x0800f825
 800f7d4:	0800f7a1 	.word	0x0800f7a1
 800f7d8:	0800f7a1 	.word	0x0800f7a1
 800f7dc:	0800f7a1 	.word	0x0800f7a1
 800f7e0:	0800f7a1 	.word	0x0800f7a1
 800f7e4:	0800f925 	.word	0x0800f925
 800f7e8:	0800f84f 	.word	0x0800f84f
 800f7ec:	0800f8df 	.word	0x0800f8df
 800f7f0:	0800f7a1 	.word	0x0800f7a1
 800f7f4:	0800f7a1 	.word	0x0800f7a1
 800f7f8:	0800f947 	.word	0x0800f947
 800f7fc:	0800f7a1 	.word	0x0800f7a1
 800f800:	0800f84f 	.word	0x0800f84f
 800f804:	0800f7a1 	.word	0x0800f7a1
 800f808:	0800f7a1 	.word	0x0800f7a1
 800f80c:	0800f8e7 	.word	0x0800f8e7
 800f810:	6833      	ldr	r3, [r6, #0]
 800f812:	1d1a      	adds	r2, r3, #4
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	6032      	str	r2, [r6, #0]
 800f818:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f81c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f820:	2301      	movs	r3, #1
 800f822:	e09d      	b.n	800f960 <_printf_i+0x1e8>
 800f824:	6833      	ldr	r3, [r6, #0]
 800f826:	6820      	ldr	r0, [r4, #0]
 800f828:	1d19      	adds	r1, r3, #4
 800f82a:	6031      	str	r1, [r6, #0]
 800f82c:	0606      	lsls	r6, r0, #24
 800f82e:	d501      	bpl.n	800f834 <_printf_i+0xbc>
 800f830:	681d      	ldr	r5, [r3, #0]
 800f832:	e003      	b.n	800f83c <_printf_i+0xc4>
 800f834:	0645      	lsls	r5, r0, #25
 800f836:	d5fb      	bpl.n	800f830 <_printf_i+0xb8>
 800f838:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f83c:	2d00      	cmp	r5, #0
 800f83e:	da03      	bge.n	800f848 <_printf_i+0xd0>
 800f840:	232d      	movs	r3, #45	@ 0x2d
 800f842:	426d      	negs	r5, r5
 800f844:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f848:	4859      	ldr	r0, [pc, #356]	@ (800f9b0 <_printf_i+0x238>)
 800f84a:	230a      	movs	r3, #10
 800f84c:	e011      	b.n	800f872 <_printf_i+0xfa>
 800f84e:	6821      	ldr	r1, [r4, #0]
 800f850:	6833      	ldr	r3, [r6, #0]
 800f852:	0608      	lsls	r0, r1, #24
 800f854:	f853 5b04 	ldr.w	r5, [r3], #4
 800f858:	d402      	bmi.n	800f860 <_printf_i+0xe8>
 800f85a:	0649      	lsls	r1, r1, #25
 800f85c:	bf48      	it	mi
 800f85e:	b2ad      	uxthmi	r5, r5
 800f860:	2f6f      	cmp	r7, #111	@ 0x6f
 800f862:	4853      	ldr	r0, [pc, #332]	@ (800f9b0 <_printf_i+0x238>)
 800f864:	6033      	str	r3, [r6, #0]
 800f866:	bf14      	ite	ne
 800f868:	230a      	movne	r3, #10
 800f86a:	2308      	moveq	r3, #8
 800f86c:	2100      	movs	r1, #0
 800f86e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f872:	6866      	ldr	r6, [r4, #4]
 800f874:	60a6      	str	r6, [r4, #8]
 800f876:	2e00      	cmp	r6, #0
 800f878:	bfa2      	ittt	ge
 800f87a:	6821      	ldrge	r1, [r4, #0]
 800f87c:	f021 0104 	bicge.w	r1, r1, #4
 800f880:	6021      	strge	r1, [r4, #0]
 800f882:	b90d      	cbnz	r5, 800f888 <_printf_i+0x110>
 800f884:	2e00      	cmp	r6, #0
 800f886:	d04b      	beq.n	800f920 <_printf_i+0x1a8>
 800f888:	4616      	mov	r6, r2
 800f88a:	fbb5 f1f3 	udiv	r1, r5, r3
 800f88e:	fb03 5711 	mls	r7, r3, r1, r5
 800f892:	5dc7      	ldrb	r7, [r0, r7]
 800f894:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f898:	462f      	mov	r7, r5
 800f89a:	42bb      	cmp	r3, r7
 800f89c:	460d      	mov	r5, r1
 800f89e:	d9f4      	bls.n	800f88a <_printf_i+0x112>
 800f8a0:	2b08      	cmp	r3, #8
 800f8a2:	d10b      	bne.n	800f8bc <_printf_i+0x144>
 800f8a4:	6823      	ldr	r3, [r4, #0]
 800f8a6:	07df      	lsls	r7, r3, #31
 800f8a8:	d508      	bpl.n	800f8bc <_printf_i+0x144>
 800f8aa:	6923      	ldr	r3, [r4, #16]
 800f8ac:	6861      	ldr	r1, [r4, #4]
 800f8ae:	4299      	cmp	r1, r3
 800f8b0:	bfde      	ittt	le
 800f8b2:	2330      	movle	r3, #48	@ 0x30
 800f8b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f8b8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f8bc:	1b92      	subs	r2, r2, r6
 800f8be:	6122      	str	r2, [r4, #16]
 800f8c0:	f8cd a000 	str.w	sl, [sp]
 800f8c4:	464b      	mov	r3, r9
 800f8c6:	aa03      	add	r2, sp, #12
 800f8c8:	4621      	mov	r1, r4
 800f8ca:	4640      	mov	r0, r8
 800f8cc:	f7ff fee6 	bl	800f69c <_printf_common>
 800f8d0:	3001      	adds	r0, #1
 800f8d2:	d14a      	bne.n	800f96a <_printf_i+0x1f2>
 800f8d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f8d8:	b004      	add	sp, #16
 800f8da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8de:	6823      	ldr	r3, [r4, #0]
 800f8e0:	f043 0320 	orr.w	r3, r3, #32
 800f8e4:	6023      	str	r3, [r4, #0]
 800f8e6:	4833      	ldr	r0, [pc, #204]	@ (800f9b4 <_printf_i+0x23c>)
 800f8e8:	2778      	movs	r7, #120	@ 0x78
 800f8ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f8ee:	6823      	ldr	r3, [r4, #0]
 800f8f0:	6831      	ldr	r1, [r6, #0]
 800f8f2:	061f      	lsls	r7, r3, #24
 800f8f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800f8f8:	d402      	bmi.n	800f900 <_printf_i+0x188>
 800f8fa:	065f      	lsls	r7, r3, #25
 800f8fc:	bf48      	it	mi
 800f8fe:	b2ad      	uxthmi	r5, r5
 800f900:	6031      	str	r1, [r6, #0]
 800f902:	07d9      	lsls	r1, r3, #31
 800f904:	bf44      	itt	mi
 800f906:	f043 0320 	orrmi.w	r3, r3, #32
 800f90a:	6023      	strmi	r3, [r4, #0]
 800f90c:	b11d      	cbz	r5, 800f916 <_printf_i+0x19e>
 800f90e:	2310      	movs	r3, #16
 800f910:	e7ac      	b.n	800f86c <_printf_i+0xf4>
 800f912:	4827      	ldr	r0, [pc, #156]	@ (800f9b0 <_printf_i+0x238>)
 800f914:	e7e9      	b.n	800f8ea <_printf_i+0x172>
 800f916:	6823      	ldr	r3, [r4, #0]
 800f918:	f023 0320 	bic.w	r3, r3, #32
 800f91c:	6023      	str	r3, [r4, #0]
 800f91e:	e7f6      	b.n	800f90e <_printf_i+0x196>
 800f920:	4616      	mov	r6, r2
 800f922:	e7bd      	b.n	800f8a0 <_printf_i+0x128>
 800f924:	6833      	ldr	r3, [r6, #0]
 800f926:	6825      	ldr	r5, [r4, #0]
 800f928:	6961      	ldr	r1, [r4, #20]
 800f92a:	1d18      	adds	r0, r3, #4
 800f92c:	6030      	str	r0, [r6, #0]
 800f92e:	062e      	lsls	r6, r5, #24
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	d501      	bpl.n	800f938 <_printf_i+0x1c0>
 800f934:	6019      	str	r1, [r3, #0]
 800f936:	e002      	b.n	800f93e <_printf_i+0x1c6>
 800f938:	0668      	lsls	r0, r5, #25
 800f93a:	d5fb      	bpl.n	800f934 <_printf_i+0x1bc>
 800f93c:	8019      	strh	r1, [r3, #0]
 800f93e:	2300      	movs	r3, #0
 800f940:	6123      	str	r3, [r4, #16]
 800f942:	4616      	mov	r6, r2
 800f944:	e7bc      	b.n	800f8c0 <_printf_i+0x148>
 800f946:	6833      	ldr	r3, [r6, #0]
 800f948:	1d1a      	adds	r2, r3, #4
 800f94a:	6032      	str	r2, [r6, #0]
 800f94c:	681e      	ldr	r6, [r3, #0]
 800f94e:	6862      	ldr	r2, [r4, #4]
 800f950:	2100      	movs	r1, #0
 800f952:	4630      	mov	r0, r6
 800f954:	f7f0 fc74 	bl	8000240 <memchr>
 800f958:	b108      	cbz	r0, 800f95e <_printf_i+0x1e6>
 800f95a:	1b80      	subs	r0, r0, r6
 800f95c:	6060      	str	r0, [r4, #4]
 800f95e:	6863      	ldr	r3, [r4, #4]
 800f960:	6123      	str	r3, [r4, #16]
 800f962:	2300      	movs	r3, #0
 800f964:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f968:	e7aa      	b.n	800f8c0 <_printf_i+0x148>
 800f96a:	6923      	ldr	r3, [r4, #16]
 800f96c:	4632      	mov	r2, r6
 800f96e:	4649      	mov	r1, r9
 800f970:	4640      	mov	r0, r8
 800f972:	47d0      	blx	sl
 800f974:	3001      	adds	r0, #1
 800f976:	d0ad      	beq.n	800f8d4 <_printf_i+0x15c>
 800f978:	6823      	ldr	r3, [r4, #0]
 800f97a:	079b      	lsls	r3, r3, #30
 800f97c:	d413      	bmi.n	800f9a6 <_printf_i+0x22e>
 800f97e:	68e0      	ldr	r0, [r4, #12]
 800f980:	9b03      	ldr	r3, [sp, #12]
 800f982:	4298      	cmp	r0, r3
 800f984:	bfb8      	it	lt
 800f986:	4618      	movlt	r0, r3
 800f988:	e7a6      	b.n	800f8d8 <_printf_i+0x160>
 800f98a:	2301      	movs	r3, #1
 800f98c:	4632      	mov	r2, r6
 800f98e:	4649      	mov	r1, r9
 800f990:	4640      	mov	r0, r8
 800f992:	47d0      	blx	sl
 800f994:	3001      	adds	r0, #1
 800f996:	d09d      	beq.n	800f8d4 <_printf_i+0x15c>
 800f998:	3501      	adds	r5, #1
 800f99a:	68e3      	ldr	r3, [r4, #12]
 800f99c:	9903      	ldr	r1, [sp, #12]
 800f99e:	1a5b      	subs	r3, r3, r1
 800f9a0:	42ab      	cmp	r3, r5
 800f9a2:	dcf2      	bgt.n	800f98a <_printf_i+0x212>
 800f9a4:	e7eb      	b.n	800f97e <_printf_i+0x206>
 800f9a6:	2500      	movs	r5, #0
 800f9a8:	f104 0619 	add.w	r6, r4, #25
 800f9ac:	e7f5      	b.n	800f99a <_printf_i+0x222>
 800f9ae:	bf00      	nop
 800f9b0:	08012a3a 	.word	0x08012a3a
 800f9b4:	08012a4b 	.word	0x08012a4b

0800f9b8 <sniprintf>:
 800f9b8:	b40c      	push	{r2, r3}
 800f9ba:	b530      	push	{r4, r5, lr}
 800f9bc:	4b17      	ldr	r3, [pc, #92]	@ (800fa1c <sniprintf+0x64>)
 800f9be:	1e0c      	subs	r4, r1, #0
 800f9c0:	681d      	ldr	r5, [r3, #0]
 800f9c2:	b09d      	sub	sp, #116	@ 0x74
 800f9c4:	da08      	bge.n	800f9d8 <sniprintf+0x20>
 800f9c6:	238b      	movs	r3, #139	@ 0x8b
 800f9c8:	602b      	str	r3, [r5, #0]
 800f9ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f9ce:	b01d      	add	sp, #116	@ 0x74
 800f9d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9d4:	b002      	add	sp, #8
 800f9d6:	4770      	bx	lr
 800f9d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f9dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f9e0:	bf14      	ite	ne
 800f9e2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800f9e6:	4623      	moveq	r3, r4
 800f9e8:	9304      	str	r3, [sp, #16]
 800f9ea:	9307      	str	r3, [sp, #28]
 800f9ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f9f0:	9002      	str	r0, [sp, #8]
 800f9f2:	9006      	str	r0, [sp, #24]
 800f9f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f9f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f9fa:	ab21      	add	r3, sp, #132	@ 0x84
 800f9fc:	a902      	add	r1, sp, #8
 800f9fe:	4628      	mov	r0, r5
 800fa00:	9301      	str	r3, [sp, #4]
 800fa02:	f001 f861 	bl	8010ac8 <_svfiprintf_r>
 800fa06:	1c43      	adds	r3, r0, #1
 800fa08:	bfbc      	itt	lt
 800fa0a:	238b      	movlt	r3, #139	@ 0x8b
 800fa0c:	602b      	strlt	r3, [r5, #0]
 800fa0e:	2c00      	cmp	r4, #0
 800fa10:	d0dd      	beq.n	800f9ce <sniprintf+0x16>
 800fa12:	9b02      	ldr	r3, [sp, #8]
 800fa14:	2200      	movs	r2, #0
 800fa16:	701a      	strb	r2, [r3, #0]
 800fa18:	e7d9      	b.n	800f9ce <sniprintf+0x16>
 800fa1a:	bf00      	nop
 800fa1c:	20000034 	.word	0x20000034

0800fa20 <std>:
 800fa20:	2300      	movs	r3, #0
 800fa22:	b510      	push	{r4, lr}
 800fa24:	4604      	mov	r4, r0
 800fa26:	e9c0 3300 	strd	r3, r3, [r0]
 800fa2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa2e:	6083      	str	r3, [r0, #8]
 800fa30:	8181      	strh	r1, [r0, #12]
 800fa32:	6643      	str	r3, [r0, #100]	@ 0x64
 800fa34:	81c2      	strh	r2, [r0, #14]
 800fa36:	6183      	str	r3, [r0, #24]
 800fa38:	4619      	mov	r1, r3
 800fa3a:	2208      	movs	r2, #8
 800fa3c:	305c      	adds	r0, #92	@ 0x5c
 800fa3e:	f000 f921 	bl	800fc84 <memset>
 800fa42:	4b0d      	ldr	r3, [pc, #52]	@ (800fa78 <std+0x58>)
 800fa44:	6263      	str	r3, [r4, #36]	@ 0x24
 800fa46:	4b0d      	ldr	r3, [pc, #52]	@ (800fa7c <std+0x5c>)
 800fa48:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fa4a:	4b0d      	ldr	r3, [pc, #52]	@ (800fa80 <std+0x60>)
 800fa4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fa4e:	4b0d      	ldr	r3, [pc, #52]	@ (800fa84 <std+0x64>)
 800fa50:	6323      	str	r3, [r4, #48]	@ 0x30
 800fa52:	4b0d      	ldr	r3, [pc, #52]	@ (800fa88 <std+0x68>)
 800fa54:	6224      	str	r4, [r4, #32]
 800fa56:	429c      	cmp	r4, r3
 800fa58:	d006      	beq.n	800fa68 <std+0x48>
 800fa5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fa5e:	4294      	cmp	r4, r2
 800fa60:	d002      	beq.n	800fa68 <std+0x48>
 800fa62:	33d0      	adds	r3, #208	@ 0xd0
 800fa64:	429c      	cmp	r4, r3
 800fa66:	d105      	bne.n	800fa74 <std+0x54>
 800fa68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fa6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa70:	f000 b994 	b.w	800fd9c <__retarget_lock_init_recursive>
 800fa74:	bd10      	pop	{r4, pc}
 800fa76:	bf00      	nop
 800fa78:	0801190d 	.word	0x0801190d
 800fa7c:	0801192f 	.word	0x0801192f
 800fa80:	08011967 	.word	0x08011967
 800fa84:	0801198b 	.word	0x0801198b
 800fa88:	2000779c 	.word	0x2000779c

0800fa8c <stdio_exit_handler>:
 800fa8c:	4a02      	ldr	r2, [pc, #8]	@ (800fa98 <stdio_exit_handler+0xc>)
 800fa8e:	4903      	ldr	r1, [pc, #12]	@ (800fa9c <stdio_exit_handler+0x10>)
 800fa90:	4803      	ldr	r0, [pc, #12]	@ (800faa0 <stdio_exit_handler+0x14>)
 800fa92:	f000 b869 	b.w	800fb68 <_fwalk_sglue>
 800fa96:	bf00      	nop
 800fa98:	20000028 	.word	0x20000028
 800fa9c:	080111a1 	.word	0x080111a1
 800faa0:	20000038 	.word	0x20000038

0800faa4 <cleanup_stdio>:
 800faa4:	6841      	ldr	r1, [r0, #4]
 800faa6:	4b0c      	ldr	r3, [pc, #48]	@ (800fad8 <cleanup_stdio+0x34>)
 800faa8:	4299      	cmp	r1, r3
 800faaa:	b510      	push	{r4, lr}
 800faac:	4604      	mov	r4, r0
 800faae:	d001      	beq.n	800fab4 <cleanup_stdio+0x10>
 800fab0:	f001 fb76 	bl	80111a0 <_fflush_r>
 800fab4:	68a1      	ldr	r1, [r4, #8]
 800fab6:	4b09      	ldr	r3, [pc, #36]	@ (800fadc <cleanup_stdio+0x38>)
 800fab8:	4299      	cmp	r1, r3
 800faba:	d002      	beq.n	800fac2 <cleanup_stdio+0x1e>
 800fabc:	4620      	mov	r0, r4
 800fabe:	f001 fb6f 	bl	80111a0 <_fflush_r>
 800fac2:	68e1      	ldr	r1, [r4, #12]
 800fac4:	4b06      	ldr	r3, [pc, #24]	@ (800fae0 <cleanup_stdio+0x3c>)
 800fac6:	4299      	cmp	r1, r3
 800fac8:	d004      	beq.n	800fad4 <cleanup_stdio+0x30>
 800faca:	4620      	mov	r0, r4
 800facc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fad0:	f001 bb66 	b.w	80111a0 <_fflush_r>
 800fad4:	bd10      	pop	{r4, pc}
 800fad6:	bf00      	nop
 800fad8:	2000779c 	.word	0x2000779c
 800fadc:	20007804 	.word	0x20007804
 800fae0:	2000786c 	.word	0x2000786c

0800fae4 <global_stdio_init.part.0>:
 800fae4:	b510      	push	{r4, lr}
 800fae6:	4b0b      	ldr	r3, [pc, #44]	@ (800fb14 <global_stdio_init.part.0+0x30>)
 800fae8:	4c0b      	ldr	r4, [pc, #44]	@ (800fb18 <global_stdio_init.part.0+0x34>)
 800faea:	4a0c      	ldr	r2, [pc, #48]	@ (800fb1c <global_stdio_init.part.0+0x38>)
 800faec:	601a      	str	r2, [r3, #0]
 800faee:	4620      	mov	r0, r4
 800faf0:	2200      	movs	r2, #0
 800faf2:	2104      	movs	r1, #4
 800faf4:	f7ff ff94 	bl	800fa20 <std>
 800faf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fafc:	2201      	movs	r2, #1
 800fafe:	2109      	movs	r1, #9
 800fb00:	f7ff ff8e 	bl	800fa20 <std>
 800fb04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fb08:	2202      	movs	r2, #2
 800fb0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb0e:	2112      	movs	r1, #18
 800fb10:	f7ff bf86 	b.w	800fa20 <std>
 800fb14:	200078d4 	.word	0x200078d4
 800fb18:	2000779c 	.word	0x2000779c
 800fb1c:	0800fa8d 	.word	0x0800fa8d

0800fb20 <__sfp_lock_acquire>:
 800fb20:	4801      	ldr	r0, [pc, #4]	@ (800fb28 <__sfp_lock_acquire+0x8>)
 800fb22:	f000 b93c 	b.w	800fd9e <__retarget_lock_acquire_recursive>
 800fb26:	bf00      	nop
 800fb28:	200078dd 	.word	0x200078dd

0800fb2c <__sfp_lock_release>:
 800fb2c:	4801      	ldr	r0, [pc, #4]	@ (800fb34 <__sfp_lock_release+0x8>)
 800fb2e:	f000 b937 	b.w	800fda0 <__retarget_lock_release_recursive>
 800fb32:	bf00      	nop
 800fb34:	200078dd 	.word	0x200078dd

0800fb38 <__sinit>:
 800fb38:	b510      	push	{r4, lr}
 800fb3a:	4604      	mov	r4, r0
 800fb3c:	f7ff fff0 	bl	800fb20 <__sfp_lock_acquire>
 800fb40:	6a23      	ldr	r3, [r4, #32]
 800fb42:	b11b      	cbz	r3, 800fb4c <__sinit+0x14>
 800fb44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb48:	f7ff bff0 	b.w	800fb2c <__sfp_lock_release>
 800fb4c:	4b04      	ldr	r3, [pc, #16]	@ (800fb60 <__sinit+0x28>)
 800fb4e:	6223      	str	r3, [r4, #32]
 800fb50:	4b04      	ldr	r3, [pc, #16]	@ (800fb64 <__sinit+0x2c>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d1f5      	bne.n	800fb44 <__sinit+0xc>
 800fb58:	f7ff ffc4 	bl	800fae4 <global_stdio_init.part.0>
 800fb5c:	e7f2      	b.n	800fb44 <__sinit+0xc>
 800fb5e:	bf00      	nop
 800fb60:	0800faa5 	.word	0x0800faa5
 800fb64:	200078d4 	.word	0x200078d4

0800fb68 <_fwalk_sglue>:
 800fb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb6c:	4607      	mov	r7, r0
 800fb6e:	4688      	mov	r8, r1
 800fb70:	4614      	mov	r4, r2
 800fb72:	2600      	movs	r6, #0
 800fb74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb78:	f1b9 0901 	subs.w	r9, r9, #1
 800fb7c:	d505      	bpl.n	800fb8a <_fwalk_sglue+0x22>
 800fb7e:	6824      	ldr	r4, [r4, #0]
 800fb80:	2c00      	cmp	r4, #0
 800fb82:	d1f7      	bne.n	800fb74 <_fwalk_sglue+0xc>
 800fb84:	4630      	mov	r0, r6
 800fb86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb8a:	89ab      	ldrh	r3, [r5, #12]
 800fb8c:	2b01      	cmp	r3, #1
 800fb8e:	d907      	bls.n	800fba0 <_fwalk_sglue+0x38>
 800fb90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb94:	3301      	adds	r3, #1
 800fb96:	d003      	beq.n	800fba0 <_fwalk_sglue+0x38>
 800fb98:	4629      	mov	r1, r5
 800fb9a:	4638      	mov	r0, r7
 800fb9c:	47c0      	blx	r8
 800fb9e:	4306      	orrs	r6, r0
 800fba0:	3568      	adds	r5, #104	@ 0x68
 800fba2:	e7e9      	b.n	800fb78 <_fwalk_sglue+0x10>

0800fba4 <iprintf>:
 800fba4:	b40f      	push	{r0, r1, r2, r3}
 800fba6:	b507      	push	{r0, r1, r2, lr}
 800fba8:	4906      	ldr	r1, [pc, #24]	@ (800fbc4 <iprintf+0x20>)
 800fbaa:	ab04      	add	r3, sp, #16
 800fbac:	6808      	ldr	r0, [r1, #0]
 800fbae:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbb2:	6881      	ldr	r1, [r0, #8]
 800fbb4:	9301      	str	r3, [sp, #4]
 800fbb6:	f001 f8ad 	bl	8010d14 <_vfiprintf_r>
 800fbba:	b003      	add	sp, #12
 800fbbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbc0:	b004      	add	sp, #16
 800fbc2:	4770      	bx	lr
 800fbc4:	20000034 	.word	0x20000034

0800fbc8 <_puts_r>:
 800fbc8:	6a03      	ldr	r3, [r0, #32]
 800fbca:	b570      	push	{r4, r5, r6, lr}
 800fbcc:	6884      	ldr	r4, [r0, #8]
 800fbce:	4605      	mov	r5, r0
 800fbd0:	460e      	mov	r6, r1
 800fbd2:	b90b      	cbnz	r3, 800fbd8 <_puts_r+0x10>
 800fbd4:	f7ff ffb0 	bl	800fb38 <__sinit>
 800fbd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fbda:	07db      	lsls	r3, r3, #31
 800fbdc:	d405      	bmi.n	800fbea <_puts_r+0x22>
 800fbde:	89a3      	ldrh	r3, [r4, #12]
 800fbe0:	0598      	lsls	r0, r3, #22
 800fbe2:	d402      	bmi.n	800fbea <_puts_r+0x22>
 800fbe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbe6:	f000 f8da 	bl	800fd9e <__retarget_lock_acquire_recursive>
 800fbea:	89a3      	ldrh	r3, [r4, #12]
 800fbec:	0719      	lsls	r1, r3, #28
 800fbee:	d502      	bpl.n	800fbf6 <_puts_r+0x2e>
 800fbf0:	6923      	ldr	r3, [r4, #16]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d135      	bne.n	800fc62 <_puts_r+0x9a>
 800fbf6:	4621      	mov	r1, r4
 800fbf8:	4628      	mov	r0, r5
 800fbfa:	f001 ff37 	bl	8011a6c <__swsetup_r>
 800fbfe:	b380      	cbz	r0, 800fc62 <_puts_r+0x9a>
 800fc00:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800fc04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc06:	07da      	lsls	r2, r3, #31
 800fc08:	d405      	bmi.n	800fc16 <_puts_r+0x4e>
 800fc0a:	89a3      	ldrh	r3, [r4, #12]
 800fc0c:	059b      	lsls	r3, r3, #22
 800fc0e:	d402      	bmi.n	800fc16 <_puts_r+0x4e>
 800fc10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc12:	f000 f8c5 	bl	800fda0 <__retarget_lock_release_recursive>
 800fc16:	4628      	mov	r0, r5
 800fc18:	bd70      	pop	{r4, r5, r6, pc}
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	da04      	bge.n	800fc28 <_puts_r+0x60>
 800fc1e:	69a2      	ldr	r2, [r4, #24]
 800fc20:	429a      	cmp	r2, r3
 800fc22:	dc17      	bgt.n	800fc54 <_puts_r+0x8c>
 800fc24:	290a      	cmp	r1, #10
 800fc26:	d015      	beq.n	800fc54 <_puts_r+0x8c>
 800fc28:	6823      	ldr	r3, [r4, #0]
 800fc2a:	1c5a      	adds	r2, r3, #1
 800fc2c:	6022      	str	r2, [r4, #0]
 800fc2e:	7019      	strb	r1, [r3, #0]
 800fc30:	68a3      	ldr	r3, [r4, #8]
 800fc32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fc36:	3b01      	subs	r3, #1
 800fc38:	60a3      	str	r3, [r4, #8]
 800fc3a:	2900      	cmp	r1, #0
 800fc3c:	d1ed      	bne.n	800fc1a <_puts_r+0x52>
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	da11      	bge.n	800fc66 <_puts_r+0x9e>
 800fc42:	4622      	mov	r2, r4
 800fc44:	210a      	movs	r1, #10
 800fc46:	4628      	mov	r0, r5
 800fc48:	f001 fed1 	bl	80119ee <__swbuf_r>
 800fc4c:	3001      	adds	r0, #1
 800fc4e:	d0d7      	beq.n	800fc00 <_puts_r+0x38>
 800fc50:	250a      	movs	r5, #10
 800fc52:	e7d7      	b.n	800fc04 <_puts_r+0x3c>
 800fc54:	4622      	mov	r2, r4
 800fc56:	4628      	mov	r0, r5
 800fc58:	f001 fec9 	bl	80119ee <__swbuf_r>
 800fc5c:	3001      	adds	r0, #1
 800fc5e:	d1e7      	bne.n	800fc30 <_puts_r+0x68>
 800fc60:	e7ce      	b.n	800fc00 <_puts_r+0x38>
 800fc62:	3e01      	subs	r6, #1
 800fc64:	e7e4      	b.n	800fc30 <_puts_r+0x68>
 800fc66:	6823      	ldr	r3, [r4, #0]
 800fc68:	1c5a      	adds	r2, r3, #1
 800fc6a:	6022      	str	r2, [r4, #0]
 800fc6c:	220a      	movs	r2, #10
 800fc6e:	701a      	strb	r2, [r3, #0]
 800fc70:	e7ee      	b.n	800fc50 <_puts_r+0x88>
	...

0800fc74 <puts>:
 800fc74:	4b02      	ldr	r3, [pc, #8]	@ (800fc80 <puts+0xc>)
 800fc76:	4601      	mov	r1, r0
 800fc78:	6818      	ldr	r0, [r3, #0]
 800fc7a:	f7ff bfa5 	b.w	800fbc8 <_puts_r>
 800fc7e:	bf00      	nop
 800fc80:	20000034 	.word	0x20000034

0800fc84 <memset>:
 800fc84:	4402      	add	r2, r0
 800fc86:	4603      	mov	r3, r0
 800fc88:	4293      	cmp	r3, r2
 800fc8a:	d100      	bne.n	800fc8e <memset+0xa>
 800fc8c:	4770      	bx	lr
 800fc8e:	f803 1b01 	strb.w	r1, [r3], #1
 800fc92:	e7f9      	b.n	800fc88 <memset+0x4>

0800fc94 <_localeconv_r>:
 800fc94:	4800      	ldr	r0, [pc, #0]	@ (800fc98 <_localeconv_r+0x4>)
 800fc96:	4770      	bx	lr
 800fc98:	20000174 	.word	0x20000174

0800fc9c <_reclaim_reent>:
 800fc9c:	4b29      	ldr	r3, [pc, #164]	@ (800fd44 <_reclaim_reent+0xa8>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	4283      	cmp	r3, r0
 800fca2:	b570      	push	{r4, r5, r6, lr}
 800fca4:	4604      	mov	r4, r0
 800fca6:	d04b      	beq.n	800fd40 <_reclaim_reent+0xa4>
 800fca8:	69c3      	ldr	r3, [r0, #28]
 800fcaa:	b1ab      	cbz	r3, 800fcd8 <_reclaim_reent+0x3c>
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	b16b      	cbz	r3, 800fccc <_reclaim_reent+0x30>
 800fcb0:	2500      	movs	r5, #0
 800fcb2:	69e3      	ldr	r3, [r4, #28]
 800fcb4:	68db      	ldr	r3, [r3, #12]
 800fcb6:	5959      	ldr	r1, [r3, r5]
 800fcb8:	2900      	cmp	r1, #0
 800fcba:	d13b      	bne.n	800fd34 <_reclaim_reent+0x98>
 800fcbc:	3504      	adds	r5, #4
 800fcbe:	2d80      	cmp	r5, #128	@ 0x80
 800fcc0:	d1f7      	bne.n	800fcb2 <_reclaim_reent+0x16>
 800fcc2:	69e3      	ldr	r3, [r4, #28]
 800fcc4:	4620      	mov	r0, r4
 800fcc6:	68d9      	ldr	r1, [r3, #12]
 800fcc8:	f000 fe58 	bl	801097c <_free_r>
 800fccc:	69e3      	ldr	r3, [r4, #28]
 800fcce:	6819      	ldr	r1, [r3, #0]
 800fcd0:	b111      	cbz	r1, 800fcd8 <_reclaim_reent+0x3c>
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	f000 fe52 	bl	801097c <_free_r>
 800fcd8:	6961      	ldr	r1, [r4, #20]
 800fcda:	b111      	cbz	r1, 800fce2 <_reclaim_reent+0x46>
 800fcdc:	4620      	mov	r0, r4
 800fcde:	f000 fe4d 	bl	801097c <_free_r>
 800fce2:	69e1      	ldr	r1, [r4, #28]
 800fce4:	b111      	cbz	r1, 800fcec <_reclaim_reent+0x50>
 800fce6:	4620      	mov	r0, r4
 800fce8:	f000 fe48 	bl	801097c <_free_r>
 800fcec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fcee:	b111      	cbz	r1, 800fcf6 <_reclaim_reent+0x5a>
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	f000 fe43 	bl	801097c <_free_r>
 800fcf6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fcf8:	b111      	cbz	r1, 800fd00 <_reclaim_reent+0x64>
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	f000 fe3e 	bl	801097c <_free_r>
 800fd00:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800fd02:	b111      	cbz	r1, 800fd0a <_reclaim_reent+0x6e>
 800fd04:	4620      	mov	r0, r4
 800fd06:	f000 fe39 	bl	801097c <_free_r>
 800fd0a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800fd0c:	b111      	cbz	r1, 800fd14 <_reclaim_reent+0x78>
 800fd0e:	4620      	mov	r0, r4
 800fd10:	f000 fe34 	bl	801097c <_free_r>
 800fd14:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800fd16:	b111      	cbz	r1, 800fd1e <_reclaim_reent+0x82>
 800fd18:	4620      	mov	r0, r4
 800fd1a:	f000 fe2f 	bl	801097c <_free_r>
 800fd1e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fd20:	b111      	cbz	r1, 800fd28 <_reclaim_reent+0x8c>
 800fd22:	4620      	mov	r0, r4
 800fd24:	f000 fe2a 	bl	801097c <_free_r>
 800fd28:	6a23      	ldr	r3, [r4, #32]
 800fd2a:	b14b      	cbz	r3, 800fd40 <_reclaim_reent+0xa4>
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd32:	4718      	bx	r3
 800fd34:	680e      	ldr	r6, [r1, #0]
 800fd36:	4620      	mov	r0, r4
 800fd38:	f000 fe20 	bl	801097c <_free_r>
 800fd3c:	4631      	mov	r1, r6
 800fd3e:	e7bb      	b.n	800fcb8 <_reclaim_reent+0x1c>
 800fd40:	bd70      	pop	{r4, r5, r6, pc}
 800fd42:	bf00      	nop
 800fd44:	20000034 	.word	0x20000034

0800fd48 <__errno>:
 800fd48:	4b01      	ldr	r3, [pc, #4]	@ (800fd50 <__errno+0x8>)
 800fd4a:	6818      	ldr	r0, [r3, #0]
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop
 800fd50:	20000034 	.word	0x20000034

0800fd54 <__libc_init_array>:
 800fd54:	b570      	push	{r4, r5, r6, lr}
 800fd56:	4d0d      	ldr	r5, [pc, #52]	@ (800fd8c <__libc_init_array+0x38>)
 800fd58:	4c0d      	ldr	r4, [pc, #52]	@ (800fd90 <__libc_init_array+0x3c>)
 800fd5a:	1b64      	subs	r4, r4, r5
 800fd5c:	10a4      	asrs	r4, r4, #2
 800fd5e:	2600      	movs	r6, #0
 800fd60:	42a6      	cmp	r6, r4
 800fd62:	d109      	bne.n	800fd78 <__libc_init_array+0x24>
 800fd64:	4d0b      	ldr	r5, [pc, #44]	@ (800fd94 <__libc_init_array+0x40>)
 800fd66:	4c0c      	ldr	r4, [pc, #48]	@ (800fd98 <__libc_init_array+0x44>)
 800fd68:	f002 fb7a 	bl	8012460 <_init>
 800fd6c:	1b64      	subs	r4, r4, r5
 800fd6e:	10a4      	asrs	r4, r4, #2
 800fd70:	2600      	movs	r6, #0
 800fd72:	42a6      	cmp	r6, r4
 800fd74:	d105      	bne.n	800fd82 <__libc_init_array+0x2e>
 800fd76:	bd70      	pop	{r4, r5, r6, pc}
 800fd78:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd7c:	4798      	blx	r3
 800fd7e:	3601      	adds	r6, #1
 800fd80:	e7ee      	b.n	800fd60 <__libc_init_array+0xc>
 800fd82:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd86:	4798      	blx	r3
 800fd88:	3601      	adds	r6, #1
 800fd8a:	e7f2      	b.n	800fd72 <__libc_init_array+0x1e>
 800fd8c:	08014658 	.word	0x08014658
 800fd90:	08014658 	.word	0x08014658
 800fd94:	08014658 	.word	0x08014658
 800fd98:	0801465c 	.word	0x0801465c

0800fd9c <__retarget_lock_init_recursive>:
 800fd9c:	4770      	bx	lr

0800fd9e <__retarget_lock_acquire_recursive>:
 800fd9e:	4770      	bx	lr

0800fda0 <__retarget_lock_release_recursive>:
 800fda0:	4770      	bx	lr

0800fda2 <memcpy>:
 800fda2:	440a      	add	r2, r1
 800fda4:	4291      	cmp	r1, r2
 800fda6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800fdaa:	d100      	bne.n	800fdae <memcpy+0xc>
 800fdac:	4770      	bx	lr
 800fdae:	b510      	push	{r4, lr}
 800fdb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fdb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fdb8:	4291      	cmp	r1, r2
 800fdba:	d1f9      	bne.n	800fdb0 <memcpy+0xe>
 800fdbc:	bd10      	pop	{r4, pc}

0800fdbe <quorem>:
 800fdbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc2:	6903      	ldr	r3, [r0, #16]
 800fdc4:	690c      	ldr	r4, [r1, #16]
 800fdc6:	42a3      	cmp	r3, r4
 800fdc8:	4607      	mov	r7, r0
 800fdca:	db7e      	blt.n	800feca <quorem+0x10c>
 800fdcc:	3c01      	subs	r4, #1
 800fdce:	f101 0814 	add.w	r8, r1, #20
 800fdd2:	00a3      	lsls	r3, r4, #2
 800fdd4:	f100 0514 	add.w	r5, r0, #20
 800fdd8:	9300      	str	r3, [sp, #0]
 800fdda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdde:	9301      	str	r3, [sp, #4]
 800fde0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fde4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fde8:	3301      	adds	r3, #1
 800fdea:	429a      	cmp	r2, r3
 800fdec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fdf0:	fbb2 f6f3 	udiv	r6, r2, r3
 800fdf4:	d32e      	bcc.n	800fe54 <quorem+0x96>
 800fdf6:	f04f 0a00 	mov.w	sl, #0
 800fdfa:	46c4      	mov	ip, r8
 800fdfc:	46ae      	mov	lr, r5
 800fdfe:	46d3      	mov	fp, sl
 800fe00:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fe04:	b298      	uxth	r0, r3
 800fe06:	fb06 a000 	mla	r0, r6, r0, sl
 800fe0a:	0c02      	lsrs	r2, r0, #16
 800fe0c:	0c1b      	lsrs	r3, r3, #16
 800fe0e:	fb06 2303 	mla	r3, r6, r3, r2
 800fe12:	f8de 2000 	ldr.w	r2, [lr]
 800fe16:	b280      	uxth	r0, r0
 800fe18:	b292      	uxth	r2, r2
 800fe1a:	1a12      	subs	r2, r2, r0
 800fe1c:	445a      	add	r2, fp
 800fe1e:	f8de 0000 	ldr.w	r0, [lr]
 800fe22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fe2c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fe30:	b292      	uxth	r2, r2
 800fe32:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fe36:	45e1      	cmp	r9, ip
 800fe38:	f84e 2b04 	str.w	r2, [lr], #4
 800fe3c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fe40:	d2de      	bcs.n	800fe00 <quorem+0x42>
 800fe42:	9b00      	ldr	r3, [sp, #0]
 800fe44:	58eb      	ldr	r3, [r5, r3]
 800fe46:	b92b      	cbnz	r3, 800fe54 <quorem+0x96>
 800fe48:	9b01      	ldr	r3, [sp, #4]
 800fe4a:	3b04      	subs	r3, #4
 800fe4c:	429d      	cmp	r5, r3
 800fe4e:	461a      	mov	r2, r3
 800fe50:	d32f      	bcc.n	800feb2 <quorem+0xf4>
 800fe52:	613c      	str	r4, [r7, #16]
 800fe54:	4638      	mov	r0, r7
 800fe56:	f001 fc51 	bl	80116fc <__mcmp>
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	db25      	blt.n	800feaa <quorem+0xec>
 800fe5e:	4629      	mov	r1, r5
 800fe60:	2000      	movs	r0, #0
 800fe62:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe66:	f8d1 c000 	ldr.w	ip, [r1]
 800fe6a:	fa1f fe82 	uxth.w	lr, r2
 800fe6e:	fa1f f38c 	uxth.w	r3, ip
 800fe72:	eba3 030e 	sub.w	r3, r3, lr
 800fe76:	4403      	add	r3, r0
 800fe78:	0c12      	lsrs	r2, r2, #16
 800fe7a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fe7e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fe82:	b29b      	uxth	r3, r3
 800fe84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe88:	45c1      	cmp	r9, r8
 800fe8a:	f841 3b04 	str.w	r3, [r1], #4
 800fe8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fe92:	d2e6      	bcs.n	800fe62 <quorem+0xa4>
 800fe94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe9c:	b922      	cbnz	r2, 800fea8 <quorem+0xea>
 800fe9e:	3b04      	subs	r3, #4
 800fea0:	429d      	cmp	r5, r3
 800fea2:	461a      	mov	r2, r3
 800fea4:	d30b      	bcc.n	800febe <quorem+0x100>
 800fea6:	613c      	str	r4, [r7, #16]
 800fea8:	3601      	adds	r6, #1
 800feaa:	4630      	mov	r0, r6
 800feac:	b003      	add	sp, #12
 800feae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feb2:	6812      	ldr	r2, [r2, #0]
 800feb4:	3b04      	subs	r3, #4
 800feb6:	2a00      	cmp	r2, #0
 800feb8:	d1cb      	bne.n	800fe52 <quorem+0x94>
 800feba:	3c01      	subs	r4, #1
 800febc:	e7c6      	b.n	800fe4c <quorem+0x8e>
 800febe:	6812      	ldr	r2, [r2, #0]
 800fec0:	3b04      	subs	r3, #4
 800fec2:	2a00      	cmp	r2, #0
 800fec4:	d1ef      	bne.n	800fea6 <quorem+0xe8>
 800fec6:	3c01      	subs	r4, #1
 800fec8:	e7ea      	b.n	800fea0 <quorem+0xe2>
 800feca:	2000      	movs	r0, #0
 800fecc:	e7ee      	b.n	800feac <quorem+0xee>
	...

0800fed0 <_dtoa_r>:
 800fed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fed4:	ed2d 8b02 	vpush	{d8}
 800fed8:	69c7      	ldr	r7, [r0, #28]
 800feda:	b091      	sub	sp, #68	@ 0x44
 800fedc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fee0:	ec55 4b10 	vmov	r4, r5, d0
 800fee4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800fee6:	9107      	str	r1, [sp, #28]
 800fee8:	4681      	mov	r9, r0
 800feea:	9209      	str	r2, [sp, #36]	@ 0x24
 800feec:	930d      	str	r3, [sp, #52]	@ 0x34
 800feee:	b97f      	cbnz	r7, 800ff10 <_dtoa_r+0x40>
 800fef0:	2010      	movs	r0, #16
 800fef2:	f001 f827 	bl	8010f44 <malloc>
 800fef6:	4602      	mov	r2, r0
 800fef8:	f8c9 001c 	str.w	r0, [r9, #28]
 800fefc:	b920      	cbnz	r0, 800ff08 <_dtoa_r+0x38>
 800fefe:	4ba0      	ldr	r3, [pc, #640]	@ (8010180 <_dtoa_r+0x2b0>)
 800ff00:	21ef      	movs	r1, #239	@ 0xef
 800ff02:	48a0      	ldr	r0, [pc, #640]	@ (8010184 <_dtoa_r+0x2b4>)
 800ff04:	f001 fefc 	bl	8011d00 <__assert_func>
 800ff08:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ff0c:	6007      	str	r7, [r0, #0]
 800ff0e:	60c7      	str	r7, [r0, #12]
 800ff10:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ff14:	6819      	ldr	r1, [r3, #0]
 800ff16:	b159      	cbz	r1, 800ff30 <_dtoa_r+0x60>
 800ff18:	685a      	ldr	r2, [r3, #4]
 800ff1a:	604a      	str	r2, [r1, #4]
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	4093      	lsls	r3, r2
 800ff20:	608b      	str	r3, [r1, #8]
 800ff22:	4648      	mov	r0, r9
 800ff24:	f001 f9b0 	bl	8011288 <_Bfree>
 800ff28:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	601a      	str	r2, [r3, #0]
 800ff30:	1e2b      	subs	r3, r5, #0
 800ff32:	bfbb      	ittet	lt
 800ff34:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ff38:	9303      	strlt	r3, [sp, #12]
 800ff3a:	2300      	movge	r3, #0
 800ff3c:	2201      	movlt	r2, #1
 800ff3e:	bfac      	ite	ge
 800ff40:	6033      	strge	r3, [r6, #0]
 800ff42:	6032      	strlt	r2, [r6, #0]
 800ff44:	4b90      	ldr	r3, [pc, #576]	@ (8010188 <_dtoa_r+0x2b8>)
 800ff46:	9e03      	ldr	r6, [sp, #12]
 800ff48:	43b3      	bics	r3, r6
 800ff4a:	d110      	bne.n	800ff6e <_dtoa_r+0x9e>
 800ff4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ff4e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ff52:	6013      	str	r3, [r2, #0]
 800ff54:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800ff58:	4323      	orrs	r3, r4
 800ff5a:	f000 84de 	beq.w	801091a <_dtoa_r+0xa4a>
 800ff5e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ff60:	4f8a      	ldr	r7, [pc, #552]	@ (801018c <_dtoa_r+0x2bc>)
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	f000 84e0 	beq.w	8010928 <_dtoa_r+0xa58>
 800ff68:	1cfb      	adds	r3, r7, #3
 800ff6a:	f000 bcdb 	b.w	8010924 <_dtoa_r+0xa54>
 800ff6e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ff72:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ff76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff7a:	d10a      	bne.n	800ff92 <_dtoa_r+0xc2>
 800ff7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ff7e:	2301      	movs	r3, #1
 800ff80:	6013      	str	r3, [r2, #0]
 800ff82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ff84:	b113      	cbz	r3, 800ff8c <_dtoa_r+0xbc>
 800ff86:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ff88:	4b81      	ldr	r3, [pc, #516]	@ (8010190 <_dtoa_r+0x2c0>)
 800ff8a:	6013      	str	r3, [r2, #0]
 800ff8c:	4f81      	ldr	r7, [pc, #516]	@ (8010194 <_dtoa_r+0x2c4>)
 800ff8e:	f000 bccb 	b.w	8010928 <_dtoa_r+0xa58>
 800ff92:	aa0e      	add	r2, sp, #56	@ 0x38
 800ff94:	a90f      	add	r1, sp, #60	@ 0x3c
 800ff96:	4648      	mov	r0, r9
 800ff98:	eeb0 0b48 	vmov.f64	d0, d8
 800ff9c:	f001 fc5e 	bl	801185c <__d2b>
 800ffa0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ffa4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ffa6:	9001      	str	r0, [sp, #4]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d045      	beq.n	8010038 <_dtoa_r+0x168>
 800ffac:	eeb0 7b48 	vmov.f64	d7, d8
 800ffb0:	ee18 1a90 	vmov	r1, s17
 800ffb4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ffb8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ffbc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ffc0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ffc4:	2500      	movs	r5, #0
 800ffc6:	ee07 1a90 	vmov	s15, r1
 800ffca:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ffce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010168 <_dtoa_r+0x298>
 800ffd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ffd6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010170 <_dtoa_r+0x2a0>
 800ffda:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ffde:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010178 <_dtoa_r+0x2a8>
 800ffe2:	ee07 3a90 	vmov	s15, r3
 800ffe6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ffea:	eeb0 7b46 	vmov.f64	d7, d6
 800ffee:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fff2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fff6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fffe:	ee16 8a90 	vmov	r8, s13
 8010002:	d508      	bpl.n	8010016 <_dtoa_r+0x146>
 8010004:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010008:	eeb4 6b47 	vcmp.f64	d6, d7
 801000c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010010:	bf18      	it	ne
 8010012:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8010016:	f1b8 0f16 	cmp.w	r8, #22
 801001a:	d82b      	bhi.n	8010074 <_dtoa_r+0x1a4>
 801001c:	495e      	ldr	r1, [pc, #376]	@ (8010198 <_dtoa_r+0x2c8>)
 801001e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8010022:	ed91 7b00 	vldr	d7, [r1]
 8010026:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801002a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801002e:	d501      	bpl.n	8010034 <_dtoa_r+0x164>
 8010030:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8010034:	2100      	movs	r1, #0
 8010036:	e01e      	b.n	8010076 <_dtoa_r+0x1a6>
 8010038:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801003a:	4413      	add	r3, r2
 801003c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010040:	2920      	cmp	r1, #32
 8010042:	bfc1      	itttt	gt
 8010044:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010048:	408e      	lslgt	r6, r1
 801004a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801004e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8010052:	bfd6      	itet	le
 8010054:	f1c1 0120 	rsble	r1, r1, #32
 8010058:	4331      	orrgt	r1, r6
 801005a:	fa04 f101 	lslle.w	r1, r4, r1
 801005e:	ee07 1a90 	vmov	s15, r1
 8010062:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010066:	3b01      	subs	r3, #1
 8010068:	ee17 1a90 	vmov	r1, s15
 801006c:	2501      	movs	r5, #1
 801006e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8010072:	e7a8      	b.n	800ffc6 <_dtoa_r+0xf6>
 8010074:	2101      	movs	r1, #1
 8010076:	1ad2      	subs	r2, r2, r3
 8010078:	1e53      	subs	r3, r2, #1
 801007a:	9306      	str	r3, [sp, #24]
 801007c:	bf45      	ittet	mi
 801007e:	f1c2 0301 	rsbmi	r3, r2, #1
 8010082:	9305      	strmi	r3, [sp, #20]
 8010084:	2300      	movpl	r3, #0
 8010086:	2300      	movmi	r3, #0
 8010088:	bf4c      	ite	mi
 801008a:	9306      	strmi	r3, [sp, #24]
 801008c:	9305      	strpl	r3, [sp, #20]
 801008e:	f1b8 0f00 	cmp.w	r8, #0
 8010092:	910c      	str	r1, [sp, #48]	@ 0x30
 8010094:	db18      	blt.n	80100c8 <_dtoa_r+0x1f8>
 8010096:	9b06      	ldr	r3, [sp, #24]
 8010098:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801009c:	4443      	add	r3, r8
 801009e:	9306      	str	r3, [sp, #24]
 80100a0:	2300      	movs	r3, #0
 80100a2:	9a07      	ldr	r2, [sp, #28]
 80100a4:	2a09      	cmp	r2, #9
 80100a6:	d849      	bhi.n	801013c <_dtoa_r+0x26c>
 80100a8:	2a05      	cmp	r2, #5
 80100aa:	bfc4      	itt	gt
 80100ac:	3a04      	subgt	r2, #4
 80100ae:	9207      	strgt	r2, [sp, #28]
 80100b0:	9a07      	ldr	r2, [sp, #28]
 80100b2:	f1a2 0202 	sub.w	r2, r2, #2
 80100b6:	bfcc      	ite	gt
 80100b8:	2400      	movgt	r4, #0
 80100ba:	2401      	movle	r4, #1
 80100bc:	2a03      	cmp	r2, #3
 80100be:	d848      	bhi.n	8010152 <_dtoa_r+0x282>
 80100c0:	e8df f002 	tbb	[pc, r2]
 80100c4:	3a2c2e0b 	.word	0x3a2c2e0b
 80100c8:	9b05      	ldr	r3, [sp, #20]
 80100ca:	2200      	movs	r2, #0
 80100cc:	eba3 0308 	sub.w	r3, r3, r8
 80100d0:	9305      	str	r3, [sp, #20]
 80100d2:	920a      	str	r2, [sp, #40]	@ 0x28
 80100d4:	f1c8 0300 	rsb	r3, r8, #0
 80100d8:	e7e3      	b.n	80100a2 <_dtoa_r+0x1d2>
 80100da:	2200      	movs	r2, #0
 80100dc:	9208      	str	r2, [sp, #32]
 80100de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80100e0:	2a00      	cmp	r2, #0
 80100e2:	dc39      	bgt.n	8010158 <_dtoa_r+0x288>
 80100e4:	f04f 0b01 	mov.w	fp, #1
 80100e8:	46da      	mov	sl, fp
 80100ea:	465a      	mov	r2, fp
 80100ec:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80100f0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80100f4:	2100      	movs	r1, #0
 80100f6:	2004      	movs	r0, #4
 80100f8:	f100 0614 	add.w	r6, r0, #20
 80100fc:	4296      	cmp	r6, r2
 80100fe:	d930      	bls.n	8010162 <_dtoa_r+0x292>
 8010100:	6079      	str	r1, [r7, #4]
 8010102:	4648      	mov	r0, r9
 8010104:	9304      	str	r3, [sp, #16]
 8010106:	f001 f87f 	bl	8011208 <_Balloc>
 801010a:	9b04      	ldr	r3, [sp, #16]
 801010c:	4607      	mov	r7, r0
 801010e:	2800      	cmp	r0, #0
 8010110:	d146      	bne.n	80101a0 <_dtoa_r+0x2d0>
 8010112:	4b22      	ldr	r3, [pc, #136]	@ (801019c <_dtoa_r+0x2cc>)
 8010114:	4602      	mov	r2, r0
 8010116:	f240 11af 	movw	r1, #431	@ 0x1af
 801011a:	e6f2      	b.n	800ff02 <_dtoa_r+0x32>
 801011c:	2201      	movs	r2, #1
 801011e:	e7dd      	b.n	80100dc <_dtoa_r+0x20c>
 8010120:	2200      	movs	r2, #0
 8010122:	9208      	str	r2, [sp, #32]
 8010124:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010126:	eb08 0b02 	add.w	fp, r8, r2
 801012a:	f10b 0a01 	add.w	sl, fp, #1
 801012e:	4652      	mov	r2, sl
 8010130:	2a01      	cmp	r2, #1
 8010132:	bfb8      	it	lt
 8010134:	2201      	movlt	r2, #1
 8010136:	e7db      	b.n	80100f0 <_dtoa_r+0x220>
 8010138:	2201      	movs	r2, #1
 801013a:	e7f2      	b.n	8010122 <_dtoa_r+0x252>
 801013c:	2401      	movs	r4, #1
 801013e:	2200      	movs	r2, #0
 8010140:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010144:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010148:	2100      	movs	r1, #0
 801014a:	46da      	mov	sl, fp
 801014c:	2212      	movs	r2, #18
 801014e:	9109      	str	r1, [sp, #36]	@ 0x24
 8010150:	e7ce      	b.n	80100f0 <_dtoa_r+0x220>
 8010152:	2201      	movs	r2, #1
 8010154:	9208      	str	r2, [sp, #32]
 8010156:	e7f5      	b.n	8010144 <_dtoa_r+0x274>
 8010158:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801015c:	46da      	mov	sl, fp
 801015e:	465a      	mov	r2, fp
 8010160:	e7c6      	b.n	80100f0 <_dtoa_r+0x220>
 8010162:	3101      	adds	r1, #1
 8010164:	0040      	lsls	r0, r0, #1
 8010166:	e7c7      	b.n	80100f8 <_dtoa_r+0x228>
 8010168:	636f4361 	.word	0x636f4361
 801016c:	3fd287a7 	.word	0x3fd287a7
 8010170:	8b60c8b3 	.word	0x8b60c8b3
 8010174:	3fc68a28 	.word	0x3fc68a28
 8010178:	509f79fb 	.word	0x509f79fb
 801017c:	3fd34413 	.word	0x3fd34413
 8010180:	08012a69 	.word	0x08012a69
 8010184:	08012a80 	.word	0x08012a80
 8010188:	7ff00000 	.word	0x7ff00000
 801018c:	08012a65 	.word	0x08012a65
 8010190:	08012a39 	.word	0x08012a39
 8010194:	08012a38 	.word	0x08012a38
 8010198:	08012b88 	.word	0x08012b88
 801019c:	08012ad8 	.word	0x08012ad8
 80101a0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80101a4:	f1ba 0f0e 	cmp.w	sl, #14
 80101a8:	6010      	str	r0, [r2, #0]
 80101aa:	d86f      	bhi.n	801028c <_dtoa_r+0x3bc>
 80101ac:	2c00      	cmp	r4, #0
 80101ae:	d06d      	beq.n	801028c <_dtoa_r+0x3bc>
 80101b0:	f1b8 0f00 	cmp.w	r8, #0
 80101b4:	f340 80c2 	ble.w	801033c <_dtoa_r+0x46c>
 80101b8:	4aca      	ldr	r2, [pc, #808]	@ (80104e4 <_dtoa_r+0x614>)
 80101ba:	f008 010f 	and.w	r1, r8, #15
 80101be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80101c2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80101c6:	ed92 7b00 	vldr	d7, [r2]
 80101ca:	ea4f 1128 	mov.w	r1, r8, asr #4
 80101ce:	f000 80a9 	beq.w	8010324 <_dtoa_r+0x454>
 80101d2:	4ac5      	ldr	r2, [pc, #788]	@ (80104e8 <_dtoa_r+0x618>)
 80101d4:	ed92 6b08 	vldr	d6, [r2, #32]
 80101d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80101dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80101e0:	f001 010f 	and.w	r1, r1, #15
 80101e4:	2203      	movs	r2, #3
 80101e6:	48c0      	ldr	r0, [pc, #768]	@ (80104e8 <_dtoa_r+0x618>)
 80101e8:	2900      	cmp	r1, #0
 80101ea:	f040 809d 	bne.w	8010328 <_dtoa_r+0x458>
 80101ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 80101f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80101f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80101fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80101fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010200:	2900      	cmp	r1, #0
 8010202:	f000 80c1 	beq.w	8010388 <_dtoa_r+0x4b8>
 8010206:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801020a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801020e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010212:	f140 80b9 	bpl.w	8010388 <_dtoa_r+0x4b8>
 8010216:	f1ba 0f00 	cmp.w	sl, #0
 801021a:	f000 80b5 	beq.w	8010388 <_dtoa_r+0x4b8>
 801021e:	f1bb 0f00 	cmp.w	fp, #0
 8010222:	dd31      	ble.n	8010288 <_dtoa_r+0x3b8>
 8010224:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010228:	ee27 7b06 	vmul.f64	d7, d7, d6
 801022c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010230:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8010234:	9104      	str	r1, [sp, #16]
 8010236:	3201      	adds	r2, #1
 8010238:	465c      	mov	r4, fp
 801023a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801023e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8010242:	ee07 2a90 	vmov	s15, r2
 8010246:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801024a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801024e:	ee15 2a90 	vmov	r2, s11
 8010252:	ec51 0b15 	vmov	r0, r1, d5
 8010256:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801025a:	2c00      	cmp	r4, #0
 801025c:	f040 8098 	bne.w	8010390 <_dtoa_r+0x4c0>
 8010260:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010264:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010268:	ec41 0b17 	vmov	d7, r0, r1
 801026c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010274:	f300 8261 	bgt.w	801073a <_dtoa_r+0x86a>
 8010278:	eeb1 7b47 	vneg.f64	d7, d7
 801027c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010284:	f100 80f5 	bmi.w	8010472 <_dtoa_r+0x5a2>
 8010288:	ed8d 8b02 	vstr	d8, [sp, #8]
 801028c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801028e:	2a00      	cmp	r2, #0
 8010290:	f2c0 812c 	blt.w	80104ec <_dtoa_r+0x61c>
 8010294:	f1b8 0f0e 	cmp.w	r8, #14
 8010298:	f300 8128 	bgt.w	80104ec <_dtoa_r+0x61c>
 801029c:	4b91      	ldr	r3, [pc, #580]	@ (80104e4 <_dtoa_r+0x614>)
 801029e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80102a2:	ed93 6b00 	vldr	d6, [r3]
 80102a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	da03      	bge.n	80102b4 <_dtoa_r+0x3e4>
 80102ac:	f1ba 0f00 	cmp.w	sl, #0
 80102b0:	f340 80d2 	ble.w	8010458 <_dtoa_r+0x588>
 80102b4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80102b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80102bc:	463e      	mov	r6, r7
 80102be:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80102c2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80102c6:	ee15 3a10 	vmov	r3, s10
 80102ca:	3330      	adds	r3, #48	@ 0x30
 80102cc:	f806 3b01 	strb.w	r3, [r6], #1
 80102d0:	1bf3      	subs	r3, r6, r7
 80102d2:	459a      	cmp	sl, r3
 80102d4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80102d8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80102dc:	f040 80f8 	bne.w	80104d0 <_dtoa_r+0x600>
 80102e0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80102e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80102e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ec:	f300 80dd 	bgt.w	80104aa <_dtoa_r+0x5da>
 80102f0:	eeb4 7b46 	vcmp.f64	d7, d6
 80102f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f8:	d104      	bne.n	8010304 <_dtoa_r+0x434>
 80102fa:	ee15 3a10 	vmov	r3, s10
 80102fe:	07db      	lsls	r3, r3, #31
 8010300:	f100 80d3 	bmi.w	80104aa <_dtoa_r+0x5da>
 8010304:	9901      	ldr	r1, [sp, #4]
 8010306:	4648      	mov	r0, r9
 8010308:	f000 ffbe 	bl	8011288 <_Bfree>
 801030c:	2300      	movs	r3, #0
 801030e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010310:	7033      	strb	r3, [r6, #0]
 8010312:	f108 0301 	add.w	r3, r8, #1
 8010316:	6013      	str	r3, [r2, #0]
 8010318:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801031a:	2b00      	cmp	r3, #0
 801031c:	f000 8304 	beq.w	8010928 <_dtoa_r+0xa58>
 8010320:	601e      	str	r6, [r3, #0]
 8010322:	e301      	b.n	8010928 <_dtoa_r+0xa58>
 8010324:	2202      	movs	r2, #2
 8010326:	e75e      	b.n	80101e6 <_dtoa_r+0x316>
 8010328:	07cc      	lsls	r4, r1, #31
 801032a:	d504      	bpl.n	8010336 <_dtoa_r+0x466>
 801032c:	ed90 6b00 	vldr	d6, [r0]
 8010330:	3201      	adds	r2, #1
 8010332:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010336:	1049      	asrs	r1, r1, #1
 8010338:	3008      	adds	r0, #8
 801033a:	e755      	b.n	80101e8 <_dtoa_r+0x318>
 801033c:	d022      	beq.n	8010384 <_dtoa_r+0x4b4>
 801033e:	f1c8 0100 	rsb	r1, r8, #0
 8010342:	4a68      	ldr	r2, [pc, #416]	@ (80104e4 <_dtoa_r+0x614>)
 8010344:	f001 000f 	and.w	r0, r1, #15
 8010348:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801034c:	ed92 7b00 	vldr	d7, [r2]
 8010350:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010354:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010358:	4863      	ldr	r0, [pc, #396]	@ (80104e8 <_dtoa_r+0x618>)
 801035a:	1109      	asrs	r1, r1, #4
 801035c:	2400      	movs	r4, #0
 801035e:	2202      	movs	r2, #2
 8010360:	b929      	cbnz	r1, 801036e <_dtoa_r+0x49e>
 8010362:	2c00      	cmp	r4, #0
 8010364:	f43f af49 	beq.w	80101fa <_dtoa_r+0x32a>
 8010368:	ed8d 7b02 	vstr	d7, [sp, #8]
 801036c:	e745      	b.n	80101fa <_dtoa_r+0x32a>
 801036e:	07ce      	lsls	r6, r1, #31
 8010370:	d505      	bpl.n	801037e <_dtoa_r+0x4ae>
 8010372:	ed90 6b00 	vldr	d6, [r0]
 8010376:	3201      	adds	r2, #1
 8010378:	2401      	movs	r4, #1
 801037a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801037e:	1049      	asrs	r1, r1, #1
 8010380:	3008      	adds	r0, #8
 8010382:	e7ed      	b.n	8010360 <_dtoa_r+0x490>
 8010384:	2202      	movs	r2, #2
 8010386:	e738      	b.n	80101fa <_dtoa_r+0x32a>
 8010388:	f8cd 8010 	str.w	r8, [sp, #16]
 801038c:	4654      	mov	r4, sl
 801038e:	e754      	b.n	801023a <_dtoa_r+0x36a>
 8010390:	4a54      	ldr	r2, [pc, #336]	@ (80104e4 <_dtoa_r+0x614>)
 8010392:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010396:	ed12 4b02 	vldr	d4, [r2, #-8]
 801039a:	9a08      	ldr	r2, [sp, #32]
 801039c:	ec41 0b17 	vmov	d7, r0, r1
 80103a0:	443c      	add	r4, r7
 80103a2:	b34a      	cbz	r2, 80103f8 <_dtoa_r+0x528>
 80103a4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80103a8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80103ac:	463e      	mov	r6, r7
 80103ae:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80103b2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80103b6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80103ba:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80103be:	ee14 2a90 	vmov	r2, s9
 80103c2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80103c6:	3230      	adds	r2, #48	@ 0x30
 80103c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80103cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80103d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103d4:	f806 2b01 	strb.w	r2, [r6], #1
 80103d8:	d438      	bmi.n	801044c <_dtoa_r+0x57c>
 80103da:	ee32 5b46 	vsub.f64	d5, d2, d6
 80103de:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80103e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103e6:	d462      	bmi.n	80104ae <_dtoa_r+0x5de>
 80103e8:	42a6      	cmp	r6, r4
 80103ea:	f43f af4d 	beq.w	8010288 <_dtoa_r+0x3b8>
 80103ee:	ee27 7b03 	vmul.f64	d7, d7, d3
 80103f2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80103f6:	e7e0      	b.n	80103ba <_dtoa_r+0x4ea>
 80103f8:	4621      	mov	r1, r4
 80103fa:	463e      	mov	r6, r7
 80103fc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010400:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010404:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010408:	ee14 2a90 	vmov	r2, s9
 801040c:	3230      	adds	r2, #48	@ 0x30
 801040e:	f806 2b01 	strb.w	r2, [r6], #1
 8010412:	42a6      	cmp	r6, r4
 8010414:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010418:	ee36 6b45 	vsub.f64	d6, d6, d5
 801041c:	d119      	bne.n	8010452 <_dtoa_r+0x582>
 801041e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010422:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010426:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801042a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801042e:	dc3e      	bgt.n	80104ae <_dtoa_r+0x5de>
 8010430:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010434:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801043c:	f57f af24 	bpl.w	8010288 <_dtoa_r+0x3b8>
 8010440:	460e      	mov	r6, r1
 8010442:	3901      	subs	r1, #1
 8010444:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010448:	2b30      	cmp	r3, #48	@ 0x30
 801044a:	d0f9      	beq.n	8010440 <_dtoa_r+0x570>
 801044c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010450:	e758      	b.n	8010304 <_dtoa_r+0x434>
 8010452:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010456:	e7d5      	b.n	8010404 <_dtoa_r+0x534>
 8010458:	d10b      	bne.n	8010472 <_dtoa_r+0x5a2>
 801045a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801045e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010462:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010466:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801046a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801046e:	f2c0 8161 	blt.w	8010734 <_dtoa_r+0x864>
 8010472:	2400      	movs	r4, #0
 8010474:	4625      	mov	r5, r4
 8010476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010478:	43db      	mvns	r3, r3
 801047a:	9304      	str	r3, [sp, #16]
 801047c:	463e      	mov	r6, r7
 801047e:	f04f 0800 	mov.w	r8, #0
 8010482:	4621      	mov	r1, r4
 8010484:	4648      	mov	r0, r9
 8010486:	f000 feff 	bl	8011288 <_Bfree>
 801048a:	2d00      	cmp	r5, #0
 801048c:	d0de      	beq.n	801044c <_dtoa_r+0x57c>
 801048e:	f1b8 0f00 	cmp.w	r8, #0
 8010492:	d005      	beq.n	80104a0 <_dtoa_r+0x5d0>
 8010494:	45a8      	cmp	r8, r5
 8010496:	d003      	beq.n	80104a0 <_dtoa_r+0x5d0>
 8010498:	4641      	mov	r1, r8
 801049a:	4648      	mov	r0, r9
 801049c:	f000 fef4 	bl	8011288 <_Bfree>
 80104a0:	4629      	mov	r1, r5
 80104a2:	4648      	mov	r0, r9
 80104a4:	f000 fef0 	bl	8011288 <_Bfree>
 80104a8:	e7d0      	b.n	801044c <_dtoa_r+0x57c>
 80104aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80104ae:	4633      	mov	r3, r6
 80104b0:	461e      	mov	r6, r3
 80104b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104b6:	2a39      	cmp	r2, #57	@ 0x39
 80104b8:	d106      	bne.n	80104c8 <_dtoa_r+0x5f8>
 80104ba:	429f      	cmp	r7, r3
 80104bc:	d1f8      	bne.n	80104b0 <_dtoa_r+0x5e0>
 80104be:	9a04      	ldr	r2, [sp, #16]
 80104c0:	3201      	adds	r2, #1
 80104c2:	9204      	str	r2, [sp, #16]
 80104c4:	2230      	movs	r2, #48	@ 0x30
 80104c6:	703a      	strb	r2, [r7, #0]
 80104c8:	781a      	ldrb	r2, [r3, #0]
 80104ca:	3201      	adds	r2, #1
 80104cc:	701a      	strb	r2, [r3, #0]
 80104ce:	e7bd      	b.n	801044c <_dtoa_r+0x57c>
 80104d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80104d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80104d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104dc:	f47f aeef 	bne.w	80102be <_dtoa_r+0x3ee>
 80104e0:	e710      	b.n	8010304 <_dtoa_r+0x434>
 80104e2:	bf00      	nop
 80104e4:	08012b88 	.word	0x08012b88
 80104e8:	08012b60 	.word	0x08012b60
 80104ec:	9908      	ldr	r1, [sp, #32]
 80104ee:	2900      	cmp	r1, #0
 80104f0:	f000 80e3 	beq.w	80106ba <_dtoa_r+0x7ea>
 80104f4:	9907      	ldr	r1, [sp, #28]
 80104f6:	2901      	cmp	r1, #1
 80104f8:	f300 80c8 	bgt.w	801068c <_dtoa_r+0x7bc>
 80104fc:	2d00      	cmp	r5, #0
 80104fe:	f000 80c1 	beq.w	8010684 <_dtoa_r+0x7b4>
 8010502:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010506:	9e05      	ldr	r6, [sp, #20]
 8010508:	461c      	mov	r4, r3
 801050a:	9304      	str	r3, [sp, #16]
 801050c:	9b05      	ldr	r3, [sp, #20]
 801050e:	4413      	add	r3, r2
 8010510:	9305      	str	r3, [sp, #20]
 8010512:	9b06      	ldr	r3, [sp, #24]
 8010514:	2101      	movs	r1, #1
 8010516:	4413      	add	r3, r2
 8010518:	4648      	mov	r0, r9
 801051a:	9306      	str	r3, [sp, #24]
 801051c:	f000 ff68 	bl	80113f0 <__i2b>
 8010520:	9b04      	ldr	r3, [sp, #16]
 8010522:	4605      	mov	r5, r0
 8010524:	b166      	cbz	r6, 8010540 <_dtoa_r+0x670>
 8010526:	9a06      	ldr	r2, [sp, #24]
 8010528:	2a00      	cmp	r2, #0
 801052a:	dd09      	ble.n	8010540 <_dtoa_r+0x670>
 801052c:	42b2      	cmp	r2, r6
 801052e:	9905      	ldr	r1, [sp, #20]
 8010530:	bfa8      	it	ge
 8010532:	4632      	movge	r2, r6
 8010534:	1a89      	subs	r1, r1, r2
 8010536:	9105      	str	r1, [sp, #20]
 8010538:	9906      	ldr	r1, [sp, #24]
 801053a:	1ab6      	subs	r6, r6, r2
 801053c:	1a8a      	subs	r2, r1, r2
 801053e:	9206      	str	r2, [sp, #24]
 8010540:	b1fb      	cbz	r3, 8010582 <_dtoa_r+0x6b2>
 8010542:	9a08      	ldr	r2, [sp, #32]
 8010544:	2a00      	cmp	r2, #0
 8010546:	f000 80bc 	beq.w	80106c2 <_dtoa_r+0x7f2>
 801054a:	b19c      	cbz	r4, 8010574 <_dtoa_r+0x6a4>
 801054c:	4629      	mov	r1, r5
 801054e:	4622      	mov	r2, r4
 8010550:	4648      	mov	r0, r9
 8010552:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010554:	f001 f80c 	bl	8011570 <__pow5mult>
 8010558:	9a01      	ldr	r2, [sp, #4]
 801055a:	4601      	mov	r1, r0
 801055c:	4605      	mov	r5, r0
 801055e:	4648      	mov	r0, r9
 8010560:	f000 ff5c 	bl	801141c <__multiply>
 8010564:	9901      	ldr	r1, [sp, #4]
 8010566:	9004      	str	r0, [sp, #16]
 8010568:	4648      	mov	r0, r9
 801056a:	f000 fe8d 	bl	8011288 <_Bfree>
 801056e:	9a04      	ldr	r2, [sp, #16]
 8010570:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010572:	9201      	str	r2, [sp, #4]
 8010574:	1b1a      	subs	r2, r3, r4
 8010576:	d004      	beq.n	8010582 <_dtoa_r+0x6b2>
 8010578:	9901      	ldr	r1, [sp, #4]
 801057a:	4648      	mov	r0, r9
 801057c:	f000 fff8 	bl	8011570 <__pow5mult>
 8010580:	9001      	str	r0, [sp, #4]
 8010582:	2101      	movs	r1, #1
 8010584:	4648      	mov	r0, r9
 8010586:	f000 ff33 	bl	80113f0 <__i2b>
 801058a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801058c:	4604      	mov	r4, r0
 801058e:	2b00      	cmp	r3, #0
 8010590:	f000 81d0 	beq.w	8010934 <_dtoa_r+0xa64>
 8010594:	461a      	mov	r2, r3
 8010596:	4601      	mov	r1, r0
 8010598:	4648      	mov	r0, r9
 801059a:	f000 ffe9 	bl	8011570 <__pow5mult>
 801059e:	9b07      	ldr	r3, [sp, #28]
 80105a0:	2b01      	cmp	r3, #1
 80105a2:	4604      	mov	r4, r0
 80105a4:	f300 8095 	bgt.w	80106d2 <_dtoa_r+0x802>
 80105a8:	9b02      	ldr	r3, [sp, #8]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	f040 808b 	bne.w	80106c6 <_dtoa_r+0x7f6>
 80105b0:	9b03      	ldr	r3, [sp, #12]
 80105b2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80105b6:	2a00      	cmp	r2, #0
 80105b8:	f040 8087 	bne.w	80106ca <_dtoa_r+0x7fa>
 80105bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80105c0:	0d12      	lsrs	r2, r2, #20
 80105c2:	0512      	lsls	r2, r2, #20
 80105c4:	2a00      	cmp	r2, #0
 80105c6:	f000 8082 	beq.w	80106ce <_dtoa_r+0x7fe>
 80105ca:	9b05      	ldr	r3, [sp, #20]
 80105cc:	3301      	adds	r3, #1
 80105ce:	9305      	str	r3, [sp, #20]
 80105d0:	9b06      	ldr	r3, [sp, #24]
 80105d2:	3301      	adds	r3, #1
 80105d4:	9306      	str	r3, [sp, #24]
 80105d6:	2301      	movs	r3, #1
 80105d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80105da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105dc:	2b00      	cmp	r3, #0
 80105de:	f000 81af 	beq.w	8010940 <_dtoa_r+0xa70>
 80105e2:	6922      	ldr	r2, [r4, #16]
 80105e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80105e8:	6910      	ldr	r0, [r2, #16]
 80105ea:	f000 feb5 	bl	8011358 <__hi0bits>
 80105ee:	f1c0 0020 	rsb	r0, r0, #32
 80105f2:	9b06      	ldr	r3, [sp, #24]
 80105f4:	4418      	add	r0, r3
 80105f6:	f010 001f 	ands.w	r0, r0, #31
 80105fa:	d076      	beq.n	80106ea <_dtoa_r+0x81a>
 80105fc:	f1c0 0220 	rsb	r2, r0, #32
 8010600:	2a04      	cmp	r2, #4
 8010602:	dd69      	ble.n	80106d8 <_dtoa_r+0x808>
 8010604:	9b05      	ldr	r3, [sp, #20]
 8010606:	f1c0 001c 	rsb	r0, r0, #28
 801060a:	4403      	add	r3, r0
 801060c:	9305      	str	r3, [sp, #20]
 801060e:	9b06      	ldr	r3, [sp, #24]
 8010610:	4406      	add	r6, r0
 8010612:	4403      	add	r3, r0
 8010614:	9306      	str	r3, [sp, #24]
 8010616:	9b05      	ldr	r3, [sp, #20]
 8010618:	2b00      	cmp	r3, #0
 801061a:	dd05      	ble.n	8010628 <_dtoa_r+0x758>
 801061c:	9901      	ldr	r1, [sp, #4]
 801061e:	461a      	mov	r2, r3
 8010620:	4648      	mov	r0, r9
 8010622:	f000 ffff 	bl	8011624 <__lshift>
 8010626:	9001      	str	r0, [sp, #4]
 8010628:	9b06      	ldr	r3, [sp, #24]
 801062a:	2b00      	cmp	r3, #0
 801062c:	dd05      	ble.n	801063a <_dtoa_r+0x76a>
 801062e:	4621      	mov	r1, r4
 8010630:	461a      	mov	r2, r3
 8010632:	4648      	mov	r0, r9
 8010634:	f000 fff6 	bl	8011624 <__lshift>
 8010638:	4604      	mov	r4, r0
 801063a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801063c:	2b00      	cmp	r3, #0
 801063e:	d056      	beq.n	80106ee <_dtoa_r+0x81e>
 8010640:	9801      	ldr	r0, [sp, #4]
 8010642:	4621      	mov	r1, r4
 8010644:	f001 f85a 	bl	80116fc <__mcmp>
 8010648:	2800      	cmp	r0, #0
 801064a:	da50      	bge.n	80106ee <_dtoa_r+0x81e>
 801064c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8010650:	9304      	str	r3, [sp, #16]
 8010652:	9901      	ldr	r1, [sp, #4]
 8010654:	2300      	movs	r3, #0
 8010656:	220a      	movs	r2, #10
 8010658:	4648      	mov	r0, r9
 801065a:	f000 fe37 	bl	80112cc <__multadd>
 801065e:	9b08      	ldr	r3, [sp, #32]
 8010660:	9001      	str	r0, [sp, #4]
 8010662:	2b00      	cmp	r3, #0
 8010664:	f000 816e 	beq.w	8010944 <_dtoa_r+0xa74>
 8010668:	4629      	mov	r1, r5
 801066a:	2300      	movs	r3, #0
 801066c:	220a      	movs	r2, #10
 801066e:	4648      	mov	r0, r9
 8010670:	f000 fe2c 	bl	80112cc <__multadd>
 8010674:	f1bb 0f00 	cmp.w	fp, #0
 8010678:	4605      	mov	r5, r0
 801067a:	dc64      	bgt.n	8010746 <_dtoa_r+0x876>
 801067c:	9b07      	ldr	r3, [sp, #28]
 801067e:	2b02      	cmp	r3, #2
 8010680:	dc3e      	bgt.n	8010700 <_dtoa_r+0x830>
 8010682:	e060      	b.n	8010746 <_dtoa_r+0x876>
 8010684:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010686:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801068a:	e73c      	b.n	8010506 <_dtoa_r+0x636>
 801068c:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8010690:	42a3      	cmp	r3, r4
 8010692:	bfbf      	itttt	lt
 8010694:	1ae2      	sublt	r2, r4, r3
 8010696:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010698:	189b      	addlt	r3, r3, r2
 801069a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801069c:	bfae      	itee	ge
 801069e:	1b1c      	subge	r4, r3, r4
 80106a0:	4623      	movlt	r3, r4
 80106a2:	2400      	movlt	r4, #0
 80106a4:	f1ba 0f00 	cmp.w	sl, #0
 80106a8:	bfb5      	itete	lt
 80106aa:	9a05      	ldrlt	r2, [sp, #20]
 80106ac:	9e05      	ldrge	r6, [sp, #20]
 80106ae:	eba2 060a 	sublt.w	r6, r2, sl
 80106b2:	4652      	movge	r2, sl
 80106b4:	bfb8      	it	lt
 80106b6:	2200      	movlt	r2, #0
 80106b8:	e727      	b.n	801050a <_dtoa_r+0x63a>
 80106ba:	9e05      	ldr	r6, [sp, #20]
 80106bc:	9d08      	ldr	r5, [sp, #32]
 80106be:	461c      	mov	r4, r3
 80106c0:	e730      	b.n	8010524 <_dtoa_r+0x654>
 80106c2:	461a      	mov	r2, r3
 80106c4:	e758      	b.n	8010578 <_dtoa_r+0x6a8>
 80106c6:	2300      	movs	r3, #0
 80106c8:	e786      	b.n	80105d8 <_dtoa_r+0x708>
 80106ca:	9b02      	ldr	r3, [sp, #8]
 80106cc:	e784      	b.n	80105d8 <_dtoa_r+0x708>
 80106ce:	920b      	str	r2, [sp, #44]	@ 0x2c
 80106d0:	e783      	b.n	80105da <_dtoa_r+0x70a>
 80106d2:	2300      	movs	r3, #0
 80106d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80106d6:	e784      	b.n	80105e2 <_dtoa_r+0x712>
 80106d8:	d09d      	beq.n	8010616 <_dtoa_r+0x746>
 80106da:	9b05      	ldr	r3, [sp, #20]
 80106dc:	321c      	adds	r2, #28
 80106de:	4413      	add	r3, r2
 80106e0:	9305      	str	r3, [sp, #20]
 80106e2:	9b06      	ldr	r3, [sp, #24]
 80106e4:	4416      	add	r6, r2
 80106e6:	4413      	add	r3, r2
 80106e8:	e794      	b.n	8010614 <_dtoa_r+0x744>
 80106ea:	4602      	mov	r2, r0
 80106ec:	e7f5      	b.n	80106da <_dtoa_r+0x80a>
 80106ee:	f1ba 0f00 	cmp.w	sl, #0
 80106f2:	f8cd 8010 	str.w	r8, [sp, #16]
 80106f6:	46d3      	mov	fp, sl
 80106f8:	dc21      	bgt.n	801073e <_dtoa_r+0x86e>
 80106fa:	9b07      	ldr	r3, [sp, #28]
 80106fc:	2b02      	cmp	r3, #2
 80106fe:	dd1e      	ble.n	801073e <_dtoa_r+0x86e>
 8010700:	f1bb 0f00 	cmp.w	fp, #0
 8010704:	f47f aeb7 	bne.w	8010476 <_dtoa_r+0x5a6>
 8010708:	4621      	mov	r1, r4
 801070a:	465b      	mov	r3, fp
 801070c:	2205      	movs	r2, #5
 801070e:	4648      	mov	r0, r9
 8010710:	f000 fddc 	bl	80112cc <__multadd>
 8010714:	4601      	mov	r1, r0
 8010716:	4604      	mov	r4, r0
 8010718:	9801      	ldr	r0, [sp, #4]
 801071a:	f000 ffef 	bl	80116fc <__mcmp>
 801071e:	2800      	cmp	r0, #0
 8010720:	f77f aea9 	ble.w	8010476 <_dtoa_r+0x5a6>
 8010724:	463e      	mov	r6, r7
 8010726:	2331      	movs	r3, #49	@ 0x31
 8010728:	f806 3b01 	strb.w	r3, [r6], #1
 801072c:	9b04      	ldr	r3, [sp, #16]
 801072e:	3301      	adds	r3, #1
 8010730:	9304      	str	r3, [sp, #16]
 8010732:	e6a4      	b.n	801047e <_dtoa_r+0x5ae>
 8010734:	f8cd 8010 	str.w	r8, [sp, #16]
 8010738:	4654      	mov	r4, sl
 801073a:	4625      	mov	r5, r4
 801073c:	e7f2      	b.n	8010724 <_dtoa_r+0x854>
 801073e:	9b08      	ldr	r3, [sp, #32]
 8010740:	2b00      	cmp	r3, #0
 8010742:	f000 8103 	beq.w	801094c <_dtoa_r+0xa7c>
 8010746:	2e00      	cmp	r6, #0
 8010748:	dd05      	ble.n	8010756 <_dtoa_r+0x886>
 801074a:	4629      	mov	r1, r5
 801074c:	4632      	mov	r2, r6
 801074e:	4648      	mov	r0, r9
 8010750:	f000 ff68 	bl	8011624 <__lshift>
 8010754:	4605      	mov	r5, r0
 8010756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010758:	2b00      	cmp	r3, #0
 801075a:	d058      	beq.n	801080e <_dtoa_r+0x93e>
 801075c:	6869      	ldr	r1, [r5, #4]
 801075e:	4648      	mov	r0, r9
 8010760:	f000 fd52 	bl	8011208 <_Balloc>
 8010764:	4606      	mov	r6, r0
 8010766:	b928      	cbnz	r0, 8010774 <_dtoa_r+0x8a4>
 8010768:	4b82      	ldr	r3, [pc, #520]	@ (8010974 <_dtoa_r+0xaa4>)
 801076a:	4602      	mov	r2, r0
 801076c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010770:	f7ff bbc7 	b.w	800ff02 <_dtoa_r+0x32>
 8010774:	692a      	ldr	r2, [r5, #16]
 8010776:	3202      	adds	r2, #2
 8010778:	0092      	lsls	r2, r2, #2
 801077a:	f105 010c 	add.w	r1, r5, #12
 801077e:	300c      	adds	r0, #12
 8010780:	f7ff fb0f 	bl	800fda2 <memcpy>
 8010784:	2201      	movs	r2, #1
 8010786:	4631      	mov	r1, r6
 8010788:	4648      	mov	r0, r9
 801078a:	f000 ff4b 	bl	8011624 <__lshift>
 801078e:	1c7b      	adds	r3, r7, #1
 8010790:	9305      	str	r3, [sp, #20]
 8010792:	eb07 030b 	add.w	r3, r7, fp
 8010796:	9309      	str	r3, [sp, #36]	@ 0x24
 8010798:	9b02      	ldr	r3, [sp, #8]
 801079a:	f003 0301 	and.w	r3, r3, #1
 801079e:	46a8      	mov	r8, r5
 80107a0:	9308      	str	r3, [sp, #32]
 80107a2:	4605      	mov	r5, r0
 80107a4:	9b05      	ldr	r3, [sp, #20]
 80107a6:	9801      	ldr	r0, [sp, #4]
 80107a8:	4621      	mov	r1, r4
 80107aa:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80107ae:	f7ff fb06 	bl	800fdbe <quorem>
 80107b2:	4641      	mov	r1, r8
 80107b4:	9002      	str	r0, [sp, #8]
 80107b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80107ba:	9801      	ldr	r0, [sp, #4]
 80107bc:	f000 ff9e 	bl	80116fc <__mcmp>
 80107c0:	462a      	mov	r2, r5
 80107c2:	9006      	str	r0, [sp, #24]
 80107c4:	4621      	mov	r1, r4
 80107c6:	4648      	mov	r0, r9
 80107c8:	f000 ffb4 	bl	8011734 <__mdiff>
 80107cc:	68c2      	ldr	r2, [r0, #12]
 80107ce:	4606      	mov	r6, r0
 80107d0:	b9fa      	cbnz	r2, 8010812 <_dtoa_r+0x942>
 80107d2:	4601      	mov	r1, r0
 80107d4:	9801      	ldr	r0, [sp, #4]
 80107d6:	f000 ff91 	bl	80116fc <__mcmp>
 80107da:	4602      	mov	r2, r0
 80107dc:	4631      	mov	r1, r6
 80107de:	4648      	mov	r0, r9
 80107e0:	920a      	str	r2, [sp, #40]	@ 0x28
 80107e2:	f000 fd51 	bl	8011288 <_Bfree>
 80107e6:	9b07      	ldr	r3, [sp, #28]
 80107e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80107ea:	9e05      	ldr	r6, [sp, #20]
 80107ec:	ea43 0102 	orr.w	r1, r3, r2
 80107f0:	9b08      	ldr	r3, [sp, #32]
 80107f2:	4319      	orrs	r1, r3
 80107f4:	d10f      	bne.n	8010816 <_dtoa_r+0x946>
 80107f6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80107fa:	d028      	beq.n	801084e <_dtoa_r+0x97e>
 80107fc:	9b06      	ldr	r3, [sp, #24]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	dd02      	ble.n	8010808 <_dtoa_r+0x938>
 8010802:	9b02      	ldr	r3, [sp, #8]
 8010804:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010808:	f88b a000 	strb.w	sl, [fp]
 801080c:	e639      	b.n	8010482 <_dtoa_r+0x5b2>
 801080e:	4628      	mov	r0, r5
 8010810:	e7bd      	b.n	801078e <_dtoa_r+0x8be>
 8010812:	2201      	movs	r2, #1
 8010814:	e7e2      	b.n	80107dc <_dtoa_r+0x90c>
 8010816:	9b06      	ldr	r3, [sp, #24]
 8010818:	2b00      	cmp	r3, #0
 801081a:	db04      	blt.n	8010826 <_dtoa_r+0x956>
 801081c:	9907      	ldr	r1, [sp, #28]
 801081e:	430b      	orrs	r3, r1
 8010820:	9908      	ldr	r1, [sp, #32]
 8010822:	430b      	orrs	r3, r1
 8010824:	d120      	bne.n	8010868 <_dtoa_r+0x998>
 8010826:	2a00      	cmp	r2, #0
 8010828:	ddee      	ble.n	8010808 <_dtoa_r+0x938>
 801082a:	9901      	ldr	r1, [sp, #4]
 801082c:	2201      	movs	r2, #1
 801082e:	4648      	mov	r0, r9
 8010830:	f000 fef8 	bl	8011624 <__lshift>
 8010834:	4621      	mov	r1, r4
 8010836:	9001      	str	r0, [sp, #4]
 8010838:	f000 ff60 	bl	80116fc <__mcmp>
 801083c:	2800      	cmp	r0, #0
 801083e:	dc03      	bgt.n	8010848 <_dtoa_r+0x978>
 8010840:	d1e2      	bne.n	8010808 <_dtoa_r+0x938>
 8010842:	f01a 0f01 	tst.w	sl, #1
 8010846:	d0df      	beq.n	8010808 <_dtoa_r+0x938>
 8010848:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801084c:	d1d9      	bne.n	8010802 <_dtoa_r+0x932>
 801084e:	2339      	movs	r3, #57	@ 0x39
 8010850:	f88b 3000 	strb.w	r3, [fp]
 8010854:	4633      	mov	r3, r6
 8010856:	461e      	mov	r6, r3
 8010858:	3b01      	subs	r3, #1
 801085a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801085e:	2a39      	cmp	r2, #57	@ 0x39
 8010860:	d053      	beq.n	801090a <_dtoa_r+0xa3a>
 8010862:	3201      	adds	r2, #1
 8010864:	701a      	strb	r2, [r3, #0]
 8010866:	e60c      	b.n	8010482 <_dtoa_r+0x5b2>
 8010868:	2a00      	cmp	r2, #0
 801086a:	dd07      	ble.n	801087c <_dtoa_r+0x9ac>
 801086c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010870:	d0ed      	beq.n	801084e <_dtoa_r+0x97e>
 8010872:	f10a 0301 	add.w	r3, sl, #1
 8010876:	f88b 3000 	strb.w	r3, [fp]
 801087a:	e602      	b.n	8010482 <_dtoa_r+0x5b2>
 801087c:	9b05      	ldr	r3, [sp, #20]
 801087e:	9a05      	ldr	r2, [sp, #20]
 8010880:	f803 ac01 	strb.w	sl, [r3, #-1]
 8010884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010886:	4293      	cmp	r3, r2
 8010888:	d029      	beq.n	80108de <_dtoa_r+0xa0e>
 801088a:	9901      	ldr	r1, [sp, #4]
 801088c:	2300      	movs	r3, #0
 801088e:	220a      	movs	r2, #10
 8010890:	4648      	mov	r0, r9
 8010892:	f000 fd1b 	bl	80112cc <__multadd>
 8010896:	45a8      	cmp	r8, r5
 8010898:	9001      	str	r0, [sp, #4]
 801089a:	f04f 0300 	mov.w	r3, #0
 801089e:	f04f 020a 	mov.w	r2, #10
 80108a2:	4641      	mov	r1, r8
 80108a4:	4648      	mov	r0, r9
 80108a6:	d107      	bne.n	80108b8 <_dtoa_r+0x9e8>
 80108a8:	f000 fd10 	bl	80112cc <__multadd>
 80108ac:	4680      	mov	r8, r0
 80108ae:	4605      	mov	r5, r0
 80108b0:	9b05      	ldr	r3, [sp, #20]
 80108b2:	3301      	adds	r3, #1
 80108b4:	9305      	str	r3, [sp, #20]
 80108b6:	e775      	b.n	80107a4 <_dtoa_r+0x8d4>
 80108b8:	f000 fd08 	bl	80112cc <__multadd>
 80108bc:	4629      	mov	r1, r5
 80108be:	4680      	mov	r8, r0
 80108c0:	2300      	movs	r3, #0
 80108c2:	220a      	movs	r2, #10
 80108c4:	4648      	mov	r0, r9
 80108c6:	f000 fd01 	bl	80112cc <__multadd>
 80108ca:	4605      	mov	r5, r0
 80108cc:	e7f0      	b.n	80108b0 <_dtoa_r+0x9e0>
 80108ce:	f1bb 0f00 	cmp.w	fp, #0
 80108d2:	bfcc      	ite	gt
 80108d4:	465e      	movgt	r6, fp
 80108d6:	2601      	movle	r6, #1
 80108d8:	443e      	add	r6, r7
 80108da:	f04f 0800 	mov.w	r8, #0
 80108de:	9901      	ldr	r1, [sp, #4]
 80108e0:	2201      	movs	r2, #1
 80108e2:	4648      	mov	r0, r9
 80108e4:	f000 fe9e 	bl	8011624 <__lshift>
 80108e8:	4621      	mov	r1, r4
 80108ea:	9001      	str	r0, [sp, #4]
 80108ec:	f000 ff06 	bl	80116fc <__mcmp>
 80108f0:	2800      	cmp	r0, #0
 80108f2:	dcaf      	bgt.n	8010854 <_dtoa_r+0x984>
 80108f4:	d102      	bne.n	80108fc <_dtoa_r+0xa2c>
 80108f6:	f01a 0f01 	tst.w	sl, #1
 80108fa:	d1ab      	bne.n	8010854 <_dtoa_r+0x984>
 80108fc:	4633      	mov	r3, r6
 80108fe:	461e      	mov	r6, r3
 8010900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010904:	2a30      	cmp	r2, #48	@ 0x30
 8010906:	d0fa      	beq.n	80108fe <_dtoa_r+0xa2e>
 8010908:	e5bb      	b.n	8010482 <_dtoa_r+0x5b2>
 801090a:	429f      	cmp	r7, r3
 801090c:	d1a3      	bne.n	8010856 <_dtoa_r+0x986>
 801090e:	9b04      	ldr	r3, [sp, #16]
 8010910:	3301      	adds	r3, #1
 8010912:	9304      	str	r3, [sp, #16]
 8010914:	2331      	movs	r3, #49	@ 0x31
 8010916:	703b      	strb	r3, [r7, #0]
 8010918:	e5b3      	b.n	8010482 <_dtoa_r+0x5b2>
 801091a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801091c:	4f16      	ldr	r7, [pc, #88]	@ (8010978 <_dtoa_r+0xaa8>)
 801091e:	b11b      	cbz	r3, 8010928 <_dtoa_r+0xa58>
 8010920:	f107 0308 	add.w	r3, r7, #8
 8010924:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010926:	6013      	str	r3, [r2, #0]
 8010928:	4638      	mov	r0, r7
 801092a:	b011      	add	sp, #68	@ 0x44
 801092c:	ecbd 8b02 	vpop	{d8}
 8010930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010934:	9b07      	ldr	r3, [sp, #28]
 8010936:	2b01      	cmp	r3, #1
 8010938:	f77f ae36 	ble.w	80105a8 <_dtoa_r+0x6d8>
 801093c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801093e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010940:	2001      	movs	r0, #1
 8010942:	e656      	b.n	80105f2 <_dtoa_r+0x722>
 8010944:	f1bb 0f00 	cmp.w	fp, #0
 8010948:	f77f aed7 	ble.w	80106fa <_dtoa_r+0x82a>
 801094c:	463e      	mov	r6, r7
 801094e:	9801      	ldr	r0, [sp, #4]
 8010950:	4621      	mov	r1, r4
 8010952:	f7ff fa34 	bl	800fdbe <quorem>
 8010956:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801095a:	f806 ab01 	strb.w	sl, [r6], #1
 801095e:	1bf2      	subs	r2, r6, r7
 8010960:	4593      	cmp	fp, r2
 8010962:	ddb4      	ble.n	80108ce <_dtoa_r+0x9fe>
 8010964:	9901      	ldr	r1, [sp, #4]
 8010966:	2300      	movs	r3, #0
 8010968:	220a      	movs	r2, #10
 801096a:	4648      	mov	r0, r9
 801096c:	f000 fcae 	bl	80112cc <__multadd>
 8010970:	9001      	str	r0, [sp, #4]
 8010972:	e7ec      	b.n	801094e <_dtoa_r+0xa7e>
 8010974:	08012ad8 	.word	0x08012ad8
 8010978:	08012a5c 	.word	0x08012a5c

0801097c <_free_r>:
 801097c:	b538      	push	{r3, r4, r5, lr}
 801097e:	4605      	mov	r5, r0
 8010980:	2900      	cmp	r1, #0
 8010982:	d041      	beq.n	8010a08 <_free_r+0x8c>
 8010984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010988:	1f0c      	subs	r4, r1, #4
 801098a:	2b00      	cmp	r3, #0
 801098c:	bfb8      	it	lt
 801098e:	18e4      	addlt	r4, r4, r3
 8010990:	f000 fc2e 	bl	80111f0 <__malloc_lock>
 8010994:	4a1d      	ldr	r2, [pc, #116]	@ (8010a0c <_free_r+0x90>)
 8010996:	6813      	ldr	r3, [r2, #0]
 8010998:	b933      	cbnz	r3, 80109a8 <_free_r+0x2c>
 801099a:	6063      	str	r3, [r4, #4]
 801099c:	6014      	str	r4, [r2, #0]
 801099e:	4628      	mov	r0, r5
 80109a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109a4:	f000 bc2a 	b.w	80111fc <__malloc_unlock>
 80109a8:	42a3      	cmp	r3, r4
 80109aa:	d908      	bls.n	80109be <_free_r+0x42>
 80109ac:	6820      	ldr	r0, [r4, #0]
 80109ae:	1821      	adds	r1, r4, r0
 80109b0:	428b      	cmp	r3, r1
 80109b2:	bf01      	itttt	eq
 80109b4:	6819      	ldreq	r1, [r3, #0]
 80109b6:	685b      	ldreq	r3, [r3, #4]
 80109b8:	1809      	addeq	r1, r1, r0
 80109ba:	6021      	streq	r1, [r4, #0]
 80109bc:	e7ed      	b.n	801099a <_free_r+0x1e>
 80109be:	461a      	mov	r2, r3
 80109c0:	685b      	ldr	r3, [r3, #4]
 80109c2:	b10b      	cbz	r3, 80109c8 <_free_r+0x4c>
 80109c4:	42a3      	cmp	r3, r4
 80109c6:	d9fa      	bls.n	80109be <_free_r+0x42>
 80109c8:	6811      	ldr	r1, [r2, #0]
 80109ca:	1850      	adds	r0, r2, r1
 80109cc:	42a0      	cmp	r0, r4
 80109ce:	d10b      	bne.n	80109e8 <_free_r+0x6c>
 80109d0:	6820      	ldr	r0, [r4, #0]
 80109d2:	4401      	add	r1, r0
 80109d4:	1850      	adds	r0, r2, r1
 80109d6:	4283      	cmp	r3, r0
 80109d8:	6011      	str	r1, [r2, #0]
 80109da:	d1e0      	bne.n	801099e <_free_r+0x22>
 80109dc:	6818      	ldr	r0, [r3, #0]
 80109de:	685b      	ldr	r3, [r3, #4]
 80109e0:	6053      	str	r3, [r2, #4]
 80109e2:	4408      	add	r0, r1
 80109e4:	6010      	str	r0, [r2, #0]
 80109e6:	e7da      	b.n	801099e <_free_r+0x22>
 80109e8:	d902      	bls.n	80109f0 <_free_r+0x74>
 80109ea:	230c      	movs	r3, #12
 80109ec:	602b      	str	r3, [r5, #0]
 80109ee:	e7d6      	b.n	801099e <_free_r+0x22>
 80109f0:	6820      	ldr	r0, [r4, #0]
 80109f2:	1821      	adds	r1, r4, r0
 80109f4:	428b      	cmp	r3, r1
 80109f6:	bf04      	itt	eq
 80109f8:	6819      	ldreq	r1, [r3, #0]
 80109fa:	685b      	ldreq	r3, [r3, #4]
 80109fc:	6063      	str	r3, [r4, #4]
 80109fe:	bf04      	itt	eq
 8010a00:	1809      	addeq	r1, r1, r0
 8010a02:	6021      	streq	r1, [r4, #0]
 8010a04:	6054      	str	r4, [r2, #4]
 8010a06:	e7ca      	b.n	801099e <_free_r+0x22>
 8010a08:	bd38      	pop	{r3, r4, r5, pc}
 8010a0a:	bf00      	nop
 8010a0c:	200078e4 	.word	0x200078e4

08010a10 <__ssputs_r>:
 8010a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a14:	688e      	ldr	r6, [r1, #8]
 8010a16:	461f      	mov	r7, r3
 8010a18:	42be      	cmp	r6, r7
 8010a1a:	680b      	ldr	r3, [r1, #0]
 8010a1c:	4682      	mov	sl, r0
 8010a1e:	460c      	mov	r4, r1
 8010a20:	4690      	mov	r8, r2
 8010a22:	d82d      	bhi.n	8010a80 <__ssputs_r+0x70>
 8010a24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010a28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010a2c:	d026      	beq.n	8010a7c <__ssputs_r+0x6c>
 8010a2e:	6965      	ldr	r5, [r4, #20]
 8010a30:	6909      	ldr	r1, [r1, #16]
 8010a32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a36:	eba3 0901 	sub.w	r9, r3, r1
 8010a3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a3e:	1c7b      	adds	r3, r7, #1
 8010a40:	444b      	add	r3, r9
 8010a42:	106d      	asrs	r5, r5, #1
 8010a44:	429d      	cmp	r5, r3
 8010a46:	bf38      	it	cc
 8010a48:	461d      	movcc	r5, r3
 8010a4a:	0553      	lsls	r3, r2, #21
 8010a4c:	d527      	bpl.n	8010a9e <__ssputs_r+0x8e>
 8010a4e:	4629      	mov	r1, r5
 8010a50:	f000 faa2 	bl	8010f98 <_malloc_r>
 8010a54:	4606      	mov	r6, r0
 8010a56:	b360      	cbz	r0, 8010ab2 <__ssputs_r+0xa2>
 8010a58:	6921      	ldr	r1, [r4, #16]
 8010a5a:	464a      	mov	r2, r9
 8010a5c:	f7ff f9a1 	bl	800fda2 <memcpy>
 8010a60:	89a3      	ldrh	r3, [r4, #12]
 8010a62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a6a:	81a3      	strh	r3, [r4, #12]
 8010a6c:	6126      	str	r6, [r4, #16]
 8010a6e:	6165      	str	r5, [r4, #20]
 8010a70:	444e      	add	r6, r9
 8010a72:	eba5 0509 	sub.w	r5, r5, r9
 8010a76:	6026      	str	r6, [r4, #0]
 8010a78:	60a5      	str	r5, [r4, #8]
 8010a7a:	463e      	mov	r6, r7
 8010a7c:	42be      	cmp	r6, r7
 8010a7e:	d900      	bls.n	8010a82 <__ssputs_r+0x72>
 8010a80:	463e      	mov	r6, r7
 8010a82:	6820      	ldr	r0, [r4, #0]
 8010a84:	4632      	mov	r2, r6
 8010a86:	4641      	mov	r1, r8
 8010a88:	f001 f8a8 	bl	8011bdc <memmove>
 8010a8c:	68a3      	ldr	r3, [r4, #8]
 8010a8e:	1b9b      	subs	r3, r3, r6
 8010a90:	60a3      	str	r3, [r4, #8]
 8010a92:	6823      	ldr	r3, [r4, #0]
 8010a94:	4433      	add	r3, r6
 8010a96:	6023      	str	r3, [r4, #0]
 8010a98:	2000      	movs	r0, #0
 8010a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a9e:	462a      	mov	r2, r5
 8010aa0:	f000 ff77 	bl	8011992 <_realloc_r>
 8010aa4:	4606      	mov	r6, r0
 8010aa6:	2800      	cmp	r0, #0
 8010aa8:	d1e0      	bne.n	8010a6c <__ssputs_r+0x5c>
 8010aaa:	6921      	ldr	r1, [r4, #16]
 8010aac:	4650      	mov	r0, sl
 8010aae:	f7ff ff65 	bl	801097c <_free_r>
 8010ab2:	230c      	movs	r3, #12
 8010ab4:	f8ca 3000 	str.w	r3, [sl]
 8010ab8:	89a3      	ldrh	r3, [r4, #12]
 8010aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010abe:	81a3      	strh	r3, [r4, #12]
 8010ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010ac4:	e7e9      	b.n	8010a9a <__ssputs_r+0x8a>
	...

08010ac8 <_svfiprintf_r>:
 8010ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010acc:	4698      	mov	r8, r3
 8010ace:	898b      	ldrh	r3, [r1, #12]
 8010ad0:	061b      	lsls	r3, r3, #24
 8010ad2:	b09d      	sub	sp, #116	@ 0x74
 8010ad4:	4607      	mov	r7, r0
 8010ad6:	460d      	mov	r5, r1
 8010ad8:	4614      	mov	r4, r2
 8010ada:	d510      	bpl.n	8010afe <_svfiprintf_r+0x36>
 8010adc:	690b      	ldr	r3, [r1, #16]
 8010ade:	b973      	cbnz	r3, 8010afe <_svfiprintf_r+0x36>
 8010ae0:	2140      	movs	r1, #64	@ 0x40
 8010ae2:	f000 fa59 	bl	8010f98 <_malloc_r>
 8010ae6:	6028      	str	r0, [r5, #0]
 8010ae8:	6128      	str	r0, [r5, #16]
 8010aea:	b930      	cbnz	r0, 8010afa <_svfiprintf_r+0x32>
 8010aec:	230c      	movs	r3, #12
 8010aee:	603b      	str	r3, [r7, #0]
 8010af0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010af4:	b01d      	add	sp, #116	@ 0x74
 8010af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010afa:	2340      	movs	r3, #64	@ 0x40
 8010afc:	616b      	str	r3, [r5, #20]
 8010afe:	2300      	movs	r3, #0
 8010b00:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b02:	2320      	movs	r3, #32
 8010b04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010b08:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b0c:	2330      	movs	r3, #48	@ 0x30
 8010b0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010cac <_svfiprintf_r+0x1e4>
 8010b12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010b16:	f04f 0901 	mov.w	r9, #1
 8010b1a:	4623      	mov	r3, r4
 8010b1c:	469a      	mov	sl, r3
 8010b1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b22:	b10a      	cbz	r2, 8010b28 <_svfiprintf_r+0x60>
 8010b24:	2a25      	cmp	r2, #37	@ 0x25
 8010b26:	d1f9      	bne.n	8010b1c <_svfiprintf_r+0x54>
 8010b28:	ebba 0b04 	subs.w	fp, sl, r4
 8010b2c:	d00b      	beq.n	8010b46 <_svfiprintf_r+0x7e>
 8010b2e:	465b      	mov	r3, fp
 8010b30:	4622      	mov	r2, r4
 8010b32:	4629      	mov	r1, r5
 8010b34:	4638      	mov	r0, r7
 8010b36:	f7ff ff6b 	bl	8010a10 <__ssputs_r>
 8010b3a:	3001      	adds	r0, #1
 8010b3c:	f000 80a7 	beq.w	8010c8e <_svfiprintf_r+0x1c6>
 8010b40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b42:	445a      	add	r2, fp
 8010b44:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b46:	f89a 3000 	ldrb.w	r3, [sl]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	f000 809f 	beq.w	8010c8e <_svfiprintf_r+0x1c6>
 8010b50:	2300      	movs	r3, #0
 8010b52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010b56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b5a:	f10a 0a01 	add.w	sl, sl, #1
 8010b5e:	9304      	str	r3, [sp, #16]
 8010b60:	9307      	str	r3, [sp, #28]
 8010b62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b66:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b68:	4654      	mov	r4, sl
 8010b6a:	2205      	movs	r2, #5
 8010b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b70:	484e      	ldr	r0, [pc, #312]	@ (8010cac <_svfiprintf_r+0x1e4>)
 8010b72:	f7ef fb65 	bl	8000240 <memchr>
 8010b76:	9a04      	ldr	r2, [sp, #16]
 8010b78:	b9d8      	cbnz	r0, 8010bb2 <_svfiprintf_r+0xea>
 8010b7a:	06d0      	lsls	r0, r2, #27
 8010b7c:	bf44      	itt	mi
 8010b7e:	2320      	movmi	r3, #32
 8010b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b84:	0711      	lsls	r1, r2, #28
 8010b86:	bf44      	itt	mi
 8010b88:	232b      	movmi	r3, #43	@ 0x2b
 8010b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8010b92:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b94:	d015      	beq.n	8010bc2 <_svfiprintf_r+0xfa>
 8010b96:	9a07      	ldr	r2, [sp, #28]
 8010b98:	4654      	mov	r4, sl
 8010b9a:	2000      	movs	r0, #0
 8010b9c:	f04f 0c0a 	mov.w	ip, #10
 8010ba0:	4621      	mov	r1, r4
 8010ba2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ba6:	3b30      	subs	r3, #48	@ 0x30
 8010ba8:	2b09      	cmp	r3, #9
 8010baa:	d94b      	bls.n	8010c44 <_svfiprintf_r+0x17c>
 8010bac:	b1b0      	cbz	r0, 8010bdc <_svfiprintf_r+0x114>
 8010bae:	9207      	str	r2, [sp, #28]
 8010bb0:	e014      	b.n	8010bdc <_svfiprintf_r+0x114>
 8010bb2:	eba0 0308 	sub.w	r3, r0, r8
 8010bb6:	fa09 f303 	lsl.w	r3, r9, r3
 8010bba:	4313      	orrs	r3, r2
 8010bbc:	9304      	str	r3, [sp, #16]
 8010bbe:	46a2      	mov	sl, r4
 8010bc0:	e7d2      	b.n	8010b68 <_svfiprintf_r+0xa0>
 8010bc2:	9b03      	ldr	r3, [sp, #12]
 8010bc4:	1d19      	adds	r1, r3, #4
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	9103      	str	r1, [sp, #12]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	bfbb      	ittet	lt
 8010bce:	425b      	neglt	r3, r3
 8010bd0:	f042 0202 	orrlt.w	r2, r2, #2
 8010bd4:	9307      	strge	r3, [sp, #28]
 8010bd6:	9307      	strlt	r3, [sp, #28]
 8010bd8:	bfb8      	it	lt
 8010bda:	9204      	strlt	r2, [sp, #16]
 8010bdc:	7823      	ldrb	r3, [r4, #0]
 8010bde:	2b2e      	cmp	r3, #46	@ 0x2e
 8010be0:	d10a      	bne.n	8010bf8 <_svfiprintf_r+0x130>
 8010be2:	7863      	ldrb	r3, [r4, #1]
 8010be4:	2b2a      	cmp	r3, #42	@ 0x2a
 8010be6:	d132      	bne.n	8010c4e <_svfiprintf_r+0x186>
 8010be8:	9b03      	ldr	r3, [sp, #12]
 8010bea:	1d1a      	adds	r2, r3, #4
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	9203      	str	r2, [sp, #12]
 8010bf0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010bf4:	3402      	adds	r4, #2
 8010bf6:	9305      	str	r3, [sp, #20]
 8010bf8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010cbc <_svfiprintf_r+0x1f4>
 8010bfc:	7821      	ldrb	r1, [r4, #0]
 8010bfe:	2203      	movs	r2, #3
 8010c00:	4650      	mov	r0, sl
 8010c02:	f7ef fb1d 	bl	8000240 <memchr>
 8010c06:	b138      	cbz	r0, 8010c18 <_svfiprintf_r+0x150>
 8010c08:	9b04      	ldr	r3, [sp, #16]
 8010c0a:	eba0 000a 	sub.w	r0, r0, sl
 8010c0e:	2240      	movs	r2, #64	@ 0x40
 8010c10:	4082      	lsls	r2, r0
 8010c12:	4313      	orrs	r3, r2
 8010c14:	3401      	adds	r4, #1
 8010c16:	9304      	str	r3, [sp, #16]
 8010c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c1c:	4824      	ldr	r0, [pc, #144]	@ (8010cb0 <_svfiprintf_r+0x1e8>)
 8010c1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010c22:	2206      	movs	r2, #6
 8010c24:	f7ef fb0c 	bl	8000240 <memchr>
 8010c28:	2800      	cmp	r0, #0
 8010c2a:	d036      	beq.n	8010c9a <_svfiprintf_r+0x1d2>
 8010c2c:	4b21      	ldr	r3, [pc, #132]	@ (8010cb4 <_svfiprintf_r+0x1ec>)
 8010c2e:	bb1b      	cbnz	r3, 8010c78 <_svfiprintf_r+0x1b0>
 8010c30:	9b03      	ldr	r3, [sp, #12]
 8010c32:	3307      	adds	r3, #7
 8010c34:	f023 0307 	bic.w	r3, r3, #7
 8010c38:	3308      	adds	r3, #8
 8010c3a:	9303      	str	r3, [sp, #12]
 8010c3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c3e:	4433      	add	r3, r6
 8010c40:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c42:	e76a      	b.n	8010b1a <_svfiprintf_r+0x52>
 8010c44:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c48:	460c      	mov	r4, r1
 8010c4a:	2001      	movs	r0, #1
 8010c4c:	e7a8      	b.n	8010ba0 <_svfiprintf_r+0xd8>
 8010c4e:	2300      	movs	r3, #0
 8010c50:	3401      	adds	r4, #1
 8010c52:	9305      	str	r3, [sp, #20]
 8010c54:	4619      	mov	r1, r3
 8010c56:	f04f 0c0a 	mov.w	ip, #10
 8010c5a:	4620      	mov	r0, r4
 8010c5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c60:	3a30      	subs	r2, #48	@ 0x30
 8010c62:	2a09      	cmp	r2, #9
 8010c64:	d903      	bls.n	8010c6e <_svfiprintf_r+0x1a6>
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d0c6      	beq.n	8010bf8 <_svfiprintf_r+0x130>
 8010c6a:	9105      	str	r1, [sp, #20]
 8010c6c:	e7c4      	b.n	8010bf8 <_svfiprintf_r+0x130>
 8010c6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c72:	4604      	mov	r4, r0
 8010c74:	2301      	movs	r3, #1
 8010c76:	e7f0      	b.n	8010c5a <_svfiprintf_r+0x192>
 8010c78:	ab03      	add	r3, sp, #12
 8010c7a:	9300      	str	r3, [sp, #0]
 8010c7c:	462a      	mov	r2, r5
 8010c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8010cb8 <_svfiprintf_r+0x1f0>)
 8010c80:	a904      	add	r1, sp, #16
 8010c82:	4638      	mov	r0, r7
 8010c84:	f7fe faf0 	bl	800f268 <_printf_float>
 8010c88:	1c42      	adds	r2, r0, #1
 8010c8a:	4606      	mov	r6, r0
 8010c8c:	d1d6      	bne.n	8010c3c <_svfiprintf_r+0x174>
 8010c8e:	89ab      	ldrh	r3, [r5, #12]
 8010c90:	065b      	lsls	r3, r3, #25
 8010c92:	f53f af2d 	bmi.w	8010af0 <_svfiprintf_r+0x28>
 8010c96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c98:	e72c      	b.n	8010af4 <_svfiprintf_r+0x2c>
 8010c9a:	ab03      	add	r3, sp, #12
 8010c9c:	9300      	str	r3, [sp, #0]
 8010c9e:	462a      	mov	r2, r5
 8010ca0:	4b05      	ldr	r3, [pc, #20]	@ (8010cb8 <_svfiprintf_r+0x1f0>)
 8010ca2:	a904      	add	r1, sp, #16
 8010ca4:	4638      	mov	r0, r7
 8010ca6:	f7fe fd67 	bl	800f778 <_printf_i>
 8010caa:	e7ed      	b.n	8010c88 <_svfiprintf_r+0x1c0>
 8010cac:	08012ae9 	.word	0x08012ae9
 8010cb0:	08012af3 	.word	0x08012af3
 8010cb4:	0800f269 	.word	0x0800f269
 8010cb8:	08010a11 	.word	0x08010a11
 8010cbc:	08012aef 	.word	0x08012aef

08010cc0 <__sfputc_r>:
 8010cc0:	6893      	ldr	r3, [r2, #8]
 8010cc2:	3b01      	subs	r3, #1
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	b410      	push	{r4}
 8010cc8:	6093      	str	r3, [r2, #8]
 8010cca:	da08      	bge.n	8010cde <__sfputc_r+0x1e>
 8010ccc:	6994      	ldr	r4, [r2, #24]
 8010cce:	42a3      	cmp	r3, r4
 8010cd0:	db01      	blt.n	8010cd6 <__sfputc_r+0x16>
 8010cd2:	290a      	cmp	r1, #10
 8010cd4:	d103      	bne.n	8010cde <__sfputc_r+0x1e>
 8010cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cda:	f000 be88 	b.w	80119ee <__swbuf_r>
 8010cde:	6813      	ldr	r3, [r2, #0]
 8010ce0:	1c58      	adds	r0, r3, #1
 8010ce2:	6010      	str	r0, [r2, #0]
 8010ce4:	7019      	strb	r1, [r3, #0]
 8010ce6:	4608      	mov	r0, r1
 8010ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cec:	4770      	bx	lr

08010cee <__sfputs_r>:
 8010cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cf0:	4606      	mov	r6, r0
 8010cf2:	460f      	mov	r7, r1
 8010cf4:	4614      	mov	r4, r2
 8010cf6:	18d5      	adds	r5, r2, r3
 8010cf8:	42ac      	cmp	r4, r5
 8010cfa:	d101      	bne.n	8010d00 <__sfputs_r+0x12>
 8010cfc:	2000      	movs	r0, #0
 8010cfe:	e007      	b.n	8010d10 <__sfputs_r+0x22>
 8010d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d04:	463a      	mov	r2, r7
 8010d06:	4630      	mov	r0, r6
 8010d08:	f7ff ffda 	bl	8010cc0 <__sfputc_r>
 8010d0c:	1c43      	adds	r3, r0, #1
 8010d0e:	d1f3      	bne.n	8010cf8 <__sfputs_r+0xa>
 8010d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010d14 <_vfiprintf_r>:
 8010d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d18:	460d      	mov	r5, r1
 8010d1a:	b09d      	sub	sp, #116	@ 0x74
 8010d1c:	4614      	mov	r4, r2
 8010d1e:	4698      	mov	r8, r3
 8010d20:	4606      	mov	r6, r0
 8010d22:	b118      	cbz	r0, 8010d2c <_vfiprintf_r+0x18>
 8010d24:	6a03      	ldr	r3, [r0, #32]
 8010d26:	b90b      	cbnz	r3, 8010d2c <_vfiprintf_r+0x18>
 8010d28:	f7fe ff06 	bl	800fb38 <__sinit>
 8010d2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d2e:	07d9      	lsls	r1, r3, #31
 8010d30:	d405      	bmi.n	8010d3e <_vfiprintf_r+0x2a>
 8010d32:	89ab      	ldrh	r3, [r5, #12]
 8010d34:	059a      	lsls	r2, r3, #22
 8010d36:	d402      	bmi.n	8010d3e <_vfiprintf_r+0x2a>
 8010d38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d3a:	f7ff f830 	bl	800fd9e <__retarget_lock_acquire_recursive>
 8010d3e:	89ab      	ldrh	r3, [r5, #12]
 8010d40:	071b      	lsls	r3, r3, #28
 8010d42:	d501      	bpl.n	8010d48 <_vfiprintf_r+0x34>
 8010d44:	692b      	ldr	r3, [r5, #16]
 8010d46:	b99b      	cbnz	r3, 8010d70 <_vfiprintf_r+0x5c>
 8010d48:	4629      	mov	r1, r5
 8010d4a:	4630      	mov	r0, r6
 8010d4c:	f000 fe8e 	bl	8011a6c <__swsetup_r>
 8010d50:	b170      	cbz	r0, 8010d70 <_vfiprintf_r+0x5c>
 8010d52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d54:	07dc      	lsls	r4, r3, #31
 8010d56:	d504      	bpl.n	8010d62 <_vfiprintf_r+0x4e>
 8010d58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010d5c:	b01d      	add	sp, #116	@ 0x74
 8010d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d62:	89ab      	ldrh	r3, [r5, #12]
 8010d64:	0598      	lsls	r0, r3, #22
 8010d66:	d4f7      	bmi.n	8010d58 <_vfiprintf_r+0x44>
 8010d68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d6a:	f7ff f819 	bl	800fda0 <__retarget_lock_release_recursive>
 8010d6e:	e7f3      	b.n	8010d58 <_vfiprintf_r+0x44>
 8010d70:	2300      	movs	r3, #0
 8010d72:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d74:	2320      	movs	r3, #32
 8010d76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010d7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d7e:	2330      	movs	r3, #48	@ 0x30
 8010d80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010f30 <_vfiprintf_r+0x21c>
 8010d84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010d88:	f04f 0901 	mov.w	r9, #1
 8010d8c:	4623      	mov	r3, r4
 8010d8e:	469a      	mov	sl, r3
 8010d90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d94:	b10a      	cbz	r2, 8010d9a <_vfiprintf_r+0x86>
 8010d96:	2a25      	cmp	r2, #37	@ 0x25
 8010d98:	d1f9      	bne.n	8010d8e <_vfiprintf_r+0x7a>
 8010d9a:	ebba 0b04 	subs.w	fp, sl, r4
 8010d9e:	d00b      	beq.n	8010db8 <_vfiprintf_r+0xa4>
 8010da0:	465b      	mov	r3, fp
 8010da2:	4622      	mov	r2, r4
 8010da4:	4629      	mov	r1, r5
 8010da6:	4630      	mov	r0, r6
 8010da8:	f7ff ffa1 	bl	8010cee <__sfputs_r>
 8010dac:	3001      	adds	r0, #1
 8010dae:	f000 80a7 	beq.w	8010f00 <_vfiprintf_r+0x1ec>
 8010db2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010db4:	445a      	add	r2, fp
 8010db6:	9209      	str	r2, [sp, #36]	@ 0x24
 8010db8:	f89a 3000 	ldrb.w	r3, [sl]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	f000 809f 	beq.w	8010f00 <_vfiprintf_r+0x1ec>
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010dc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dcc:	f10a 0a01 	add.w	sl, sl, #1
 8010dd0:	9304      	str	r3, [sp, #16]
 8010dd2:	9307      	str	r3, [sp, #28]
 8010dd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010dd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8010dda:	4654      	mov	r4, sl
 8010ddc:	2205      	movs	r2, #5
 8010dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010de2:	4853      	ldr	r0, [pc, #332]	@ (8010f30 <_vfiprintf_r+0x21c>)
 8010de4:	f7ef fa2c 	bl	8000240 <memchr>
 8010de8:	9a04      	ldr	r2, [sp, #16]
 8010dea:	b9d8      	cbnz	r0, 8010e24 <_vfiprintf_r+0x110>
 8010dec:	06d1      	lsls	r1, r2, #27
 8010dee:	bf44      	itt	mi
 8010df0:	2320      	movmi	r3, #32
 8010df2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010df6:	0713      	lsls	r3, r2, #28
 8010df8:	bf44      	itt	mi
 8010dfa:	232b      	movmi	r3, #43	@ 0x2b
 8010dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e00:	f89a 3000 	ldrb.w	r3, [sl]
 8010e04:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e06:	d015      	beq.n	8010e34 <_vfiprintf_r+0x120>
 8010e08:	9a07      	ldr	r2, [sp, #28]
 8010e0a:	4654      	mov	r4, sl
 8010e0c:	2000      	movs	r0, #0
 8010e0e:	f04f 0c0a 	mov.w	ip, #10
 8010e12:	4621      	mov	r1, r4
 8010e14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e18:	3b30      	subs	r3, #48	@ 0x30
 8010e1a:	2b09      	cmp	r3, #9
 8010e1c:	d94b      	bls.n	8010eb6 <_vfiprintf_r+0x1a2>
 8010e1e:	b1b0      	cbz	r0, 8010e4e <_vfiprintf_r+0x13a>
 8010e20:	9207      	str	r2, [sp, #28]
 8010e22:	e014      	b.n	8010e4e <_vfiprintf_r+0x13a>
 8010e24:	eba0 0308 	sub.w	r3, r0, r8
 8010e28:	fa09 f303 	lsl.w	r3, r9, r3
 8010e2c:	4313      	orrs	r3, r2
 8010e2e:	9304      	str	r3, [sp, #16]
 8010e30:	46a2      	mov	sl, r4
 8010e32:	e7d2      	b.n	8010dda <_vfiprintf_r+0xc6>
 8010e34:	9b03      	ldr	r3, [sp, #12]
 8010e36:	1d19      	adds	r1, r3, #4
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	9103      	str	r1, [sp, #12]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	bfbb      	ittet	lt
 8010e40:	425b      	neglt	r3, r3
 8010e42:	f042 0202 	orrlt.w	r2, r2, #2
 8010e46:	9307      	strge	r3, [sp, #28]
 8010e48:	9307      	strlt	r3, [sp, #28]
 8010e4a:	bfb8      	it	lt
 8010e4c:	9204      	strlt	r2, [sp, #16]
 8010e4e:	7823      	ldrb	r3, [r4, #0]
 8010e50:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e52:	d10a      	bne.n	8010e6a <_vfiprintf_r+0x156>
 8010e54:	7863      	ldrb	r3, [r4, #1]
 8010e56:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e58:	d132      	bne.n	8010ec0 <_vfiprintf_r+0x1ac>
 8010e5a:	9b03      	ldr	r3, [sp, #12]
 8010e5c:	1d1a      	adds	r2, r3, #4
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	9203      	str	r2, [sp, #12]
 8010e62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010e66:	3402      	adds	r4, #2
 8010e68:	9305      	str	r3, [sp, #20]
 8010e6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010f40 <_vfiprintf_r+0x22c>
 8010e6e:	7821      	ldrb	r1, [r4, #0]
 8010e70:	2203      	movs	r2, #3
 8010e72:	4650      	mov	r0, sl
 8010e74:	f7ef f9e4 	bl	8000240 <memchr>
 8010e78:	b138      	cbz	r0, 8010e8a <_vfiprintf_r+0x176>
 8010e7a:	9b04      	ldr	r3, [sp, #16]
 8010e7c:	eba0 000a 	sub.w	r0, r0, sl
 8010e80:	2240      	movs	r2, #64	@ 0x40
 8010e82:	4082      	lsls	r2, r0
 8010e84:	4313      	orrs	r3, r2
 8010e86:	3401      	adds	r4, #1
 8010e88:	9304      	str	r3, [sp, #16]
 8010e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e8e:	4829      	ldr	r0, [pc, #164]	@ (8010f34 <_vfiprintf_r+0x220>)
 8010e90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e94:	2206      	movs	r2, #6
 8010e96:	f7ef f9d3 	bl	8000240 <memchr>
 8010e9a:	2800      	cmp	r0, #0
 8010e9c:	d03f      	beq.n	8010f1e <_vfiprintf_r+0x20a>
 8010e9e:	4b26      	ldr	r3, [pc, #152]	@ (8010f38 <_vfiprintf_r+0x224>)
 8010ea0:	bb1b      	cbnz	r3, 8010eea <_vfiprintf_r+0x1d6>
 8010ea2:	9b03      	ldr	r3, [sp, #12]
 8010ea4:	3307      	adds	r3, #7
 8010ea6:	f023 0307 	bic.w	r3, r3, #7
 8010eaa:	3308      	adds	r3, #8
 8010eac:	9303      	str	r3, [sp, #12]
 8010eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010eb0:	443b      	add	r3, r7
 8010eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8010eb4:	e76a      	b.n	8010d8c <_vfiprintf_r+0x78>
 8010eb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8010eba:	460c      	mov	r4, r1
 8010ebc:	2001      	movs	r0, #1
 8010ebe:	e7a8      	b.n	8010e12 <_vfiprintf_r+0xfe>
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	3401      	adds	r4, #1
 8010ec4:	9305      	str	r3, [sp, #20]
 8010ec6:	4619      	mov	r1, r3
 8010ec8:	f04f 0c0a 	mov.w	ip, #10
 8010ecc:	4620      	mov	r0, r4
 8010ece:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ed2:	3a30      	subs	r2, #48	@ 0x30
 8010ed4:	2a09      	cmp	r2, #9
 8010ed6:	d903      	bls.n	8010ee0 <_vfiprintf_r+0x1cc>
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d0c6      	beq.n	8010e6a <_vfiprintf_r+0x156>
 8010edc:	9105      	str	r1, [sp, #20]
 8010ede:	e7c4      	b.n	8010e6a <_vfiprintf_r+0x156>
 8010ee0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ee4:	4604      	mov	r4, r0
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	e7f0      	b.n	8010ecc <_vfiprintf_r+0x1b8>
 8010eea:	ab03      	add	r3, sp, #12
 8010eec:	9300      	str	r3, [sp, #0]
 8010eee:	462a      	mov	r2, r5
 8010ef0:	4b12      	ldr	r3, [pc, #72]	@ (8010f3c <_vfiprintf_r+0x228>)
 8010ef2:	a904      	add	r1, sp, #16
 8010ef4:	4630      	mov	r0, r6
 8010ef6:	f7fe f9b7 	bl	800f268 <_printf_float>
 8010efa:	4607      	mov	r7, r0
 8010efc:	1c78      	adds	r0, r7, #1
 8010efe:	d1d6      	bne.n	8010eae <_vfiprintf_r+0x19a>
 8010f00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f02:	07d9      	lsls	r1, r3, #31
 8010f04:	d405      	bmi.n	8010f12 <_vfiprintf_r+0x1fe>
 8010f06:	89ab      	ldrh	r3, [r5, #12]
 8010f08:	059a      	lsls	r2, r3, #22
 8010f0a:	d402      	bmi.n	8010f12 <_vfiprintf_r+0x1fe>
 8010f0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f0e:	f7fe ff47 	bl	800fda0 <__retarget_lock_release_recursive>
 8010f12:	89ab      	ldrh	r3, [r5, #12]
 8010f14:	065b      	lsls	r3, r3, #25
 8010f16:	f53f af1f 	bmi.w	8010d58 <_vfiprintf_r+0x44>
 8010f1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010f1c:	e71e      	b.n	8010d5c <_vfiprintf_r+0x48>
 8010f1e:	ab03      	add	r3, sp, #12
 8010f20:	9300      	str	r3, [sp, #0]
 8010f22:	462a      	mov	r2, r5
 8010f24:	4b05      	ldr	r3, [pc, #20]	@ (8010f3c <_vfiprintf_r+0x228>)
 8010f26:	a904      	add	r1, sp, #16
 8010f28:	4630      	mov	r0, r6
 8010f2a:	f7fe fc25 	bl	800f778 <_printf_i>
 8010f2e:	e7e4      	b.n	8010efa <_vfiprintf_r+0x1e6>
 8010f30:	08012ae9 	.word	0x08012ae9
 8010f34:	08012af3 	.word	0x08012af3
 8010f38:	0800f269 	.word	0x0800f269
 8010f3c:	08010cef 	.word	0x08010cef
 8010f40:	08012aef 	.word	0x08012aef

08010f44 <malloc>:
 8010f44:	4b02      	ldr	r3, [pc, #8]	@ (8010f50 <malloc+0xc>)
 8010f46:	4601      	mov	r1, r0
 8010f48:	6818      	ldr	r0, [r3, #0]
 8010f4a:	f000 b825 	b.w	8010f98 <_malloc_r>
 8010f4e:	bf00      	nop
 8010f50:	20000034 	.word	0x20000034

08010f54 <sbrk_aligned>:
 8010f54:	b570      	push	{r4, r5, r6, lr}
 8010f56:	4e0f      	ldr	r6, [pc, #60]	@ (8010f94 <sbrk_aligned+0x40>)
 8010f58:	460c      	mov	r4, r1
 8010f5a:	6831      	ldr	r1, [r6, #0]
 8010f5c:	4605      	mov	r5, r0
 8010f5e:	b911      	cbnz	r1, 8010f66 <sbrk_aligned+0x12>
 8010f60:	f000 feac 	bl	8011cbc <_sbrk_r>
 8010f64:	6030      	str	r0, [r6, #0]
 8010f66:	4621      	mov	r1, r4
 8010f68:	4628      	mov	r0, r5
 8010f6a:	f000 fea7 	bl	8011cbc <_sbrk_r>
 8010f6e:	1c43      	adds	r3, r0, #1
 8010f70:	d103      	bne.n	8010f7a <sbrk_aligned+0x26>
 8010f72:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010f76:	4620      	mov	r0, r4
 8010f78:	bd70      	pop	{r4, r5, r6, pc}
 8010f7a:	1cc4      	adds	r4, r0, #3
 8010f7c:	f024 0403 	bic.w	r4, r4, #3
 8010f80:	42a0      	cmp	r0, r4
 8010f82:	d0f8      	beq.n	8010f76 <sbrk_aligned+0x22>
 8010f84:	1a21      	subs	r1, r4, r0
 8010f86:	4628      	mov	r0, r5
 8010f88:	f000 fe98 	bl	8011cbc <_sbrk_r>
 8010f8c:	3001      	adds	r0, #1
 8010f8e:	d1f2      	bne.n	8010f76 <sbrk_aligned+0x22>
 8010f90:	e7ef      	b.n	8010f72 <sbrk_aligned+0x1e>
 8010f92:	bf00      	nop
 8010f94:	200078e0 	.word	0x200078e0

08010f98 <_malloc_r>:
 8010f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f9c:	1ccd      	adds	r5, r1, #3
 8010f9e:	f025 0503 	bic.w	r5, r5, #3
 8010fa2:	3508      	adds	r5, #8
 8010fa4:	2d0c      	cmp	r5, #12
 8010fa6:	bf38      	it	cc
 8010fa8:	250c      	movcc	r5, #12
 8010faa:	2d00      	cmp	r5, #0
 8010fac:	4606      	mov	r6, r0
 8010fae:	db01      	blt.n	8010fb4 <_malloc_r+0x1c>
 8010fb0:	42a9      	cmp	r1, r5
 8010fb2:	d904      	bls.n	8010fbe <_malloc_r+0x26>
 8010fb4:	230c      	movs	r3, #12
 8010fb6:	6033      	str	r3, [r6, #0]
 8010fb8:	2000      	movs	r0, #0
 8010fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011094 <_malloc_r+0xfc>
 8010fc2:	f000 f915 	bl	80111f0 <__malloc_lock>
 8010fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8010fca:	461c      	mov	r4, r3
 8010fcc:	bb44      	cbnz	r4, 8011020 <_malloc_r+0x88>
 8010fce:	4629      	mov	r1, r5
 8010fd0:	4630      	mov	r0, r6
 8010fd2:	f7ff ffbf 	bl	8010f54 <sbrk_aligned>
 8010fd6:	1c43      	adds	r3, r0, #1
 8010fd8:	4604      	mov	r4, r0
 8010fda:	d158      	bne.n	801108e <_malloc_r+0xf6>
 8010fdc:	f8d8 4000 	ldr.w	r4, [r8]
 8010fe0:	4627      	mov	r7, r4
 8010fe2:	2f00      	cmp	r7, #0
 8010fe4:	d143      	bne.n	801106e <_malloc_r+0xd6>
 8010fe6:	2c00      	cmp	r4, #0
 8010fe8:	d04b      	beq.n	8011082 <_malloc_r+0xea>
 8010fea:	6823      	ldr	r3, [r4, #0]
 8010fec:	4639      	mov	r1, r7
 8010fee:	4630      	mov	r0, r6
 8010ff0:	eb04 0903 	add.w	r9, r4, r3
 8010ff4:	f000 fe62 	bl	8011cbc <_sbrk_r>
 8010ff8:	4581      	cmp	r9, r0
 8010ffa:	d142      	bne.n	8011082 <_malloc_r+0xea>
 8010ffc:	6821      	ldr	r1, [r4, #0]
 8010ffe:	1a6d      	subs	r5, r5, r1
 8011000:	4629      	mov	r1, r5
 8011002:	4630      	mov	r0, r6
 8011004:	f7ff ffa6 	bl	8010f54 <sbrk_aligned>
 8011008:	3001      	adds	r0, #1
 801100a:	d03a      	beq.n	8011082 <_malloc_r+0xea>
 801100c:	6823      	ldr	r3, [r4, #0]
 801100e:	442b      	add	r3, r5
 8011010:	6023      	str	r3, [r4, #0]
 8011012:	f8d8 3000 	ldr.w	r3, [r8]
 8011016:	685a      	ldr	r2, [r3, #4]
 8011018:	bb62      	cbnz	r2, 8011074 <_malloc_r+0xdc>
 801101a:	f8c8 7000 	str.w	r7, [r8]
 801101e:	e00f      	b.n	8011040 <_malloc_r+0xa8>
 8011020:	6822      	ldr	r2, [r4, #0]
 8011022:	1b52      	subs	r2, r2, r5
 8011024:	d420      	bmi.n	8011068 <_malloc_r+0xd0>
 8011026:	2a0b      	cmp	r2, #11
 8011028:	d917      	bls.n	801105a <_malloc_r+0xc2>
 801102a:	1961      	adds	r1, r4, r5
 801102c:	42a3      	cmp	r3, r4
 801102e:	6025      	str	r5, [r4, #0]
 8011030:	bf18      	it	ne
 8011032:	6059      	strne	r1, [r3, #4]
 8011034:	6863      	ldr	r3, [r4, #4]
 8011036:	bf08      	it	eq
 8011038:	f8c8 1000 	streq.w	r1, [r8]
 801103c:	5162      	str	r2, [r4, r5]
 801103e:	604b      	str	r3, [r1, #4]
 8011040:	4630      	mov	r0, r6
 8011042:	f000 f8db 	bl	80111fc <__malloc_unlock>
 8011046:	f104 000b 	add.w	r0, r4, #11
 801104a:	1d23      	adds	r3, r4, #4
 801104c:	f020 0007 	bic.w	r0, r0, #7
 8011050:	1ac2      	subs	r2, r0, r3
 8011052:	bf1c      	itt	ne
 8011054:	1a1b      	subne	r3, r3, r0
 8011056:	50a3      	strne	r3, [r4, r2]
 8011058:	e7af      	b.n	8010fba <_malloc_r+0x22>
 801105a:	6862      	ldr	r2, [r4, #4]
 801105c:	42a3      	cmp	r3, r4
 801105e:	bf0c      	ite	eq
 8011060:	f8c8 2000 	streq.w	r2, [r8]
 8011064:	605a      	strne	r2, [r3, #4]
 8011066:	e7eb      	b.n	8011040 <_malloc_r+0xa8>
 8011068:	4623      	mov	r3, r4
 801106a:	6864      	ldr	r4, [r4, #4]
 801106c:	e7ae      	b.n	8010fcc <_malloc_r+0x34>
 801106e:	463c      	mov	r4, r7
 8011070:	687f      	ldr	r7, [r7, #4]
 8011072:	e7b6      	b.n	8010fe2 <_malloc_r+0x4a>
 8011074:	461a      	mov	r2, r3
 8011076:	685b      	ldr	r3, [r3, #4]
 8011078:	42a3      	cmp	r3, r4
 801107a:	d1fb      	bne.n	8011074 <_malloc_r+0xdc>
 801107c:	2300      	movs	r3, #0
 801107e:	6053      	str	r3, [r2, #4]
 8011080:	e7de      	b.n	8011040 <_malloc_r+0xa8>
 8011082:	230c      	movs	r3, #12
 8011084:	6033      	str	r3, [r6, #0]
 8011086:	4630      	mov	r0, r6
 8011088:	f000 f8b8 	bl	80111fc <__malloc_unlock>
 801108c:	e794      	b.n	8010fb8 <_malloc_r+0x20>
 801108e:	6005      	str	r5, [r0, #0]
 8011090:	e7d6      	b.n	8011040 <_malloc_r+0xa8>
 8011092:	bf00      	nop
 8011094:	200078e4 	.word	0x200078e4

08011098 <__sflush_r>:
 8011098:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801109c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110a0:	0716      	lsls	r6, r2, #28
 80110a2:	4605      	mov	r5, r0
 80110a4:	460c      	mov	r4, r1
 80110a6:	d454      	bmi.n	8011152 <__sflush_r+0xba>
 80110a8:	684b      	ldr	r3, [r1, #4]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	dc02      	bgt.n	80110b4 <__sflush_r+0x1c>
 80110ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	dd48      	ble.n	8011146 <__sflush_r+0xae>
 80110b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80110b6:	2e00      	cmp	r6, #0
 80110b8:	d045      	beq.n	8011146 <__sflush_r+0xae>
 80110ba:	2300      	movs	r3, #0
 80110bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80110c0:	682f      	ldr	r7, [r5, #0]
 80110c2:	6a21      	ldr	r1, [r4, #32]
 80110c4:	602b      	str	r3, [r5, #0]
 80110c6:	d030      	beq.n	801112a <__sflush_r+0x92>
 80110c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80110ca:	89a3      	ldrh	r3, [r4, #12]
 80110cc:	0759      	lsls	r1, r3, #29
 80110ce:	d505      	bpl.n	80110dc <__sflush_r+0x44>
 80110d0:	6863      	ldr	r3, [r4, #4]
 80110d2:	1ad2      	subs	r2, r2, r3
 80110d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80110d6:	b10b      	cbz	r3, 80110dc <__sflush_r+0x44>
 80110d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80110da:	1ad2      	subs	r2, r2, r3
 80110dc:	2300      	movs	r3, #0
 80110de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80110e0:	6a21      	ldr	r1, [r4, #32]
 80110e2:	4628      	mov	r0, r5
 80110e4:	47b0      	blx	r6
 80110e6:	1c43      	adds	r3, r0, #1
 80110e8:	89a3      	ldrh	r3, [r4, #12]
 80110ea:	d106      	bne.n	80110fa <__sflush_r+0x62>
 80110ec:	6829      	ldr	r1, [r5, #0]
 80110ee:	291d      	cmp	r1, #29
 80110f0:	d82b      	bhi.n	801114a <__sflush_r+0xb2>
 80110f2:	4a2a      	ldr	r2, [pc, #168]	@ (801119c <__sflush_r+0x104>)
 80110f4:	410a      	asrs	r2, r1
 80110f6:	07d6      	lsls	r6, r2, #31
 80110f8:	d427      	bmi.n	801114a <__sflush_r+0xb2>
 80110fa:	2200      	movs	r2, #0
 80110fc:	6062      	str	r2, [r4, #4]
 80110fe:	04d9      	lsls	r1, r3, #19
 8011100:	6922      	ldr	r2, [r4, #16]
 8011102:	6022      	str	r2, [r4, #0]
 8011104:	d504      	bpl.n	8011110 <__sflush_r+0x78>
 8011106:	1c42      	adds	r2, r0, #1
 8011108:	d101      	bne.n	801110e <__sflush_r+0x76>
 801110a:	682b      	ldr	r3, [r5, #0]
 801110c:	b903      	cbnz	r3, 8011110 <__sflush_r+0x78>
 801110e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011110:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011112:	602f      	str	r7, [r5, #0]
 8011114:	b1b9      	cbz	r1, 8011146 <__sflush_r+0xae>
 8011116:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801111a:	4299      	cmp	r1, r3
 801111c:	d002      	beq.n	8011124 <__sflush_r+0x8c>
 801111e:	4628      	mov	r0, r5
 8011120:	f7ff fc2c 	bl	801097c <_free_r>
 8011124:	2300      	movs	r3, #0
 8011126:	6363      	str	r3, [r4, #52]	@ 0x34
 8011128:	e00d      	b.n	8011146 <__sflush_r+0xae>
 801112a:	2301      	movs	r3, #1
 801112c:	4628      	mov	r0, r5
 801112e:	47b0      	blx	r6
 8011130:	4602      	mov	r2, r0
 8011132:	1c50      	adds	r0, r2, #1
 8011134:	d1c9      	bne.n	80110ca <__sflush_r+0x32>
 8011136:	682b      	ldr	r3, [r5, #0]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d0c6      	beq.n	80110ca <__sflush_r+0x32>
 801113c:	2b1d      	cmp	r3, #29
 801113e:	d001      	beq.n	8011144 <__sflush_r+0xac>
 8011140:	2b16      	cmp	r3, #22
 8011142:	d11e      	bne.n	8011182 <__sflush_r+0xea>
 8011144:	602f      	str	r7, [r5, #0]
 8011146:	2000      	movs	r0, #0
 8011148:	e022      	b.n	8011190 <__sflush_r+0xf8>
 801114a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801114e:	b21b      	sxth	r3, r3
 8011150:	e01b      	b.n	801118a <__sflush_r+0xf2>
 8011152:	690f      	ldr	r7, [r1, #16]
 8011154:	2f00      	cmp	r7, #0
 8011156:	d0f6      	beq.n	8011146 <__sflush_r+0xae>
 8011158:	0793      	lsls	r3, r2, #30
 801115a:	680e      	ldr	r6, [r1, #0]
 801115c:	bf08      	it	eq
 801115e:	694b      	ldreq	r3, [r1, #20]
 8011160:	600f      	str	r7, [r1, #0]
 8011162:	bf18      	it	ne
 8011164:	2300      	movne	r3, #0
 8011166:	eba6 0807 	sub.w	r8, r6, r7
 801116a:	608b      	str	r3, [r1, #8]
 801116c:	f1b8 0f00 	cmp.w	r8, #0
 8011170:	dde9      	ble.n	8011146 <__sflush_r+0xae>
 8011172:	6a21      	ldr	r1, [r4, #32]
 8011174:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011176:	4643      	mov	r3, r8
 8011178:	463a      	mov	r2, r7
 801117a:	4628      	mov	r0, r5
 801117c:	47b0      	blx	r6
 801117e:	2800      	cmp	r0, #0
 8011180:	dc08      	bgt.n	8011194 <__sflush_r+0xfc>
 8011182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801118a:	81a3      	strh	r3, [r4, #12]
 801118c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011194:	4407      	add	r7, r0
 8011196:	eba8 0800 	sub.w	r8, r8, r0
 801119a:	e7e7      	b.n	801116c <__sflush_r+0xd4>
 801119c:	dfbffffe 	.word	0xdfbffffe

080111a0 <_fflush_r>:
 80111a0:	b538      	push	{r3, r4, r5, lr}
 80111a2:	690b      	ldr	r3, [r1, #16]
 80111a4:	4605      	mov	r5, r0
 80111a6:	460c      	mov	r4, r1
 80111a8:	b913      	cbnz	r3, 80111b0 <_fflush_r+0x10>
 80111aa:	2500      	movs	r5, #0
 80111ac:	4628      	mov	r0, r5
 80111ae:	bd38      	pop	{r3, r4, r5, pc}
 80111b0:	b118      	cbz	r0, 80111ba <_fflush_r+0x1a>
 80111b2:	6a03      	ldr	r3, [r0, #32]
 80111b4:	b90b      	cbnz	r3, 80111ba <_fflush_r+0x1a>
 80111b6:	f7fe fcbf 	bl	800fb38 <__sinit>
 80111ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d0f3      	beq.n	80111aa <_fflush_r+0xa>
 80111c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80111c4:	07d0      	lsls	r0, r2, #31
 80111c6:	d404      	bmi.n	80111d2 <_fflush_r+0x32>
 80111c8:	0599      	lsls	r1, r3, #22
 80111ca:	d402      	bmi.n	80111d2 <_fflush_r+0x32>
 80111cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80111ce:	f7fe fde6 	bl	800fd9e <__retarget_lock_acquire_recursive>
 80111d2:	4628      	mov	r0, r5
 80111d4:	4621      	mov	r1, r4
 80111d6:	f7ff ff5f 	bl	8011098 <__sflush_r>
 80111da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80111dc:	07da      	lsls	r2, r3, #31
 80111de:	4605      	mov	r5, r0
 80111e0:	d4e4      	bmi.n	80111ac <_fflush_r+0xc>
 80111e2:	89a3      	ldrh	r3, [r4, #12]
 80111e4:	059b      	lsls	r3, r3, #22
 80111e6:	d4e1      	bmi.n	80111ac <_fflush_r+0xc>
 80111e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80111ea:	f7fe fdd9 	bl	800fda0 <__retarget_lock_release_recursive>
 80111ee:	e7dd      	b.n	80111ac <_fflush_r+0xc>

080111f0 <__malloc_lock>:
 80111f0:	4801      	ldr	r0, [pc, #4]	@ (80111f8 <__malloc_lock+0x8>)
 80111f2:	f7fe bdd4 	b.w	800fd9e <__retarget_lock_acquire_recursive>
 80111f6:	bf00      	nop
 80111f8:	200078dc 	.word	0x200078dc

080111fc <__malloc_unlock>:
 80111fc:	4801      	ldr	r0, [pc, #4]	@ (8011204 <__malloc_unlock+0x8>)
 80111fe:	f7fe bdcf 	b.w	800fda0 <__retarget_lock_release_recursive>
 8011202:	bf00      	nop
 8011204:	200078dc 	.word	0x200078dc

08011208 <_Balloc>:
 8011208:	b570      	push	{r4, r5, r6, lr}
 801120a:	69c6      	ldr	r6, [r0, #28]
 801120c:	4604      	mov	r4, r0
 801120e:	460d      	mov	r5, r1
 8011210:	b976      	cbnz	r6, 8011230 <_Balloc+0x28>
 8011212:	2010      	movs	r0, #16
 8011214:	f7ff fe96 	bl	8010f44 <malloc>
 8011218:	4602      	mov	r2, r0
 801121a:	61e0      	str	r0, [r4, #28]
 801121c:	b920      	cbnz	r0, 8011228 <_Balloc+0x20>
 801121e:	4b18      	ldr	r3, [pc, #96]	@ (8011280 <_Balloc+0x78>)
 8011220:	4818      	ldr	r0, [pc, #96]	@ (8011284 <_Balloc+0x7c>)
 8011222:	216b      	movs	r1, #107	@ 0x6b
 8011224:	f000 fd6c 	bl	8011d00 <__assert_func>
 8011228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801122c:	6006      	str	r6, [r0, #0]
 801122e:	60c6      	str	r6, [r0, #12]
 8011230:	69e6      	ldr	r6, [r4, #28]
 8011232:	68f3      	ldr	r3, [r6, #12]
 8011234:	b183      	cbz	r3, 8011258 <_Balloc+0x50>
 8011236:	69e3      	ldr	r3, [r4, #28]
 8011238:	68db      	ldr	r3, [r3, #12]
 801123a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801123e:	b9b8      	cbnz	r0, 8011270 <_Balloc+0x68>
 8011240:	2101      	movs	r1, #1
 8011242:	fa01 f605 	lsl.w	r6, r1, r5
 8011246:	1d72      	adds	r2, r6, #5
 8011248:	0092      	lsls	r2, r2, #2
 801124a:	4620      	mov	r0, r4
 801124c:	f000 fd76 	bl	8011d3c <_calloc_r>
 8011250:	b160      	cbz	r0, 801126c <_Balloc+0x64>
 8011252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011256:	e00e      	b.n	8011276 <_Balloc+0x6e>
 8011258:	2221      	movs	r2, #33	@ 0x21
 801125a:	2104      	movs	r1, #4
 801125c:	4620      	mov	r0, r4
 801125e:	f000 fd6d 	bl	8011d3c <_calloc_r>
 8011262:	69e3      	ldr	r3, [r4, #28]
 8011264:	60f0      	str	r0, [r6, #12]
 8011266:	68db      	ldr	r3, [r3, #12]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d1e4      	bne.n	8011236 <_Balloc+0x2e>
 801126c:	2000      	movs	r0, #0
 801126e:	bd70      	pop	{r4, r5, r6, pc}
 8011270:	6802      	ldr	r2, [r0, #0]
 8011272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011276:	2300      	movs	r3, #0
 8011278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801127c:	e7f7      	b.n	801126e <_Balloc+0x66>
 801127e:	bf00      	nop
 8011280:	08012a69 	.word	0x08012a69
 8011284:	08012afa 	.word	0x08012afa

08011288 <_Bfree>:
 8011288:	b570      	push	{r4, r5, r6, lr}
 801128a:	69c6      	ldr	r6, [r0, #28]
 801128c:	4605      	mov	r5, r0
 801128e:	460c      	mov	r4, r1
 8011290:	b976      	cbnz	r6, 80112b0 <_Bfree+0x28>
 8011292:	2010      	movs	r0, #16
 8011294:	f7ff fe56 	bl	8010f44 <malloc>
 8011298:	4602      	mov	r2, r0
 801129a:	61e8      	str	r0, [r5, #28]
 801129c:	b920      	cbnz	r0, 80112a8 <_Bfree+0x20>
 801129e:	4b09      	ldr	r3, [pc, #36]	@ (80112c4 <_Bfree+0x3c>)
 80112a0:	4809      	ldr	r0, [pc, #36]	@ (80112c8 <_Bfree+0x40>)
 80112a2:	218f      	movs	r1, #143	@ 0x8f
 80112a4:	f000 fd2c 	bl	8011d00 <__assert_func>
 80112a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80112ac:	6006      	str	r6, [r0, #0]
 80112ae:	60c6      	str	r6, [r0, #12]
 80112b0:	b13c      	cbz	r4, 80112c2 <_Bfree+0x3a>
 80112b2:	69eb      	ldr	r3, [r5, #28]
 80112b4:	6862      	ldr	r2, [r4, #4]
 80112b6:	68db      	ldr	r3, [r3, #12]
 80112b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80112bc:	6021      	str	r1, [r4, #0]
 80112be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80112c2:	bd70      	pop	{r4, r5, r6, pc}
 80112c4:	08012a69 	.word	0x08012a69
 80112c8:	08012afa 	.word	0x08012afa

080112cc <__multadd>:
 80112cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112d0:	690d      	ldr	r5, [r1, #16]
 80112d2:	4607      	mov	r7, r0
 80112d4:	460c      	mov	r4, r1
 80112d6:	461e      	mov	r6, r3
 80112d8:	f101 0c14 	add.w	ip, r1, #20
 80112dc:	2000      	movs	r0, #0
 80112de:	f8dc 3000 	ldr.w	r3, [ip]
 80112e2:	b299      	uxth	r1, r3
 80112e4:	fb02 6101 	mla	r1, r2, r1, r6
 80112e8:	0c1e      	lsrs	r6, r3, #16
 80112ea:	0c0b      	lsrs	r3, r1, #16
 80112ec:	fb02 3306 	mla	r3, r2, r6, r3
 80112f0:	b289      	uxth	r1, r1
 80112f2:	3001      	adds	r0, #1
 80112f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80112f8:	4285      	cmp	r5, r0
 80112fa:	f84c 1b04 	str.w	r1, [ip], #4
 80112fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011302:	dcec      	bgt.n	80112de <__multadd+0x12>
 8011304:	b30e      	cbz	r6, 801134a <__multadd+0x7e>
 8011306:	68a3      	ldr	r3, [r4, #8]
 8011308:	42ab      	cmp	r3, r5
 801130a:	dc19      	bgt.n	8011340 <__multadd+0x74>
 801130c:	6861      	ldr	r1, [r4, #4]
 801130e:	4638      	mov	r0, r7
 8011310:	3101      	adds	r1, #1
 8011312:	f7ff ff79 	bl	8011208 <_Balloc>
 8011316:	4680      	mov	r8, r0
 8011318:	b928      	cbnz	r0, 8011326 <__multadd+0x5a>
 801131a:	4602      	mov	r2, r0
 801131c:	4b0c      	ldr	r3, [pc, #48]	@ (8011350 <__multadd+0x84>)
 801131e:	480d      	ldr	r0, [pc, #52]	@ (8011354 <__multadd+0x88>)
 8011320:	21ba      	movs	r1, #186	@ 0xba
 8011322:	f000 fced 	bl	8011d00 <__assert_func>
 8011326:	6922      	ldr	r2, [r4, #16]
 8011328:	3202      	adds	r2, #2
 801132a:	f104 010c 	add.w	r1, r4, #12
 801132e:	0092      	lsls	r2, r2, #2
 8011330:	300c      	adds	r0, #12
 8011332:	f7fe fd36 	bl	800fda2 <memcpy>
 8011336:	4621      	mov	r1, r4
 8011338:	4638      	mov	r0, r7
 801133a:	f7ff ffa5 	bl	8011288 <_Bfree>
 801133e:	4644      	mov	r4, r8
 8011340:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011344:	3501      	adds	r5, #1
 8011346:	615e      	str	r6, [r3, #20]
 8011348:	6125      	str	r5, [r4, #16]
 801134a:	4620      	mov	r0, r4
 801134c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011350:	08012ad8 	.word	0x08012ad8
 8011354:	08012afa 	.word	0x08012afa

08011358 <__hi0bits>:
 8011358:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801135c:	4603      	mov	r3, r0
 801135e:	bf36      	itet	cc
 8011360:	0403      	lslcc	r3, r0, #16
 8011362:	2000      	movcs	r0, #0
 8011364:	2010      	movcc	r0, #16
 8011366:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801136a:	bf3c      	itt	cc
 801136c:	021b      	lslcc	r3, r3, #8
 801136e:	3008      	addcc	r0, #8
 8011370:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011374:	bf3c      	itt	cc
 8011376:	011b      	lslcc	r3, r3, #4
 8011378:	3004      	addcc	r0, #4
 801137a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801137e:	bf3c      	itt	cc
 8011380:	009b      	lslcc	r3, r3, #2
 8011382:	3002      	addcc	r0, #2
 8011384:	2b00      	cmp	r3, #0
 8011386:	db05      	blt.n	8011394 <__hi0bits+0x3c>
 8011388:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801138c:	f100 0001 	add.w	r0, r0, #1
 8011390:	bf08      	it	eq
 8011392:	2020      	moveq	r0, #32
 8011394:	4770      	bx	lr

08011396 <__lo0bits>:
 8011396:	6803      	ldr	r3, [r0, #0]
 8011398:	4602      	mov	r2, r0
 801139a:	f013 0007 	ands.w	r0, r3, #7
 801139e:	d00b      	beq.n	80113b8 <__lo0bits+0x22>
 80113a0:	07d9      	lsls	r1, r3, #31
 80113a2:	d421      	bmi.n	80113e8 <__lo0bits+0x52>
 80113a4:	0798      	lsls	r0, r3, #30
 80113a6:	bf49      	itett	mi
 80113a8:	085b      	lsrmi	r3, r3, #1
 80113aa:	089b      	lsrpl	r3, r3, #2
 80113ac:	2001      	movmi	r0, #1
 80113ae:	6013      	strmi	r3, [r2, #0]
 80113b0:	bf5c      	itt	pl
 80113b2:	6013      	strpl	r3, [r2, #0]
 80113b4:	2002      	movpl	r0, #2
 80113b6:	4770      	bx	lr
 80113b8:	b299      	uxth	r1, r3
 80113ba:	b909      	cbnz	r1, 80113c0 <__lo0bits+0x2a>
 80113bc:	0c1b      	lsrs	r3, r3, #16
 80113be:	2010      	movs	r0, #16
 80113c0:	b2d9      	uxtb	r1, r3
 80113c2:	b909      	cbnz	r1, 80113c8 <__lo0bits+0x32>
 80113c4:	3008      	adds	r0, #8
 80113c6:	0a1b      	lsrs	r3, r3, #8
 80113c8:	0719      	lsls	r1, r3, #28
 80113ca:	bf04      	itt	eq
 80113cc:	091b      	lsreq	r3, r3, #4
 80113ce:	3004      	addeq	r0, #4
 80113d0:	0799      	lsls	r1, r3, #30
 80113d2:	bf04      	itt	eq
 80113d4:	089b      	lsreq	r3, r3, #2
 80113d6:	3002      	addeq	r0, #2
 80113d8:	07d9      	lsls	r1, r3, #31
 80113da:	d403      	bmi.n	80113e4 <__lo0bits+0x4e>
 80113dc:	085b      	lsrs	r3, r3, #1
 80113de:	f100 0001 	add.w	r0, r0, #1
 80113e2:	d003      	beq.n	80113ec <__lo0bits+0x56>
 80113e4:	6013      	str	r3, [r2, #0]
 80113e6:	4770      	bx	lr
 80113e8:	2000      	movs	r0, #0
 80113ea:	4770      	bx	lr
 80113ec:	2020      	movs	r0, #32
 80113ee:	4770      	bx	lr

080113f0 <__i2b>:
 80113f0:	b510      	push	{r4, lr}
 80113f2:	460c      	mov	r4, r1
 80113f4:	2101      	movs	r1, #1
 80113f6:	f7ff ff07 	bl	8011208 <_Balloc>
 80113fa:	4602      	mov	r2, r0
 80113fc:	b928      	cbnz	r0, 801140a <__i2b+0x1a>
 80113fe:	4b05      	ldr	r3, [pc, #20]	@ (8011414 <__i2b+0x24>)
 8011400:	4805      	ldr	r0, [pc, #20]	@ (8011418 <__i2b+0x28>)
 8011402:	f240 1145 	movw	r1, #325	@ 0x145
 8011406:	f000 fc7b 	bl	8011d00 <__assert_func>
 801140a:	2301      	movs	r3, #1
 801140c:	6144      	str	r4, [r0, #20]
 801140e:	6103      	str	r3, [r0, #16]
 8011410:	bd10      	pop	{r4, pc}
 8011412:	bf00      	nop
 8011414:	08012ad8 	.word	0x08012ad8
 8011418:	08012afa 	.word	0x08012afa

0801141c <__multiply>:
 801141c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011420:	4614      	mov	r4, r2
 8011422:	690a      	ldr	r2, [r1, #16]
 8011424:	6923      	ldr	r3, [r4, #16]
 8011426:	429a      	cmp	r2, r3
 8011428:	bfa8      	it	ge
 801142a:	4623      	movge	r3, r4
 801142c:	460f      	mov	r7, r1
 801142e:	bfa4      	itt	ge
 8011430:	460c      	movge	r4, r1
 8011432:	461f      	movge	r7, r3
 8011434:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011438:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801143c:	68a3      	ldr	r3, [r4, #8]
 801143e:	6861      	ldr	r1, [r4, #4]
 8011440:	eb0a 0609 	add.w	r6, sl, r9
 8011444:	42b3      	cmp	r3, r6
 8011446:	b085      	sub	sp, #20
 8011448:	bfb8      	it	lt
 801144a:	3101      	addlt	r1, #1
 801144c:	f7ff fedc 	bl	8011208 <_Balloc>
 8011450:	b930      	cbnz	r0, 8011460 <__multiply+0x44>
 8011452:	4602      	mov	r2, r0
 8011454:	4b44      	ldr	r3, [pc, #272]	@ (8011568 <__multiply+0x14c>)
 8011456:	4845      	ldr	r0, [pc, #276]	@ (801156c <__multiply+0x150>)
 8011458:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801145c:	f000 fc50 	bl	8011d00 <__assert_func>
 8011460:	f100 0514 	add.w	r5, r0, #20
 8011464:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011468:	462b      	mov	r3, r5
 801146a:	2200      	movs	r2, #0
 801146c:	4543      	cmp	r3, r8
 801146e:	d321      	bcc.n	80114b4 <__multiply+0x98>
 8011470:	f107 0114 	add.w	r1, r7, #20
 8011474:	f104 0214 	add.w	r2, r4, #20
 8011478:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801147c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011480:	9302      	str	r3, [sp, #8]
 8011482:	1b13      	subs	r3, r2, r4
 8011484:	3b15      	subs	r3, #21
 8011486:	f023 0303 	bic.w	r3, r3, #3
 801148a:	3304      	adds	r3, #4
 801148c:	f104 0715 	add.w	r7, r4, #21
 8011490:	42ba      	cmp	r2, r7
 8011492:	bf38      	it	cc
 8011494:	2304      	movcc	r3, #4
 8011496:	9301      	str	r3, [sp, #4]
 8011498:	9b02      	ldr	r3, [sp, #8]
 801149a:	9103      	str	r1, [sp, #12]
 801149c:	428b      	cmp	r3, r1
 801149e:	d80c      	bhi.n	80114ba <__multiply+0x9e>
 80114a0:	2e00      	cmp	r6, #0
 80114a2:	dd03      	ble.n	80114ac <__multiply+0x90>
 80114a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d05b      	beq.n	8011564 <__multiply+0x148>
 80114ac:	6106      	str	r6, [r0, #16]
 80114ae:	b005      	add	sp, #20
 80114b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114b4:	f843 2b04 	str.w	r2, [r3], #4
 80114b8:	e7d8      	b.n	801146c <__multiply+0x50>
 80114ba:	f8b1 a000 	ldrh.w	sl, [r1]
 80114be:	f1ba 0f00 	cmp.w	sl, #0
 80114c2:	d024      	beq.n	801150e <__multiply+0xf2>
 80114c4:	f104 0e14 	add.w	lr, r4, #20
 80114c8:	46a9      	mov	r9, r5
 80114ca:	f04f 0c00 	mov.w	ip, #0
 80114ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80114d2:	f8d9 3000 	ldr.w	r3, [r9]
 80114d6:	fa1f fb87 	uxth.w	fp, r7
 80114da:	b29b      	uxth	r3, r3
 80114dc:	fb0a 330b 	mla	r3, sl, fp, r3
 80114e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80114e4:	f8d9 7000 	ldr.w	r7, [r9]
 80114e8:	4463      	add	r3, ip
 80114ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80114ee:	fb0a c70b 	mla	r7, sl, fp, ip
 80114f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80114f6:	b29b      	uxth	r3, r3
 80114f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80114fc:	4572      	cmp	r2, lr
 80114fe:	f849 3b04 	str.w	r3, [r9], #4
 8011502:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011506:	d8e2      	bhi.n	80114ce <__multiply+0xb2>
 8011508:	9b01      	ldr	r3, [sp, #4]
 801150a:	f845 c003 	str.w	ip, [r5, r3]
 801150e:	9b03      	ldr	r3, [sp, #12]
 8011510:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011514:	3104      	adds	r1, #4
 8011516:	f1b9 0f00 	cmp.w	r9, #0
 801151a:	d021      	beq.n	8011560 <__multiply+0x144>
 801151c:	682b      	ldr	r3, [r5, #0]
 801151e:	f104 0c14 	add.w	ip, r4, #20
 8011522:	46ae      	mov	lr, r5
 8011524:	f04f 0a00 	mov.w	sl, #0
 8011528:	f8bc b000 	ldrh.w	fp, [ip]
 801152c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011530:	fb09 770b 	mla	r7, r9, fp, r7
 8011534:	4457      	add	r7, sl
 8011536:	b29b      	uxth	r3, r3
 8011538:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801153c:	f84e 3b04 	str.w	r3, [lr], #4
 8011540:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011544:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011548:	f8be 3000 	ldrh.w	r3, [lr]
 801154c:	fb09 330a 	mla	r3, r9, sl, r3
 8011550:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011554:	4562      	cmp	r2, ip
 8011556:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801155a:	d8e5      	bhi.n	8011528 <__multiply+0x10c>
 801155c:	9f01      	ldr	r7, [sp, #4]
 801155e:	51eb      	str	r3, [r5, r7]
 8011560:	3504      	adds	r5, #4
 8011562:	e799      	b.n	8011498 <__multiply+0x7c>
 8011564:	3e01      	subs	r6, #1
 8011566:	e79b      	b.n	80114a0 <__multiply+0x84>
 8011568:	08012ad8 	.word	0x08012ad8
 801156c:	08012afa 	.word	0x08012afa

08011570 <__pow5mult>:
 8011570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011574:	4615      	mov	r5, r2
 8011576:	f012 0203 	ands.w	r2, r2, #3
 801157a:	4607      	mov	r7, r0
 801157c:	460e      	mov	r6, r1
 801157e:	d007      	beq.n	8011590 <__pow5mult+0x20>
 8011580:	4c25      	ldr	r4, [pc, #148]	@ (8011618 <__pow5mult+0xa8>)
 8011582:	3a01      	subs	r2, #1
 8011584:	2300      	movs	r3, #0
 8011586:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801158a:	f7ff fe9f 	bl	80112cc <__multadd>
 801158e:	4606      	mov	r6, r0
 8011590:	10ad      	asrs	r5, r5, #2
 8011592:	d03d      	beq.n	8011610 <__pow5mult+0xa0>
 8011594:	69fc      	ldr	r4, [r7, #28]
 8011596:	b97c      	cbnz	r4, 80115b8 <__pow5mult+0x48>
 8011598:	2010      	movs	r0, #16
 801159a:	f7ff fcd3 	bl	8010f44 <malloc>
 801159e:	4602      	mov	r2, r0
 80115a0:	61f8      	str	r0, [r7, #28]
 80115a2:	b928      	cbnz	r0, 80115b0 <__pow5mult+0x40>
 80115a4:	4b1d      	ldr	r3, [pc, #116]	@ (801161c <__pow5mult+0xac>)
 80115a6:	481e      	ldr	r0, [pc, #120]	@ (8011620 <__pow5mult+0xb0>)
 80115a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80115ac:	f000 fba8 	bl	8011d00 <__assert_func>
 80115b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80115b4:	6004      	str	r4, [r0, #0]
 80115b6:	60c4      	str	r4, [r0, #12]
 80115b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80115bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80115c0:	b94c      	cbnz	r4, 80115d6 <__pow5mult+0x66>
 80115c2:	f240 2171 	movw	r1, #625	@ 0x271
 80115c6:	4638      	mov	r0, r7
 80115c8:	f7ff ff12 	bl	80113f0 <__i2b>
 80115cc:	2300      	movs	r3, #0
 80115ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80115d2:	4604      	mov	r4, r0
 80115d4:	6003      	str	r3, [r0, #0]
 80115d6:	f04f 0900 	mov.w	r9, #0
 80115da:	07eb      	lsls	r3, r5, #31
 80115dc:	d50a      	bpl.n	80115f4 <__pow5mult+0x84>
 80115de:	4631      	mov	r1, r6
 80115e0:	4622      	mov	r2, r4
 80115e2:	4638      	mov	r0, r7
 80115e4:	f7ff ff1a 	bl	801141c <__multiply>
 80115e8:	4631      	mov	r1, r6
 80115ea:	4680      	mov	r8, r0
 80115ec:	4638      	mov	r0, r7
 80115ee:	f7ff fe4b 	bl	8011288 <_Bfree>
 80115f2:	4646      	mov	r6, r8
 80115f4:	106d      	asrs	r5, r5, #1
 80115f6:	d00b      	beq.n	8011610 <__pow5mult+0xa0>
 80115f8:	6820      	ldr	r0, [r4, #0]
 80115fa:	b938      	cbnz	r0, 801160c <__pow5mult+0x9c>
 80115fc:	4622      	mov	r2, r4
 80115fe:	4621      	mov	r1, r4
 8011600:	4638      	mov	r0, r7
 8011602:	f7ff ff0b 	bl	801141c <__multiply>
 8011606:	6020      	str	r0, [r4, #0]
 8011608:	f8c0 9000 	str.w	r9, [r0]
 801160c:	4604      	mov	r4, r0
 801160e:	e7e4      	b.n	80115da <__pow5mult+0x6a>
 8011610:	4630      	mov	r0, r6
 8011612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011616:	bf00      	nop
 8011618:	08012b54 	.word	0x08012b54
 801161c:	08012a69 	.word	0x08012a69
 8011620:	08012afa 	.word	0x08012afa

08011624 <__lshift>:
 8011624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011628:	460c      	mov	r4, r1
 801162a:	6849      	ldr	r1, [r1, #4]
 801162c:	6923      	ldr	r3, [r4, #16]
 801162e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011632:	68a3      	ldr	r3, [r4, #8]
 8011634:	4607      	mov	r7, r0
 8011636:	4691      	mov	r9, r2
 8011638:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801163c:	f108 0601 	add.w	r6, r8, #1
 8011640:	42b3      	cmp	r3, r6
 8011642:	db0b      	blt.n	801165c <__lshift+0x38>
 8011644:	4638      	mov	r0, r7
 8011646:	f7ff fddf 	bl	8011208 <_Balloc>
 801164a:	4605      	mov	r5, r0
 801164c:	b948      	cbnz	r0, 8011662 <__lshift+0x3e>
 801164e:	4602      	mov	r2, r0
 8011650:	4b28      	ldr	r3, [pc, #160]	@ (80116f4 <__lshift+0xd0>)
 8011652:	4829      	ldr	r0, [pc, #164]	@ (80116f8 <__lshift+0xd4>)
 8011654:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011658:	f000 fb52 	bl	8011d00 <__assert_func>
 801165c:	3101      	adds	r1, #1
 801165e:	005b      	lsls	r3, r3, #1
 8011660:	e7ee      	b.n	8011640 <__lshift+0x1c>
 8011662:	2300      	movs	r3, #0
 8011664:	f100 0114 	add.w	r1, r0, #20
 8011668:	f100 0210 	add.w	r2, r0, #16
 801166c:	4618      	mov	r0, r3
 801166e:	4553      	cmp	r3, sl
 8011670:	db33      	blt.n	80116da <__lshift+0xb6>
 8011672:	6920      	ldr	r0, [r4, #16]
 8011674:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011678:	f104 0314 	add.w	r3, r4, #20
 801167c:	f019 091f 	ands.w	r9, r9, #31
 8011680:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011684:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011688:	d02b      	beq.n	80116e2 <__lshift+0xbe>
 801168a:	f1c9 0e20 	rsb	lr, r9, #32
 801168e:	468a      	mov	sl, r1
 8011690:	2200      	movs	r2, #0
 8011692:	6818      	ldr	r0, [r3, #0]
 8011694:	fa00 f009 	lsl.w	r0, r0, r9
 8011698:	4310      	orrs	r0, r2
 801169a:	f84a 0b04 	str.w	r0, [sl], #4
 801169e:	f853 2b04 	ldr.w	r2, [r3], #4
 80116a2:	459c      	cmp	ip, r3
 80116a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80116a8:	d8f3      	bhi.n	8011692 <__lshift+0x6e>
 80116aa:	ebac 0304 	sub.w	r3, ip, r4
 80116ae:	3b15      	subs	r3, #21
 80116b0:	f023 0303 	bic.w	r3, r3, #3
 80116b4:	3304      	adds	r3, #4
 80116b6:	f104 0015 	add.w	r0, r4, #21
 80116ba:	4584      	cmp	ip, r0
 80116bc:	bf38      	it	cc
 80116be:	2304      	movcc	r3, #4
 80116c0:	50ca      	str	r2, [r1, r3]
 80116c2:	b10a      	cbz	r2, 80116c8 <__lshift+0xa4>
 80116c4:	f108 0602 	add.w	r6, r8, #2
 80116c8:	3e01      	subs	r6, #1
 80116ca:	4638      	mov	r0, r7
 80116cc:	612e      	str	r6, [r5, #16]
 80116ce:	4621      	mov	r1, r4
 80116d0:	f7ff fdda 	bl	8011288 <_Bfree>
 80116d4:	4628      	mov	r0, r5
 80116d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116da:	f842 0f04 	str.w	r0, [r2, #4]!
 80116de:	3301      	adds	r3, #1
 80116e0:	e7c5      	b.n	801166e <__lshift+0x4a>
 80116e2:	3904      	subs	r1, #4
 80116e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80116e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80116ec:	459c      	cmp	ip, r3
 80116ee:	d8f9      	bhi.n	80116e4 <__lshift+0xc0>
 80116f0:	e7ea      	b.n	80116c8 <__lshift+0xa4>
 80116f2:	bf00      	nop
 80116f4:	08012ad8 	.word	0x08012ad8
 80116f8:	08012afa 	.word	0x08012afa

080116fc <__mcmp>:
 80116fc:	690a      	ldr	r2, [r1, #16]
 80116fe:	4603      	mov	r3, r0
 8011700:	6900      	ldr	r0, [r0, #16]
 8011702:	1a80      	subs	r0, r0, r2
 8011704:	b530      	push	{r4, r5, lr}
 8011706:	d10e      	bne.n	8011726 <__mcmp+0x2a>
 8011708:	3314      	adds	r3, #20
 801170a:	3114      	adds	r1, #20
 801170c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011710:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011714:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011718:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801171c:	4295      	cmp	r5, r2
 801171e:	d003      	beq.n	8011728 <__mcmp+0x2c>
 8011720:	d205      	bcs.n	801172e <__mcmp+0x32>
 8011722:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011726:	bd30      	pop	{r4, r5, pc}
 8011728:	42a3      	cmp	r3, r4
 801172a:	d3f3      	bcc.n	8011714 <__mcmp+0x18>
 801172c:	e7fb      	b.n	8011726 <__mcmp+0x2a>
 801172e:	2001      	movs	r0, #1
 8011730:	e7f9      	b.n	8011726 <__mcmp+0x2a>
	...

08011734 <__mdiff>:
 8011734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011738:	4689      	mov	r9, r1
 801173a:	4606      	mov	r6, r0
 801173c:	4611      	mov	r1, r2
 801173e:	4648      	mov	r0, r9
 8011740:	4614      	mov	r4, r2
 8011742:	f7ff ffdb 	bl	80116fc <__mcmp>
 8011746:	1e05      	subs	r5, r0, #0
 8011748:	d112      	bne.n	8011770 <__mdiff+0x3c>
 801174a:	4629      	mov	r1, r5
 801174c:	4630      	mov	r0, r6
 801174e:	f7ff fd5b 	bl	8011208 <_Balloc>
 8011752:	4602      	mov	r2, r0
 8011754:	b928      	cbnz	r0, 8011762 <__mdiff+0x2e>
 8011756:	4b3f      	ldr	r3, [pc, #252]	@ (8011854 <__mdiff+0x120>)
 8011758:	f240 2137 	movw	r1, #567	@ 0x237
 801175c:	483e      	ldr	r0, [pc, #248]	@ (8011858 <__mdiff+0x124>)
 801175e:	f000 facf 	bl	8011d00 <__assert_func>
 8011762:	2301      	movs	r3, #1
 8011764:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011768:	4610      	mov	r0, r2
 801176a:	b003      	add	sp, #12
 801176c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011770:	bfbc      	itt	lt
 8011772:	464b      	movlt	r3, r9
 8011774:	46a1      	movlt	r9, r4
 8011776:	4630      	mov	r0, r6
 8011778:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801177c:	bfba      	itte	lt
 801177e:	461c      	movlt	r4, r3
 8011780:	2501      	movlt	r5, #1
 8011782:	2500      	movge	r5, #0
 8011784:	f7ff fd40 	bl	8011208 <_Balloc>
 8011788:	4602      	mov	r2, r0
 801178a:	b918      	cbnz	r0, 8011794 <__mdiff+0x60>
 801178c:	4b31      	ldr	r3, [pc, #196]	@ (8011854 <__mdiff+0x120>)
 801178e:	f240 2145 	movw	r1, #581	@ 0x245
 8011792:	e7e3      	b.n	801175c <__mdiff+0x28>
 8011794:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011798:	6926      	ldr	r6, [r4, #16]
 801179a:	60c5      	str	r5, [r0, #12]
 801179c:	f109 0310 	add.w	r3, r9, #16
 80117a0:	f109 0514 	add.w	r5, r9, #20
 80117a4:	f104 0e14 	add.w	lr, r4, #20
 80117a8:	f100 0b14 	add.w	fp, r0, #20
 80117ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80117b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80117b4:	9301      	str	r3, [sp, #4]
 80117b6:	46d9      	mov	r9, fp
 80117b8:	f04f 0c00 	mov.w	ip, #0
 80117bc:	9b01      	ldr	r3, [sp, #4]
 80117be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80117c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80117c6:	9301      	str	r3, [sp, #4]
 80117c8:	fa1f f38a 	uxth.w	r3, sl
 80117cc:	4619      	mov	r1, r3
 80117ce:	b283      	uxth	r3, r0
 80117d0:	1acb      	subs	r3, r1, r3
 80117d2:	0c00      	lsrs	r0, r0, #16
 80117d4:	4463      	add	r3, ip
 80117d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80117da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80117de:	b29b      	uxth	r3, r3
 80117e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80117e4:	4576      	cmp	r6, lr
 80117e6:	f849 3b04 	str.w	r3, [r9], #4
 80117ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80117ee:	d8e5      	bhi.n	80117bc <__mdiff+0x88>
 80117f0:	1b33      	subs	r3, r6, r4
 80117f2:	3b15      	subs	r3, #21
 80117f4:	f023 0303 	bic.w	r3, r3, #3
 80117f8:	3415      	adds	r4, #21
 80117fa:	3304      	adds	r3, #4
 80117fc:	42a6      	cmp	r6, r4
 80117fe:	bf38      	it	cc
 8011800:	2304      	movcc	r3, #4
 8011802:	441d      	add	r5, r3
 8011804:	445b      	add	r3, fp
 8011806:	461e      	mov	r6, r3
 8011808:	462c      	mov	r4, r5
 801180a:	4544      	cmp	r4, r8
 801180c:	d30e      	bcc.n	801182c <__mdiff+0xf8>
 801180e:	f108 0103 	add.w	r1, r8, #3
 8011812:	1b49      	subs	r1, r1, r5
 8011814:	f021 0103 	bic.w	r1, r1, #3
 8011818:	3d03      	subs	r5, #3
 801181a:	45a8      	cmp	r8, r5
 801181c:	bf38      	it	cc
 801181e:	2100      	movcc	r1, #0
 8011820:	440b      	add	r3, r1
 8011822:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011826:	b191      	cbz	r1, 801184e <__mdiff+0x11a>
 8011828:	6117      	str	r7, [r2, #16]
 801182a:	e79d      	b.n	8011768 <__mdiff+0x34>
 801182c:	f854 1b04 	ldr.w	r1, [r4], #4
 8011830:	46e6      	mov	lr, ip
 8011832:	0c08      	lsrs	r0, r1, #16
 8011834:	fa1c fc81 	uxtah	ip, ip, r1
 8011838:	4471      	add	r1, lr
 801183a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801183e:	b289      	uxth	r1, r1
 8011840:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011844:	f846 1b04 	str.w	r1, [r6], #4
 8011848:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801184c:	e7dd      	b.n	801180a <__mdiff+0xd6>
 801184e:	3f01      	subs	r7, #1
 8011850:	e7e7      	b.n	8011822 <__mdiff+0xee>
 8011852:	bf00      	nop
 8011854:	08012ad8 	.word	0x08012ad8
 8011858:	08012afa 	.word	0x08012afa

0801185c <__d2b>:
 801185c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011860:	460f      	mov	r7, r1
 8011862:	2101      	movs	r1, #1
 8011864:	ec59 8b10 	vmov	r8, r9, d0
 8011868:	4616      	mov	r6, r2
 801186a:	f7ff fccd 	bl	8011208 <_Balloc>
 801186e:	4604      	mov	r4, r0
 8011870:	b930      	cbnz	r0, 8011880 <__d2b+0x24>
 8011872:	4602      	mov	r2, r0
 8011874:	4b23      	ldr	r3, [pc, #140]	@ (8011904 <__d2b+0xa8>)
 8011876:	4824      	ldr	r0, [pc, #144]	@ (8011908 <__d2b+0xac>)
 8011878:	f240 310f 	movw	r1, #783	@ 0x30f
 801187c:	f000 fa40 	bl	8011d00 <__assert_func>
 8011880:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011884:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011888:	b10d      	cbz	r5, 801188e <__d2b+0x32>
 801188a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801188e:	9301      	str	r3, [sp, #4]
 8011890:	f1b8 0300 	subs.w	r3, r8, #0
 8011894:	d023      	beq.n	80118de <__d2b+0x82>
 8011896:	4668      	mov	r0, sp
 8011898:	9300      	str	r3, [sp, #0]
 801189a:	f7ff fd7c 	bl	8011396 <__lo0bits>
 801189e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80118a2:	b1d0      	cbz	r0, 80118da <__d2b+0x7e>
 80118a4:	f1c0 0320 	rsb	r3, r0, #32
 80118a8:	fa02 f303 	lsl.w	r3, r2, r3
 80118ac:	430b      	orrs	r3, r1
 80118ae:	40c2      	lsrs	r2, r0
 80118b0:	6163      	str	r3, [r4, #20]
 80118b2:	9201      	str	r2, [sp, #4]
 80118b4:	9b01      	ldr	r3, [sp, #4]
 80118b6:	61a3      	str	r3, [r4, #24]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	bf0c      	ite	eq
 80118bc:	2201      	moveq	r2, #1
 80118be:	2202      	movne	r2, #2
 80118c0:	6122      	str	r2, [r4, #16]
 80118c2:	b1a5      	cbz	r5, 80118ee <__d2b+0x92>
 80118c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80118c8:	4405      	add	r5, r0
 80118ca:	603d      	str	r5, [r7, #0]
 80118cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80118d0:	6030      	str	r0, [r6, #0]
 80118d2:	4620      	mov	r0, r4
 80118d4:	b003      	add	sp, #12
 80118d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118da:	6161      	str	r1, [r4, #20]
 80118dc:	e7ea      	b.n	80118b4 <__d2b+0x58>
 80118de:	a801      	add	r0, sp, #4
 80118e0:	f7ff fd59 	bl	8011396 <__lo0bits>
 80118e4:	9b01      	ldr	r3, [sp, #4]
 80118e6:	6163      	str	r3, [r4, #20]
 80118e8:	3020      	adds	r0, #32
 80118ea:	2201      	movs	r2, #1
 80118ec:	e7e8      	b.n	80118c0 <__d2b+0x64>
 80118ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80118f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80118f6:	6038      	str	r0, [r7, #0]
 80118f8:	6918      	ldr	r0, [r3, #16]
 80118fa:	f7ff fd2d 	bl	8011358 <__hi0bits>
 80118fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011902:	e7e5      	b.n	80118d0 <__d2b+0x74>
 8011904:	08012ad8 	.word	0x08012ad8
 8011908:	08012afa 	.word	0x08012afa

0801190c <__sread>:
 801190c:	b510      	push	{r4, lr}
 801190e:	460c      	mov	r4, r1
 8011910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011914:	f000 f9c0 	bl	8011c98 <_read_r>
 8011918:	2800      	cmp	r0, #0
 801191a:	bfab      	itete	ge
 801191c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801191e:	89a3      	ldrhlt	r3, [r4, #12]
 8011920:	181b      	addge	r3, r3, r0
 8011922:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011926:	bfac      	ite	ge
 8011928:	6563      	strge	r3, [r4, #84]	@ 0x54
 801192a:	81a3      	strhlt	r3, [r4, #12]
 801192c:	bd10      	pop	{r4, pc}

0801192e <__swrite>:
 801192e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011932:	461f      	mov	r7, r3
 8011934:	898b      	ldrh	r3, [r1, #12]
 8011936:	05db      	lsls	r3, r3, #23
 8011938:	4605      	mov	r5, r0
 801193a:	460c      	mov	r4, r1
 801193c:	4616      	mov	r6, r2
 801193e:	d505      	bpl.n	801194c <__swrite+0x1e>
 8011940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011944:	2302      	movs	r3, #2
 8011946:	2200      	movs	r2, #0
 8011948:	f000 f994 	bl	8011c74 <_lseek_r>
 801194c:	89a3      	ldrh	r3, [r4, #12]
 801194e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011952:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011956:	81a3      	strh	r3, [r4, #12]
 8011958:	4632      	mov	r2, r6
 801195a:	463b      	mov	r3, r7
 801195c:	4628      	mov	r0, r5
 801195e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011962:	f000 b9bb 	b.w	8011cdc <_write_r>

08011966 <__sseek>:
 8011966:	b510      	push	{r4, lr}
 8011968:	460c      	mov	r4, r1
 801196a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801196e:	f000 f981 	bl	8011c74 <_lseek_r>
 8011972:	1c43      	adds	r3, r0, #1
 8011974:	89a3      	ldrh	r3, [r4, #12]
 8011976:	bf15      	itete	ne
 8011978:	6560      	strne	r0, [r4, #84]	@ 0x54
 801197a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801197e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011982:	81a3      	strheq	r3, [r4, #12]
 8011984:	bf18      	it	ne
 8011986:	81a3      	strhne	r3, [r4, #12]
 8011988:	bd10      	pop	{r4, pc}

0801198a <__sclose>:
 801198a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801198e:	f000 b93f 	b.w	8011c10 <_close_r>

08011992 <_realloc_r>:
 8011992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011996:	4680      	mov	r8, r0
 8011998:	4615      	mov	r5, r2
 801199a:	460c      	mov	r4, r1
 801199c:	b921      	cbnz	r1, 80119a8 <_realloc_r+0x16>
 801199e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119a2:	4611      	mov	r1, r2
 80119a4:	f7ff baf8 	b.w	8010f98 <_malloc_r>
 80119a8:	b92a      	cbnz	r2, 80119b6 <_realloc_r+0x24>
 80119aa:	f7fe ffe7 	bl	801097c <_free_r>
 80119ae:	2400      	movs	r4, #0
 80119b0:	4620      	mov	r0, r4
 80119b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119b6:	f000 f9e7 	bl	8011d88 <_malloc_usable_size_r>
 80119ba:	4285      	cmp	r5, r0
 80119bc:	4606      	mov	r6, r0
 80119be:	d802      	bhi.n	80119c6 <_realloc_r+0x34>
 80119c0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80119c4:	d8f4      	bhi.n	80119b0 <_realloc_r+0x1e>
 80119c6:	4629      	mov	r1, r5
 80119c8:	4640      	mov	r0, r8
 80119ca:	f7ff fae5 	bl	8010f98 <_malloc_r>
 80119ce:	4607      	mov	r7, r0
 80119d0:	2800      	cmp	r0, #0
 80119d2:	d0ec      	beq.n	80119ae <_realloc_r+0x1c>
 80119d4:	42b5      	cmp	r5, r6
 80119d6:	462a      	mov	r2, r5
 80119d8:	4621      	mov	r1, r4
 80119da:	bf28      	it	cs
 80119dc:	4632      	movcs	r2, r6
 80119de:	f7fe f9e0 	bl	800fda2 <memcpy>
 80119e2:	4621      	mov	r1, r4
 80119e4:	4640      	mov	r0, r8
 80119e6:	f7fe ffc9 	bl	801097c <_free_r>
 80119ea:	463c      	mov	r4, r7
 80119ec:	e7e0      	b.n	80119b0 <_realloc_r+0x1e>

080119ee <__swbuf_r>:
 80119ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119f0:	460e      	mov	r6, r1
 80119f2:	4614      	mov	r4, r2
 80119f4:	4605      	mov	r5, r0
 80119f6:	b118      	cbz	r0, 8011a00 <__swbuf_r+0x12>
 80119f8:	6a03      	ldr	r3, [r0, #32]
 80119fa:	b90b      	cbnz	r3, 8011a00 <__swbuf_r+0x12>
 80119fc:	f7fe f89c 	bl	800fb38 <__sinit>
 8011a00:	69a3      	ldr	r3, [r4, #24]
 8011a02:	60a3      	str	r3, [r4, #8]
 8011a04:	89a3      	ldrh	r3, [r4, #12]
 8011a06:	071a      	lsls	r2, r3, #28
 8011a08:	d501      	bpl.n	8011a0e <__swbuf_r+0x20>
 8011a0a:	6923      	ldr	r3, [r4, #16]
 8011a0c:	b943      	cbnz	r3, 8011a20 <__swbuf_r+0x32>
 8011a0e:	4621      	mov	r1, r4
 8011a10:	4628      	mov	r0, r5
 8011a12:	f000 f82b 	bl	8011a6c <__swsetup_r>
 8011a16:	b118      	cbz	r0, 8011a20 <__swbuf_r+0x32>
 8011a18:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011a1c:	4638      	mov	r0, r7
 8011a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a20:	6823      	ldr	r3, [r4, #0]
 8011a22:	6922      	ldr	r2, [r4, #16]
 8011a24:	1a98      	subs	r0, r3, r2
 8011a26:	6963      	ldr	r3, [r4, #20]
 8011a28:	b2f6      	uxtb	r6, r6
 8011a2a:	4283      	cmp	r3, r0
 8011a2c:	4637      	mov	r7, r6
 8011a2e:	dc05      	bgt.n	8011a3c <__swbuf_r+0x4e>
 8011a30:	4621      	mov	r1, r4
 8011a32:	4628      	mov	r0, r5
 8011a34:	f7ff fbb4 	bl	80111a0 <_fflush_r>
 8011a38:	2800      	cmp	r0, #0
 8011a3a:	d1ed      	bne.n	8011a18 <__swbuf_r+0x2a>
 8011a3c:	68a3      	ldr	r3, [r4, #8]
 8011a3e:	3b01      	subs	r3, #1
 8011a40:	60a3      	str	r3, [r4, #8]
 8011a42:	6823      	ldr	r3, [r4, #0]
 8011a44:	1c5a      	adds	r2, r3, #1
 8011a46:	6022      	str	r2, [r4, #0]
 8011a48:	701e      	strb	r6, [r3, #0]
 8011a4a:	6962      	ldr	r2, [r4, #20]
 8011a4c:	1c43      	adds	r3, r0, #1
 8011a4e:	429a      	cmp	r2, r3
 8011a50:	d004      	beq.n	8011a5c <__swbuf_r+0x6e>
 8011a52:	89a3      	ldrh	r3, [r4, #12]
 8011a54:	07db      	lsls	r3, r3, #31
 8011a56:	d5e1      	bpl.n	8011a1c <__swbuf_r+0x2e>
 8011a58:	2e0a      	cmp	r6, #10
 8011a5a:	d1df      	bne.n	8011a1c <__swbuf_r+0x2e>
 8011a5c:	4621      	mov	r1, r4
 8011a5e:	4628      	mov	r0, r5
 8011a60:	f7ff fb9e 	bl	80111a0 <_fflush_r>
 8011a64:	2800      	cmp	r0, #0
 8011a66:	d0d9      	beq.n	8011a1c <__swbuf_r+0x2e>
 8011a68:	e7d6      	b.n	8011a18 <__swbuf_r+0x2a>
	...

08011a6c <__swsetup_r>:
 8011a6c:	b538      	push	{r3, r4, r5, lr}
 8011a6e:	4b29      	ldr	r3, [pc, #164]	@ (8011b14 <__swsetup_r+0xa8>)
 8011a70:	4605      	mov	r5, r0
 8011a72:	6818      	ldr	r0, [r3, #0]
 8011a74:	460c      	mov	r4, r1
 8011a76:	b118      	cbz	r0, 8011a80 <__swsetup_r+0x14>
 8011a78:	6a03      	ldr	r3, [r0, #32]
 8011a7a:	b90b      	cbnz	r3, 8011a80 <__swsetup_r+0x14>
 8011a7c:	f7fe f85c 	bl	800fb38 <__sinit>
 8011a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a84:	0719      	lsls	r1, r3, #28
 8011a86:	d422      	bmi.n	8011ace <__swsetup_r+0x62>
 8011a88:	06da      	lsls	r2, r3, #27
 8011a8a:	d407      	bmi.n	8011a9c <__swsetup_r+0x30>
 8011a8c:	2209      	movs	r2, #9
 8011a8e:	602a      	str	r2, [r5, #0]
 8011a90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a94:	81a3      	strh	r3, [r4, #12]
 8011a96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011a9a:	e033      	b.n	8011b04 <__swsetup_r+0x98>
 8011a9c:	0758      	lsls	r0, r3, #29
 8011a9e:	d512      	bpl.n	8011ac6 <__swsetup_r+0x5a>
 8011aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011aa2:	b141      	cbz	r1, 8011ab6 <__swsetup_r+0x4a>
 8011aa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011aa8:	4299      	cmp	r1, r3
 8011aaa:	d002      	beq.n	8011ab2 <__swsetup_r+0x46>
 8011aac:	4628      	mov	r0, r5
 8011aae:	f7fe ff65 	bl	801097c <_free_r>
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ab6:	89a3      	ldrh	r3, [r4, #12]
 8011ab8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011abc:	81a3      	strh	r3, [r4, #12]
 8011abe:	2300      	movs	r3, #0
 8011ac0:	6063      	str	r3, [r4, #4]
 8011ac2:	6923      	ldr	r3, [r4, #16]
 8011ac4:	6023      	str	r3, [r4, #0]
 8011ac6:	89a3      	ldrh	r3, [r4, #12]
 8011ac8:	f043 0308 	orr.w	r3, r3, #8
 8011acc:	81a3      	strh	r3, [r4, #12]
 8011ace:	6923      	ldr	r3, [r4, #16]
 8011ad0:	b94b      	cbnz	r3, 8011ae6 <__swsetup_r+0x7a>
 8011ad2:	89a3      	ldrh	r3, [r4, #12]
 8011ad4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011ad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011adc:	d003      	beq.n	8011ae6 <__swsetup_r+0x7a>
 8011ade:	4621      	mov	r1, r4
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	f000 f83f 	bl	8011b64 <__smakebuf_r>
 8011ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011aea:	f013 0201 	ands.w	r2, r3, #1
 8011aee:	d00a      	beq.n	8011b06 <__swsetup_r+0x9a>
 8011af0:	2200      	movs	r2, #0
 8011af2:	60a2      	str	r2, [r4, #8]
 8011af4:	6962      	ldr	r2, [r4, #20]
 8011af6:	4252      	negs	r2, r2
 8011af8:	61a2      	str	r2, [r4, #24]
 8011afa:	6922      	ldr	r2, [r4, #16]
 8011afc:	b942      	cbnz	r2, 8011b10 <__swsetup_r+0xa4>
 8011afe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011b02:	d1c5      	bne.n	8011a90 <__swsetup_r+0x24>
 8011b04:	bd38      	pop	{r3, r4, r5, pc}
 8011b06:	0799      	lsls	r1, r3, #30
 8011b08:	bf58      	it	pl
 8011b0a:	6962      	ldrpl	r2, [r4, #20]
 8011b0c:	60a2      	str	r2, [r4, #8]
 8011b0e:	e7f4      	b.n	8011afa <__swsetup_r+0x8e>
 8011b10:	2000      	movs	r0, #0
 8011b12:	e7f7      	b.n	8011b04 <__swsetup_r+0x98>
 8011b14:	20000034 	.word	0x20000034

08011b18 <__swhatbuf_r>:
 8011b18:	b570      	push	{r4, r5, r6, lr}
 8011b1a:	460c      	mov	r4, r1
 8011b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b20:	2900      	cmp	r1, #0
 8011b22:	b096      	sub	sp, #88	@ 0x58
 8011b24:	4615      	mov	r5, r2
 8011b26:	461e      	mov	r6, r3
 8011b28:	da0d      	bge.n	8011b46 <__swhatbuf_r+0x2e>
 8011b2a:	89a3      	ldrh	r3, [r4, #12]
 8011b2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011b30:	f04f 0100 	mov.w	r1, #0
 8011b34:	bf14      	ite	ne
 8011b36:	2340      	movne	r3, #64	@ 0x40
 8011b38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011b3c:	2000      	movs	r0, #0
 8011b3e:	6031      	str	r1, [r6, #0]
 8011b40:	602b      	str	r3, [r5, #0]
 8011b42:	b016      	add	sp, #88	@ 0x58
 8011b44:	bd70      	pop	{r4, r5, r6, pc}
 8011b46:	466a      	mov	r2, sp
 8011b48:	f000 f872 	bl	8011c30 <_fstat_r>
 8011b4c:	2800      	cmp	r0, #0
 8011b4e:	dbec      	blt.n	8011b2a <__swhatbuf_r+0x12>
 8011b50:	9901      	ldr	r1, [sp, #4]
 8011b52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011b56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011b5a:	4259      	negs	r1, r3
 8011b5c:	4159      	adcs	r1, r3
 8011b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b62:	e7eb      	b.n	8011b3c <__swhatbuf_r+0x24>

08011b64 <__smakebuf_r>:
 8011b64:	898b      	ldrh	r3, [r1, #12]
 8011b66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b68:	079d      	lsls	r5, r3, #30
 8011b6a:	4606      	mov	r6, r0
 8011b6c:	460c      	mov	r4, r1
 8011b6e:	d507      	bpl.n	8011b80 <__smakebuf_r+0x1c>
 8011b70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011b74:	6023      	str	r3, [r4, #0]
 8011b76:	6123      	str	r3, [r4, #16]
 8011b78:	2301      	movs	r3, #1
 8011b7a:	6163      	str	r3, [r4, #20]
 8011b7c:	b003      	add	sp, #12
 8011b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b80:	ab01      	add	r3, sp, #4
 8011b82:	466a      	mov	r2, sp
 8011b84:	f7ff ffc8 	bl	8011b18 <__swhatbuf_r>
 8011b88:	9f00      	ldr	r7, [sp, #0]
 8011b8a:	4605      	mov	r5, r0
 8011b8c:	4639      	mov	r1, r7
 8011b8e:	4630      	mov	r0, r6
 8011b90:	f7ff fa02 	bl	8010f98 <_malloc_r>
 8011b94:	b948      	cbnz	r0, 8011baa <__smakebuf_r+0x46>
 8011b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b9a:	059a      	lsls	r2, r3, #22
 8011b9c:	d4ee      	bmi.n	8011b7c <__smakebuf_r+0x18>
 8011b9e:	f023 0303 	bic.w	r3, r3, #3
 8011ba2:	f043 0302 	orr.w	r3, r3, #2
 8011ba6:	81a3      	strh	r3, [r4, #12]
 8011ba8:	e7e2      	b.n	8011b70 <__smakebuf_r+0xc>
 8011baa:	89a3      	ldrh	r3, [r4, #12]
 8011bac:	6020      	str	r0, [r4, #0]
 8011bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bb2:	81a3      	strh	r3, [r4, #12]
 8011bb4:	9b01      	ldr	r3, [sp, #4]
 8011bb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011bba:	b15b      	cbz	r3, 8011bd4 <__smakebuf_r+0x70>
 8011bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bc0:	4630      	mov	r0, r6
 8011bc2:	f000 f847 	bl	8011c54 <_isatty_r>
 8011bc6:	b128      	cbz	r0, 8011bd4 <__smakebuf_r+0x70>
 8011bc8:	89a3      	ldrh	r3, [r4, #12]
 8011bca:	f023 0303 	bic.w	r3, r3, #3
 8011bce:	f043 0301 	orr.w	r3, r3, #1
 8011bd2:	81a3      	strh	r3, [r4, #12]
 8011bd4:	89a3      	ldrh	r3, [r4, #12]
 8011bd6:	431d      	orrs	r5, r3
 8011bd8:	81a5      	strh	r5, [r4, #12]
 8011bda:	e7cf      	b.n	8011b7c <__smakebuf_r+0x18>

08011bdc <memmove>:
 8011bdc:	4288      	cmp	r0, r1
 8011bde:	b510      	push	{r4, lr}
 8011be0:	eb01 0402 	add.w	r4, r1, r2
 8011be4:	d902      	bls.n	8011bec <memmove+0x10>
 8011be6:	4284      	cmp	r4, r0
 8011be8:	4623      	mov	r3, r4
 8011bea:	d807      	bhi.n	8011bfc <memmove+0x20>
 8011bec:	1e43      	subs	r3, r0, #1
 8011bee:	42a1      	cmp	r1, r4
 8011bf0:	d008      	beq.n	8011c04 <memmove+0x28>
 8011bf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011bf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011bfa:	e7f8      	b.n	8011bee <memmove+0x12>
 8011bfc:	4402      	add	r2, r0
 8011bfe:	4601      	mov	r1, r0
 8011c00:	428a      	cmp	r2, r1
 8011c02:	d100      	bne.n	8011c06 <memmove+0x2a>
 8011c04:	bd10      	pop	{r4, pc}
 8011c06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c0e:	e7f7      	b.n	8011c00 <memmove+0x24>

08011c10 <_close_r>:
 8011c10:	b538      	push	{r3, r4, r5, lr}
 8011c12:	4d06      	ldr	r5, [pc, #24]	@ (8011c2c <_close_r+0x1c>)
 8011c14:	2300      	movs	r3, #0
 8011c16:	4604      	mov	r4, r0
 8011c18:	4608      	mov	r0, r1
 8011c1a:	602b      	str	r3, [r5, #0]
 8011c1c:	f7f0 f9a0 	bl	8001f60 <_close>
 8011c20:	1c43      	adds	r3, r0, #1
 8011c22:	d102      	bne.n	8011c2a <_close_r+0x1a>
 8011c24:	682b      	ldr	r3, [r5, #0]
 8011c26:	b103      	cbz	r3, 8011c2a <_close_r+0x1a>
 8011c28:	6023      	str	r3, [r4, #0]
 8011c2a:	bd38      	pop	{r3, r4, r5, pc}
 8011c2c:	200078d8 	.word	0x200078d8

08011c30 <_fstat_r>:
 8011c30:	b538      	push	{r3, r4, r5, lr}
 8011c32:	4d07      	ldr	r5, [pc, #28]	@ (8011c50 <_fstat_r+0x20>)
 8011c34:	2300      	movs	r3, #0
 8011c36:	4604      	mov	r4, r0
 8011c38:	4608      	mov	r0, r1
 8011c3a:	4611      	mov	r1, r2
 8011c3c:	602b      	str	r3, [r5, #0]
 8011c3e:	f7f0 f99b 	bl	8001f78 <_fstat>
 8011c42:	1c43      	adds	r3, r0, #1
 8011c44:	d102      	bne.n	8011c4c <_fstat_r+0x1c>
 8011c46:	682b      	ldr	r3, [r5, #0]
 8011c48:	b103      	cbz	r3, 8011c4c <_fstat_r+0x1c>
 8011c4a:	6023      	str	r3, [r4, #0]
 8011c4c:	bd38      	pop	{r3, r4, r5, pc}
 8011c4e:	bf00      	nop
 8011c50:	200078d8 	.word	0x200078d8

08011c54 <_isatty_r>:
 8011c54:	b538      	push	{r3, r4, r5, lr}
 8011c56:	4d06      	ldr	r5, [pc, #24]	@ (8011c70 <_isatty_r+0x1c>)
 8011c58:	2300      	movs	r3, #0
 8011c5a:	4604      	mov	r4, r0
 8011c5c:	4608      	mov	r0, r1
 8011c5e:	602b      	str	r3, [r5, #0]
 8011c60:	f7f0 f99a 	bl	8001f98 <_isatty>
 8011c64:	1c43      	adds	r3, r0, #1
 8011c66:	d102      	bne.n	8011c6e <_isatty_r+0x1a>
 8011c68:	682b      	ldr	r3, [r5, #0]
 8011c6a:	b103      	cbz	r3, 8011c6e <_isatty_r+0x1a>
 8011c6c:	6023      	str	r3, [r4, #0]
 8011c6e:	bd38      	pop	{r3, r4, r5, pc}
 8011c70:	200078d8 	.word	0x200078d8

08011c74 <_lseek_r>:
 8011c74:	b538      	push	{r3, r4, r5, lr}
 8011c76:	4d07      	ldr	r5, [pc, #28]	@ (8011c94 <_lseek_r+0x20>)
 8011c78:	4604      	mov	r4, r0
 8011c7a:	4608      	mov	r0, r1
 8011c7c:	4611      	mov	r1, r2
 8011c7e:	2200      	movs	r2, #0
 8011c80:	602a      	str	r2, [r5, #0]
 8011c82:	461a      	mov	r2, r3
 8011c84:	f7f0 f993 	bl	8001fae <_lseek>
 8011c88:	1c43      	adds	r3, r0, #1
 8011c8a:	d102      	bne.n	8011c92 <_lseek_r+0x1e>
 8011c8c:	682b      	ldr	r3, [r5, #0]
 8011c8e:	b103      	cbz	r3, 8011c92 <_lseek_r+0x1e>
 8011c90:	6023      	str	r3, [r4, #0]
 8011c92:	bd38      	pop	{r3, r4, r5, pc}
 8011c94:	200078d8 	.word	0x200078d8

08011c98 <_read_r>:
 8011c98:	b538      	push	{r3, r4, r5, lr}
 8011c9a:	4d07      	ldr	r5, [pc, #28]	@ (8011cb8 <_read_r+0x20>)
 8011c9c:	4604      	mov	r4, r0
 8011c9e:	4608      	mov	r0, r1
 8011ca0:	4611      	mov	r1, r2
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	602a      	str	r2, [r5, #0]
 8011ca6:	461a      	mov	r2, r3
 8011ca8:	f7f0 f93d 	bl	8001f26 <_read>
 8011cac:	1c43      	adds	r3, r0, #1
 8011cae:	d102      	bne.n	8011cb6 <_read_r+0x1e>
 8011cb0:	682b      	ldr	r3, [r5, #0]
 8011cb2:	b103      	cbz	r3, 8011cb6 <_read_r+0x1e>
 8011cb4:	6023      	str	r3, [r4, #0]
 8011cb6:	bd38      	pop	{r3, r4, r5, pc}
 8011cb8:	200078d8 	.word	0x200078d8

08011cbc <_sbrk_r>:
 8011cbc:	b538      	push	{r3, r4, r5, lr}
 8011cbe:	4d06      	ldr	r5, [pc, #24]	@ (8011cd8 <_sbrk_r+0x1c>)
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	4604      	mov	r4, r0
 8011cc4:	4608      	mov	r0, r1
 8011cc6:	602b      	str	r3, [r5, #0]
 8011cc8:	f7f0 f97e 	bl	8001fc8 <_sbrk>
 8011ccc:	1c43      	adds	r3, r0, #1
 8011cce:	d102      	bne.n	8011cd6 <_sbrk_r+0x1a>
 8011cd0:	682b      	ldr	r3, [r5, #0]
 8011cd2:	b103      	cbz	r3, 8011cd6 <_sbrk_r+0x1a>
 8011cd4:	6023      	str	r3, [r4, #0]
 8011cd6:	bd38      	pop	{r3, r4, r5, pc}
 8011cd8:	200078d8 	.word	0x200078d8

08011cdc <_write_r>:
 8011cdc:	b538      	push	{r3, r4, r5, lr}
 8011cde:	4d07      	ldr	r5, [pc, #28]	@ (8011cfc <_write_r+0x20>)
 8011ce0:	4604      	mov	r4, r0
 8011ce2:	4608      	mov	r0, r1
 8011ce4:	4611      	mov	r1, r2
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	602a      	str	r2, [r5, #0]
 8011cea:	461a      	mov	r2, r3
 8011cec:	f7ee fe48 	bl	8000980 <_write>
 8011cf0:	1c43      	adds	r3, r0, #1
 8011cf2:	d102      	bne.n	8011cfa <_write_r+0x1e>
 8011cf4:	682b      	ldr	r3, [r5, #0]
 8011cf6:	b103      	cbz	r3, 8011cfa <_write_r+0x1e>
 8011cf8:	6023      	str	r3, [r4, #0]
 8011cfa:	bd38      	pop	{r3, r4, r5, pc}
 8011cfc:	200078d8 	.word	0x200078d8

08011d00 <__assert_func>:
 8011d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d02:	4614      	mov	r4, r2
 8011d04:	461a      	mov	r2, r3
 8011d06:	4b09      	ldr	r3, [pc, #36]	@ (8011d2c <__assert_func+0x2c>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	4605      	mov	r5, r0
 8011d0c:	68d8      	ldr	r0, [r3, #12]
 8011d0e:	b954      	cbnz	r4, 8011d26 <__assert_func+0x26>
 8011d10:	4b07      	ldr	r3, [pc, #28]	@ (8011d30 <__assert_func+0x30>)
 8011d12:	461c      	mov	r4, r3
 8011d14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011d18:	9100      	str	r1, [sp, #0]
 8011d1a:	462b      	mov	r3, r5
 8011d1c:	4905      	ldr	r1, [pc, #20]	@ (8011d34 <__assert_func+0x34>)
 8011d1e:	f000 f83b 	bl	8011d98 <fiprintf>
 8011d22:	f000 f858 	bl	8011dd6 <abort>
 8011d26:	4b04      	ldr	r3, [pc, #16]	@ (8011d38 <__assert_func+0x38>)
 8011d28:	e7f4      	b.n	8011d14 <__assert_func+0x14>
 8011d2a:	bf00      	nop
 8011d2c:	20000034 	.word	0x20000034
 8011d30:	08012d96 	.word	0x08012d96
 8011d34:	08012d68 	.word	0x08012d68
 8011d38:	08012d5b 	.word	0x08012d5b

08011d3c <_calloc_r>:
 8011d3c:	b570      	push	{r4, r5, r6, lr}
 8011d3e:	fba1 5402 	umull	r5, r4, r1, r2
 8011d42:	b93c      	cbnz	r4, 8011d54 <_calloc_r+0x18>
 8011d44:	4629      	mov	r1, r5
 8011d46:	f7ff f927 	bl	8010f98 <_malloc_r>
 8011d4a:	4606      	mov	r6, r0
 8011d4c:	b928      	cbnz	r0, 8011d5a <_calloc_r+0x1e>
 8011d4e:	2600      	movs	r6, #0
 8011d50:	4630      	mov	r0, r6
 8011d52:	bd70      	pop	{r4, r5, r6, pc}
 8011d54:	220c      	movs	r2, #12
 8011d56:	6002      	str	r2, [r0, #0]
 8011d58:	e7f9      	b.n	8011d4e <_calloc_r+0x12>
 8011d5a:	462a      	mov	r2, r5
 8011d5c:	4621      	mov	r1, r4
 8011d5e:	f7fd ff91 	bl	800fc84 <memset>
 8011d62:	e7f5      	b.n	8011d50 <_calloc_r+0x14>

08011d64 <__ascii_mbtowc>:
 8011d64:	b082      	sub	sp, #8
 8011d66:	b901      	cbnz	r1, 8011d6a <__ascii_mbtowc+0x6>
 8011d68:	a901      	add	r1, sp, #4
 8011d6a:	b142      	cbz	r2, 8011d7e <__ascii_mbtowc+0x1a>
 8011d6c:	b14b      	cbz	r3, 8011d82 <__ascii_mbtowc+0x1e>
 8011d6e:	7813      	ldrb	r3, [r2, #0]
 8011d70:	600b      	str	r3, [r1, #0]
 8011d72:	7812      	ldrb	r2, [r2, #0]
 8011d74:	1e10      	subs	r0, r2, #0
 8011d76:	bf18      	it	ne
 8011d78:	2001      	movne	r0, #1
 8011d7a:	b002      	add	sp, #8
 8011d7c:	4770      	bx	lr
 8011d7e:	4610      	mov	r0, r2
 8011d80:	e7fb      	b.n	8011d7a <__ascii_mbtowc+0x16>
 8011d82:	f06f 0001 	mvn.w	r0, #1
 8011d86:	e7f8      	b.n	8011d7a <__ascii_mbtowc+0x16>

08011d88 <_malloc_usable_size_r>:
 8011d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d8c:	1f18      	subs	r0, r3, #4
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	bfbc      	itt	lt
 8011d92:	580b      	ldrlt	r3, [r1, r0]
 8011d94:	18c0      	addlt	r0, r0, r3
 8011d96:	4770      	bx	lr

08011d98 <fiprintf>:
 8011d98:	b40e      	push	{r1, r2, r3}
 8011d9a:	b503      	push	{r0, r1, lr}
 8011d9c:	4601      	mov	r1, r0
 8011d9e:	ab03      	add	r3, sp, #12
 8011da0:	4805      	ldr	r0, [pc, #20]	@ (8011db8 <fiprintf+0x20>)
 8011da2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011da6:	6800      	ldr	r0, [r0, #0]
 8011da8:	9301      	str	r3, [sp, #4]
 8011daa:	f7fe ffb3 	bl	8010d14 <_vfiprintf_r>
 8011dae:	b002      	add	sp, #8
 8011db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011db4:	b003      	add	sp, #12
 8011db6:	4770      	bx	lr
 8011db8:	20000034 	.word	0x20000034

08011dbc <__ascii_wctomb>:
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	4608      	mov	r0, r1
 8011dc0:	b141      	cbz	r1, 8011dd4 <__ascii_wctomb+0x18>
 8011dc2:	2aff      	cmp	r2, #255	@ 0xff
 8011dc4:	d904      	bls.n	8011dd0 <__ascii_wctomb+0x14>
 8011dc6:	228a      	movs	r2, #138	@ 0x8a
 8011dc8:	601a      	str	r2, [r3, #0]
 8011dca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011dce:	4770      	bx	lr
 8011dd0:	700a      	strb	r2, [r1, #0]
 8011dd2:	2001      	movs	r0, #1
 8011dd4:	4770      	bx	lr

08011dd6 <abort>:
 8011dd6:	b508      	push	{r3, lr}
 8011dd8:	2006      	movs	r0, #6
 8011dda:	f000 f82b 	bl	8011e34 <raise>
 8011dde:	2001      	movs	r0, #1
 8011de0:	f7f0 f896 	bl	8001f10 <_exit>

08011de4 <_raise_r>:
 8011de4:	291f      	cmp	r1, #31
 8011de6:	b538      	push	{r3, r4, r5, lr}
 8011de8:	4605      	mov	r5, r0
 8011dea:	460c      	mov	r4, r1
 8011dec:	d904      	bls.n	8011df8 <_raise_r+0x14>
 8011dee:	2316      	movs	r3, #22
 8011df0:	6003      	str	r3, [r0, #0]
 8011df2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011df6:	bd38      	pop	{r3, r4, r5, pc}
 8011df8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011dfa:	b112      	cbz	r2, 8011e02 <_raise_r+0x1e>
 8011dfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e00:	b94b      	cbnz	r3, 8011e16 <_raise_r+0x32>
 8011e02:	4628      	mov	r0, r5
 8011e04:	f000 f830 	bl	8011e68 <_getpid_r>
 8011e08:	4622      	mov	r2, r4
 8011e0a:	4601      	mov	r1, r0
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e12:	f000 b817 	b.w	8011e44 <_kill_r>
 8011e16:	2b01      	cmp	r3, #1
 8011e18:	d00a      	beq.n	8011e30 <_raise_r+0x4c>
 8011e1a:	1c59      	adds	r1, r3, #1
 8011e1c:	d103      	bne.n	8011e26 <_raise_r+0x42>
 8011e1e:	2316      	movs	r3, #22
 8011e20:	6003      	str	r3, [r0, #0]
 8011e22:	2001      	movs	r0, #1
 8011e24:	e7e7      	b.n	8011df6 <_raise_r+0x12>
 8011e26:	2100      	movs	r1, #0
 8011e28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011e2c:	4620      	mov	r0, r4
 8011e2e:	4798      	blx	r3
 8011e30:	2000      	movs	r0, #0
 8011e32:	e7e0      	b.n	8011df6 <_raise_r+0x12>

08011e34 <raise>:
 8011e34:	4b02      	ldr	r3, [pc, #8]	@ (8011e40 <raise+0xc>)
 8011e36:	4601      	mov	r1, r0
 8011e38:	6818      	ldr	r0, [r3, #0]
 8011e3a:	f7ff bfd3 	b.w	8011de4 <_raise_r>
 8011e3e:	bf00      	nop
 8011e40:	20000034 	.word	0x20000034

08011e44 <_kill_r>:
 8011e44:	b538      	push	{r3, r4, r5, lr}
 8011e46:	4d07      	ldr	r5, [pc, #28]	@ (8011e64 <_kill_r+0x20>)
 8011e48:	2300      	movs	r3, #0
 8011e4a:	4604      	mov	r4, r0
 8011e4c:	4608      	mov	r0, r1
 8011e4e:	4611      	mov	r1, r2
 8011e50:	602b      	str	r3, [r5, #0]
 8011e52:	f7f0 f84d 	bl	8001ef0 <_kill>
 8011e56:	1c43      	adds	r3, r0, #1
 8011e58:	d102      	bne.n	8011e60 <_kill_r+0x1c>
 8011e5a:	682b      	ldr	r3, [r5, #0]
 8011e5c:	b103      	cbz	r3, 8011e60 <_kill_r+0x1c>
 8011e5e:	6023      	str	r3, [r4, #0]
 8011e60:	bd38      	pop	{r3, r4, r5, pc}
 8011e62:	bf00      	nop
 8011e64:	200078d8 	.word	0x200078d8

08011e68 <_getpid_r>:
 8011e68:	f7f0 b83a 	b.w	8001ee0 <_getpid>

08011e6c <checkint>:
 8011e6c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011e70:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8011e74:	429a      	cmp	r2, r3
 8011e76:	b570      	push	{r4, r5, r6, lr}
 8011e78:	dd2a      	ble.n	8011ed0 <checkint+0x64>
 8011e7a:	f240 4333 	movw	r3, #1075	@ 0x433
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	dc24      	bgt.n	8011ecc <checkint+0x60>
 8011e82:	1a9b      	subs	r3, r3, r2
 8011e84:	f1a3 0620 	sub.w	r6, r3, #32
 8011e88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011e8c:	fa02 f403 	lsl.w	r4, r2, r3
 8011e90:	fa02 f606 	lsl.w	r6, r2, r6
 8011e94:	f1c3 0520 	rsb	r5, r3, #32
 8011e98:	fa22 f505 	lsr.w	r5, r2, r5
 8011e9c:	4334      	orrs	r4, r6
 8011e9e:	432c      	orrs	r4, r5
 8011ea0:	409a      	lsls	r2, r3
 8011ea2:	ea20 0202 	bic.w	r2, r0, r2
 8011ea6:	ea21 0404 	bic.w	r4, r1, r4
 8011eaa:	4322      	orrs	r2, r4
 8011eac:	f1a3 0420 	sub.w	r4, r3, #32
 8011eb0:	f1c3 0220 	rsb	r2, r3, #32
 8011eb4:	d10c      	bne.n	8011ed0 <checkint+0x64>
 8011eb6:	40d8      	lsrs	r0, r3
 8011eb8:	fa01 f302 	lsl.w	r3, r1, r2
 8011ebc:	4318      	orrs	r0, r3
 8011ebe:	40e1      	lsrs	r1, r4
 8011ec0:	4308      	orrs	r0, r1
 8011ec2:	f000 0001 	and.w	r0, r0, #1
 8011ec6:	f1d0 0002 	rsbs	r0, r0, #2
 8011eca:	bd70      	pop	{r4, r5, r6, pc}
 8011ecc:	2002      	movs	r0, #2
 8011ece:	e7fc      	b.n	8011eca <checkint+0x5e>
 8011ed0:	2000      	movs	r0, #0
 8011ed2:	e7fa      	b.n	8011eca <checkint+0x5e>
 8011ed4:	0000      	movs	r0, r0
	...

08011ed8 <pow>:
 8011ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011edc:	ee10 4a90 	vmov	r4, s1
 8011ee0:	ed2d 8b0a 	vpush	{d8-d12}
 8011ee4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8011ee8:	ee11 aa90 	vmov	sl, s3
 8011eec:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8011ef0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8011ef4:	429a      	cmp	r2, r3
 8011ef6:	ee10 5a10 	vmov	r5, s0
 8011efa:	ee11 0a10 	vmov	r0, s2
 8011efe:	b087      	sub	sp, #28
 8011f00:	46c4      	mov	ip, r8
 8011f02:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8011f06:	d806      	bhi.n	8011f16 <pow+0x3e>
 8011f08:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8011f0c:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8011f10:	2b7f      	cmp	r3, #127	@ 0x7f
 8011f12:	f240 8157 	bls.w	80121c4 <pow+0x2ec>
 8011f16:	1802      	adds	r2, r0, r0
 8011f18:	eb4a 010a 	adc.w	r1, sl, sl
 8011f1c:	f06f 0b01 	mvn.w	fp, #1
 8011f20:	1e57      	subs	r7, r2, #1
 8011f22:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 8011f26:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 8011f2a:	45bb      	cmp	fp, r7
 8011f2c:	eb7e 0303 	sbcs.w	r3, lr, r3
 8011f30:	d242      	bcs.n	8011fb8 <pow+0xe0>
 8011f32:	ea52 0301 	orrs.w	r3, r2, r1
 8011f36:	f04f 0300 	mov.w	r3, #0
 8011f3a:	d10c      	bne.n	8011f56 <pow+0x7e>
 8011f3c:	196d      	adds	r5, r5, r5
 8011f3e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 8011f42:	4164      	adcs	r4, r4
 8011f44:	42ab      	cmp	r3, r5
 8011f46:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011f4a:	41a3      	sbcs	r3, r4
 8011f4c:	f0c0 808f 	bcc.w	801206e <pow+0x196>
 8011f50:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8011f54:	e02b      	b.n	8011fae <pow+0xd6>
 8011f56:	4ed4      	ldr	r6, [pc, #848]	@ (80122a8 <pow+0x3d0>)
 8011f58:	42b4      	cmp	r4, r6
 8011f5a:	bf08      	it	eq
 8011f5c:	429d      	cmpeq	r5, r3
 8011f5e:	d109      	bne.n	8011f74 <pow+0x9c>
 8011f60:	1800      	adds	r0, r0, r0
 8011f62:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 8011f66:	eb4a 0a0a 	adc.w	sl, sl, sl
 8011f6a:	4283      	cmp	r3, r0
 8011f6c:	4bcf      	ldr	r3, [pc, #828]	@ (80122ac <pow+0x3d4>)
 8011f6e:	eb73 030a 	sbcs.w	r3, r3, sl
 8011f72:	e7eb      	b.n	8011f4c <pow+0x74>
 8011f74:	196d      	adds	r5, r5, r5
 8011f76:	48ce      	ldr	r0, [pc, #824]	@ (80122b0 <pow+0x3d8>)
 8011f78:	4164      	adcs	r4, r4
 8011f7a:	42ab      	cmp	r3, r5
 8011f7c:	eb70 0604 	sbcs.w	r6, r0, r4
 8011f80:	d375      	bcc.n	801206e <pow+0x196>
 8011f82:	4281      	cmp	r1, r0
 8011f84:	bf08      	it	eq
 8011f86:	429a      	cmpeq	r2, r3
 8011f88:	d171      	bne.n	801206e <pow+0x196>
 8011f8a:	4aca      	ldr	r2, [pc, #808]	@ (80122b4 <pow+0x3dc>)
 8011f8c:	4294      	cmp	r4, r2
 8011f8e:	bf08      	it	eq
 8011f90:	429d      	cmpeq	r5, r3
 8011f92:	d0dd      	beq.n	8011f50 <pow+0x78>
 8011f94:	4294      	cmp	r4, r2
 8011f96:	ea6f 0a0a 	mvn.w	sl, sl
 8011f9a:	bf34      	ite	cc
 8011f9c:	2400      	movcc	r4, #0
 8011f9e:	2401      	movcs	r4, #1
 8011fa0:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8011fa4:	4554      	cmp	r4, sl
 8011fa6:	f040 81dc 	bne.w	8012362 <pow+0x48a>
 8011faa:	ee21 0b01 	vmul.f64	d0, d1, d1
 8011fae:	b007      	add	sp, #28
 8011fb0:	ecbd 8b0a 	vpop	{d8-d12}
 8011fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fb8:	196f      	adds	r7, r5, r5
 8011fba:	eb44 0904 	adc.w	r9, r4, r4
 8011fbe:	1e7a      	subs	r2, r7, #1
 8011fc0:	f169 0300 	sbc.w	r3, r9, #0
 8011fc4:	4593      	cmp	fp, r2
 8011fc6:	eb7e 0303 	sbcs.w	r3, lr, r3
 8011fca:	d225      	bcs.n	8012018 <pow+0x140>
 8011fcc:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011fd0:	2c00      	cmp	r4, #0
 8011fd2:	da13      	bge.n	8011ffc <pow+0x124>
 8011fd4:	4651      	mov	r1, sl
 8011fd6:	f7ff ff49 	bl	8011e6c <checkint>
 8011fda:	2801      	cmp	r0, #1
 8011fdc:	d10e      	bne.n	8011ffc <pow+0x124>
 8011fde:	eeb1 0b40 	vneg.f64	d0, d0
 8011fe2:	ea57 0909 	orrs.w	r9, r7, r9
 8011fe6:	d10b      	bne.n	8012000 <pow+0x128>
 8011fe8:	f1ba 0f00 	cmp.w	sl, #0
 8011fec:	dadf      	bge.n	8011fae <pow+0xd6>
 8011fee:	b007      	add	sp, #28
 8011ff0:	ecbd 8b0a 	vpop	{d8-d12}
 8011ff4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff8:	f000 b9ee 	b.w	80123d8 <__math_divzero>
 8011ffc:	2000      	movs	r0, #0
 8011ffe:	e7f0      	b.n	8011fe2 <pow+0x10a>
 8012000:	f1ba 0f00 	cmp.w	sl, #0
 8012004:	dad3      	bge.n	8011fae <pow+0xd6>
 8012006:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801200a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801200e:	ed8d 7b00 	vstr	d7, [sp]
 8012012:	ed9d 0b00 	vldr	d0, [sp]
 8012016:	e7ca      	b.n	8011fae <pow+0xd6>
 8012018:	2c00      	cmp	r4, #0
 801201a:	da2b      	bge.n	8012074 <pow+0x19c>
 801201c:	4651      	mov	r1, sl
 801201e:	f7ff ff25 	bl	8011e6c <checkint>
 8012022:	b930      	cbnz	r0, 8012032 <pow+0x15a>
 8012024:	b007      	add	sp, #28
 8012026:	ecbd 8b0a 	vpop	{d8-d12}
 801202a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801202e:	f000 b9eb 	b.w	8012408 <__math_invalid>
 8012032:	1e41      	subs	r1, r0, #1
 8012034:	4248      	negs	r0, r1
 8012036:	4148      	adcs	r0, r1
 8012038:	0480      	lsls	r0, r0, #18
 801203a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801203e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8012042:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8012046:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801204a:	2b7f      	cmp	r3, #127	@ 0x7f
 801204c:	d92d      	bls.n	80120aa <pow+0x1d2>
 801204e:	4b96      	ldr	r3, [pc, #600]	@ (80122a8 <pow+0x3d0>)
 8012050:	2000      	movs	r0, #0
 8012052:	429c      	cmp	r4, r3
 8012054:	bf08      	it	eq
 8012056:	4285      	cmpeq	r5, r0
 8012058:	f43f af7a 	beq.w	8011f50 <pow+0x78>
 801205c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8012060:	428a      	cmp	r2, r1
 8012062:	d80c      	bhi.n	801207e <pow+0x1a6>
 8012064:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8012068:	42a8      	cmp	r0, r5
 801206a:	41a3      	sbcs	r3, r4
 801206c:	d204      	bcs.n	8012078 <pow+0x1a0>
 801206e:	ee31 0b00 	vadd.f64	d0, d1, d0
 8012072:	e79c      	b.n	8011fae <pow+0xd6>
 8012074:	2000      	movs	r0, #0
 8012076:	e7e4      	b.n	8012042 <pow+0x16a>
 8012078:	ee30 0b41 	vsub.f64	d0, d0, d1
 801207c:	e797      	b.n	8011fae <pow+0xd6>
 801207e:	2d01      	cmp	r5, #1
 8012080:	eb74 0303 	sbcs.w	r3, r4, r3
 8012084:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012088:	bf34      	ite	cc
 801208a:	2301      	movcc	r3, #1
 801208c:	2300      	movcs	r3, #0
 801208e:	4296      	cmp	r6, r2
 8012090:	bf8c      	ite	hi
 8012092:	2600      	movhi	r6, #0
 8012094:	2601      	movls	r6, #1
 8012096:	42b3      	cmp	r3, r6
 8012098:	f000 809c 	beq.w	80121d4 <pow+0x2fc>
 801209c:	b007      	add	sp, #28
 801209e:	ecbd 8b0a 	vpop	{d8-d12}
 80120a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120a6:	f000 b98f 	b.w	80123c8 <__math_oflow>
 80120aa:	f1bc 0f00 	cmp.w	ip, #0
 80120ae:	d10a      	bne.n	80120c6 <pow+0x1ee>
 80120b0:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8012298 <pow+0x3c0>
 80120b4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80120b8:	ec53 2b17 	vmov	r2, r3, d7
 80120bc:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 80120c0:	4615      	mov	r5, r2
 80120c2:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 80120c6:	4a7c      	ldr	r2, [pc, #496]	@ (80122b8 <pow+0x3e0>)
 80120c8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80120cc:	4422      	add	r2, r4
 80120ce:	1513      	asrs	r3, r2, #20
 80120d0:	f3c2 3146 	ubfx	r1, r2, #13, #7
 80120d4:	ee03 3a10 	vmov	s6, r3
 80120d8:	0d12      	lsrs	r2, r2, #20
 80120da:	4b78      	ldr	r3, [pc, #480]	@ (80122bc <pow+0x3e4>)
 80120dc:	0512      	lsls	r2, r2, #20
 80120de:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 80120e2:	1aa7      	subs	r7, r4, r2
 80120e4:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 80120e8:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 80120ec:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 80120f0:	1e2e      	subs	r6, r5, #0
 80120f2:	ec47 6b14 	vmov	d4, r6, r7
 80120f6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 80120fa:	eea4 6b05 	vfma.f64	d6, d4, d5
 80120fe:	ed93 5b00 	vldr	d5, [r3]
 8012102:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8012106:	eea3 2b05 	vfma.f64	d2, d3, d5
 801210a:	ed93 5b02 	vldr	d5, [r3, #8]
 801210e:	ee36 4b02 	vadd.f64	d4, d6, d2
 8012112:	ee32 2b44 	vsub.f64	d2, d2, d4
 8012116:	eea3 7b05 	vfma.f64	d7, d3, d5
 801211a:	ed93 5b04 	vldr	d5, [r3, #16]
 801211e:	ee32 2b06 	vadd.f64	d2, d2, d6
 8012122:	ee37 7b02 	vadd.f64	d7, d7, d2
 8012126:	ee26 5b05 	vmul.f64	d5, d6, d5
 801212a:	ee26 0b05 	vmul.f64	d0, d6, d5
 801212e:	ee34 8b00 	vadd.f64	d8, d4, d0
 8012132:	eeb0 9b40 	vmov.f64	d9, d0
 8012136:	ee34 4b48 	vsub.f64	d4, d4, d8
 801213a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801213e:	ee34 ab00 	vadd.f64	d10, d4, d0
 8012142:	ed93 5b06 	vldr	d5, [r3, #24]
 8012146:	ee26 bb00 	vmul.f64	d11, d6, d0
 801214a:	ee37 7b09 	vadd.f64	d7, d7, d9
 801214e:	ed93 4b08 	vldr	d4, [r3, #32]
 8012152:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8012156:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801215a:	eea6 5b04 	vfma.f64	d5, d6, d4
 801215e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 8012162:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 8012166:	eea6 4b03 	vfma.f64	d4, d6, d3
 801216a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801216e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8012172:	eea0 4b03 	vfma.f64	d4, d0, d3
 8012176:	eea0 5b04 	vfma.f64	d5, d0, d4
 801217a:	eeab 7b05 	vfma.f64	d7, d11, d5
 801217e:	ee38 4b07 	vadd.f64	d4, d8, d7
 8012182:	ee21 6b04 	vmul.f64	d6, d1, d4
 8012186:	ee16 3a90 	vmov	r3, s13
 801218a:	eeb0 5b46 	vmov.f64	d5, d6
 801218e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8012192:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8012196:	18b2      	adds	r2, r6, r2
 8012198:	2a3e      	cmp	r2, #62	@ 0x3e
 801219a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801219e:	ee38 8b44 	vsub.f64	d8, d8, d4
 80121a2:	ee38 8b07 	vadd.f64	d8, d8, d7
 80121a6:	eea1 5b08 	vfma.f64	d5, d1, d8
 80121aa:	d91b      	bls.n	80121e4 <pow+0x30c>
 80121ac:	2a00      	cmp	r2, #0
 80121ae:	da0b      	bge.n	80121c8 <pow+0x2f0>
 80121b0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80121b4:	ee36 0b00 	vadd.f64	d0, d6, d0
 80121b8:	2800      	cmp	r0, #0
 80121ba:	f43f aef8 	beq.w	8011fae <pow+0xd6>
 80121be:	eeb1 0b40 	vneg.f64	d0, d0
 80121c2:	e6f4      	b.n	8011fae <pow+0xd6>
 80121c4:	2000      	movs	r0, #0
 80121c6:	e77e      	b.n	80120c6 <pow+0x1ee>
 80121c8:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 80121cc:	d909      	bls.n	80121e2 <pow+0x30a>
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	f6bf af64 	bge.w	801209c <pow+0x1c4>
 80121d4:	b007      	add	sp, #28
 80121d6:	ecbd 8b0a 	vpop	{d8-d12}
 80121da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121de:	f000 b8eb 	b.w	80123b8 <__math_uflow>
 80121e2:	2600      	movs	r6, #0
 80121e4:	4936      	ldr	r1, [pc, #216]	@ (80122c0 <pow+0x3e8>)
 80121e6:	ed91 4b02 	vldr	d4, [r1, #8]
 80121ea:	ed91 3b00 	vldr	d3, [r1]
 80121ee:	eeb0 7b44 	vmov.f64	d7, d4
 80121f2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80121f6:	ee17 5a10 	vmov	r5, s14
 80121fa:	ee37 7b44 	vsub.f64	d7, d7, d4
 80121fe:	ed91 4b04 	vldr	d4, [r1, #16]
 8012202:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 8012206:	eea7 6b04 	vfma.f64	d6, d7, d4
 801220a:	ed91 4b06 	vldr	d4, [r1, #24]
 801220e:	18dc      	adds	r4, r3, r3
 8012210:	f104 030f 	add.w	r3, r4, #15
 8012214:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8012218:	eea7 6b04 	vfma.f64	d6, d7, d4
 801221c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8012220:	ee35 5b06 	vadd.f64	d5, d5, d6
 8012224:	ee25 6b05 	vmul.f64	d6, d5, d5
 8012228:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801222c:	ed91 4b08 	vldr	d4, [r1, #32]
 8012230:	ee35 7b07 	vadd.f64	d7, d5, d7
 8012234:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8012238:	eea5 4b03 	vfma.f64	d4, d5, d3
 801223c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8012240:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012244:	ee26 6b06 	vmul.f64	d6, d6, d6
 8012248:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801224c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8012250:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8012254:	eea5 4b03 	vfma.f64	d4, d5, d3
 8012258:	1940      	adds	r0, r0, r5
 801225a:	2700      	movs	r7, #0
 801225c:	eb17 020c 	adds.w	r2, r7, ip
 8012260:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8012264:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012268:	2e00      	cmp	r6, #0
 801226a:	d175      	bne.n	8012358 <pow+0x480>
 801226c:	42bd      	cmp	r5, r7
 801226e:	db29      	blt.n	80122c4 <pow+0x3ec>
 8012270:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8012274:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8012278:	4610      	mov	r0, r2
 801227a:	ec41 0b10 	vmov	d0, r0, r1
 801227e:	eea7 0b00 	vfma.f64	d0, d7, d0
 8012282:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80122a0 <pow+0x3c8>
 8012286:	ee20 0b07 	vmul.f64	d0, d0, d7
 801228a:	b007      	add	sp, #28
 801228c:	ecbd 8b0a 	vpop	{d8-d12}
 8012290:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012294:	f000 b8d0 	b.w	8012438 <__math_check_oflow>
 8012298:	00000000 	.word	0x00000000
 801229c:	43300000 	.word	0x43300000
 80122a0:	00000000 	.word	0x00000000
 80122a4:	7f000000 	.word	0x7f000000
 80122a8:	3ff00000 	.word	0x3ff00000
 80122ac:	fff00000 	.word	0xfff00000
 80122b0:	ffe00000 	.word	0xffe00000
 80122b4:	7fe00000 	.word	0x7fe00000
 80122b8:	c0196aab 	.word	0xc0196aab
 80122bc:	08012d98 	.word	0x08012d98
 80122c0:	08013de0 	.word	0x08013de0
 80122c4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80122c8:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 80122cc:	4610      	mov	r0, r2
 80122ce:	ec41 0b15 	vmov	d5, r0, r1
 80122d2:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 80122d6:	ee27 6b05 	vmul.f64	d6, d7, d5
 80122da:	ee35 7b06 	vadd.f64	d7, d5, d6
 80122de:	eeb0 4bc7 	vabs.f64	d4, d7
 80122e2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 80122e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ea:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8012368 <pow+0x490>
 80122ee:	d52a      	bpl.n	8012346 <pow+0x46e>
 80122f0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80122f4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80122f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122fc:	ee35 5b06 	vadd.f64	d5, d5, d6
 8012300:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 8012304:	bf58      	it	pl
 8012306:	eeb0 4b43 	vmovpl.f64	d4, d3
 801230a:	ee37 3b04 	vadd.f64	d3, d7, d4
 801230e:	ee34 6b43 	vsub.f64	d6, d4, d3
 8012312:	ee36 6b07 	vadd.f64	d6, d6, d7
 8012316:	ee36 6b05 	vadd.f64	d6, d6, d5
 801231a:	ee36 6b03 	vadd.f64	d6, d6, d3
 801231e:	ee36 7b44 	vsub.f64	d7, d6, d4
 8012322:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801232a:	d104      	bne.n	8012336 <pow+0x45e>
 801232c:	4632      	mov	r2, r6
 801232e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8012332:	ec43 2b17 	vmov	d7, r2, r3
 8012336:	ed8d 0b02 	vstr	d0, [sp, #8]
 801233a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801233e:	ee26 6b00 	vmul.f64	d6, d6, d0
 8012342:	ed8d 6b04 	vstr	d6, [sp, #16]
 8012346:	ee27 0b00 	vmul.f64	d0, d7, d0
 801234a:	b007      	add	sp, #28
 801234c:	ecbd 8b0a 	vpop	{d8-d12}
 8012350:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012354:	f000 b867 	b.w	8012426 <__math_check_uflow>
 8012358:	ec43 2b10 	vmov	d0, r2, r3
 801235c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8012360:	e625      	b.n	8011fae <pow+0xd6>
 8012362:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8012370 <pow+0x498>
 8012366:	e622      	b.n	8011fae <pow+0xd6>
 8012368:	00000000 	.word	0x00000000
 801236c:	00100000 	.word	0x00100000
	...

08012378 <with_errno>:
 8012378:	b510      	push	{r4, lr}
 801237a:	ed2d 8b02 	vpush	{d8}
 801237e:	eeb0 8b40 	vmov.f64	d8, d0
 8012382:	4604      	mov	r4, r0
 8012384:	f7fd fce0 	bl	800fd48 <__errno>
 8012388:	eeb0 0b48 	vmov.f64	d0, d8
 801238c:	ecbd 8b02 	vpop	{d8}
 8012390:	6004      	str	r4, [r0, #0]
 8012392:	bd10      	pop	{r4, pc}

08012394 <xflow>:
 8012394:	b082      	sub	sp, #8
 8012396:	b158      	cbz	r0, 80123b0 <xflow+0x1c>
 8012398:	eeb1 7b40 	vneg.f64	d7, d0
 801239c:	ed8d 7b00 	vstr	d7, [sp]
 80123a0:	ed9d 7b00 	vldr	d7, [sp]
 80123a4:	2022      	movs	r0, #34	@ 0x22
 80123a6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80123aa:	b002      	add	sp, #8
 80123ac:	f7ff bfe4 	b.w	8012378 <with_errno>
 80123b0:	eeb0 7b40 	vmov.f64	d7, d0
 80123b4:	e7f2      	b.n	801239c <xflow+0x8>
	...

080123b8 <__math_uflow>:
 80123b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80123c0 <__math_uflow+0x8>
 80123bc:	f7ff bfea 	b.w	8012394 <xflow>
 80123c0:	00000000 	.word	0x00000000
 80123c4:	10000000 	.word	0x10000000

080123c8 <__math_oflow>:
 80123c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80123d0 <__math_oflow+0x8>
 80123cc:	f7ff bfe2 	b.w	8012394 <xflow>
 80123d0:	00000000 	.word	0x00000000
 80123d4:	70000000 	.word	0x70000000

080123d8 <__math_divzero>:
 80123d8:	b082      	sub	sp, #8
 80123da:	2800      	cmp	r0, #0
 80123dc:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80123e0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80123e4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80123e8:	ed8d 7b00 	vstr	d7, [sp]
 80123ec:	ed9d 0b00 	vldr	d0, [sp]
 80123f0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8012400 <__math_divzero+0x28>
 80123f4:	2022      	movs	r0, #34	@ 0x22
 80123f6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80123fa:	b002      	add	sp, #8
 80123fc:	f7ff bfbc 	b.w	8012378 <with_errno>
	...

08012408 <__math_invalid>:
 8012408:	eeb0 7b40 	vmov.f64	d7, d0
 801240c:	eeb4 7b47 	vcmp.f64	d7, d7
 8012410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012414:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012418:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801241c:	d602      	bvs.n	8012424 <__math_invalid+0x1c>
 801241e:	2021      	movs	r0, #33	@ 0x21
 8012420:	f7ff bfaa 	b.w	8012378 <with_errno>
 8012424:	4770      	bx	lr

08012426 <__math_check_uflow>:
 8012426:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801242a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801242e:	d102      	bne.n	8012436 <__math_check_uflow+0x10>
 8012430:	2022      	movs	r0, #34	@ 0x22
 8012432:	f7ff bfa1 	b.w	8012378 <with_errno>
 8012436:	4770      	bx	lr

08012438 <__math_check_oflow>:
 8012438:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8012458 <__math_check_oflow+0x20>
 801243c:	eeb0 7bc0 	vabs.f64	d7, d0
 8012440:	eeb4 7b46 	vcmp.f64	d7, d6
 8012444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012448:	dd02      	ble.n	8012450 <__math_check_oflow+0x18>
 801244a:	2022      	movs	r0, #34	@ 0x22
 801244c:	f7ff bf94 	b.w	8012378 <with_errno>
 8012450:	4770      	bx	lr
 8012452:	bf00      	nop
 8012454:	f3af 8000 	nop.w
 8012458:	ffffffff 	.word	0xffffffff
 801245c:	7fefffff 	.word	0x7fefffff

08012460 <_init>:
 8012460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012462:	bf00      	nop
 8012464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012466:	bc08      	pop	{r3}
 8012468:	469e      	mov	lr, r3
 801246a:	4770      	bx	lr

0801246c <_fini>:
 801246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801246e:	bf00      	nop
 8012470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012472:	bc08      	pop	{r3}
 8012474:	469e      	mov	lr, r3
 8012476:	4770      	bx	lr
